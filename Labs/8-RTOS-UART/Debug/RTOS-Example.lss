
RTOS-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000a474  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040a474  0040a474  0001a474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  0040a47c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000003a4  204009b8  0040ae34  000209b8  2**2
                  ALLOC
  4 .stack        00002004  20400d5c  0040b1d8  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402d60  0040d1dc  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001fed1  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000040d6  00000000  00000000  00040910  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000988d  00000000  00000000  000449e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ee0  00000000  00000000  0004e273  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001208  00000000  00000000  0004f153  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000233f2  00000000  00000000  0005035b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00010ee9  00000000  00000000  0007374d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009ce9d  00000000  00000000  00084636  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003754  00000000  00000000  001214d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	60 2d 40 20 95 0c 40 00 93 0c 40 00 93 0c 40 00     `-@ ..@...@...@.
  400010:	93 0c 40 00 93 0c 40 00 93 0c 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	91 10 40 00 93 0c 40 00 00 00 00 00 31 11 40 00     ..@...@.....1.@.
  40003c:	95 11 40 00 93 0c 40 00 93 0c 40 00 93 0c 40 00     ..@...@...@...@.
  40004c:	93 0c 40 00 93 0c 40 00 93 0c 40 00 93 0c 40 00     ..@...@...@...@.
  40005c:	93 0c 40 00 93 0c 40 00 00 00 00 00 ed 06 40 00     ..@...@.......@.
  40006c:	01 07 40 00 15 07 40 00 93 0c 40 00 4d 38 40 00     ..@...@...@.M8@.
  40007c:	93 0c 40 00 29 07 40 00 3d 07 40 00 93 0c 40 00     ..@.).@.=.@...@.
  40008c:	93 0c 40 00 93 0c 40 00 93 0c 40 00 93 0c 40 00     ..@...@...@...@.
  40009c:	93 0c 40 00 93 0c 40 00 93 0c 40 00 93 0c 40 00     ..@...@...@...@.
  4000ac:	93 0c 40 00 93 0c 40 00 93 0c 40 00 93 0c 40 00     ..@...@...@...@.
  4000bc:	93 0c 40 00 93 0c 40 00 93 0c 40 00 93 0c 40 00     ..@...@...@...@.
  4000cc:	93 0c 40 00 93 0c 40 00 93 0c 40 00 93 0c 40 00     ..@...@...@...@.
  4000dc:	93 0c 40 00 93 0c 40 00 93 0c 40 00 93 0c 40 00     ..@...@...@...@.
  4000ec:	93 0c 40 00 93 0c 40 00 93 0c 40 00 93 0c 40 00     ..@...@...@...@.
  4000fc:	93 0c 40 00 93 0c 40 00 93 0c 40 00 93 0c 40 00     ..@...@...@...@.
  40010c:	93 0c 40 00 93 0c 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 93 0c 40 00 93 0c 40 00 93 0c 40 00     ......@...@...@.
  40012c:	93 0c 40 00 93 0c 40 00 93 0c 40 00 93 0c 40 00     ..@...@...@...@.
  40013c:	93 0c 40 00 93 0c 40 00 93 0c 40 00 93 0c 40 00     ..@...@...@...@.
  40014c:	93 0c 40 00 93 0c 40 00 93 0c 40 00 93 0c 40 00     ..@...@...@...@.
  40015c:	93 0c 40 00 93 0c 40 00 93 0c 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009b8 	.word	0x204009b8
  400184:	00000000 	.word	0x00000000
  400188:	0040a47c 	.word	0x0040a47c

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	0040a47c 	.word	0x0040a47c
  4001c8:	204009bc 	.word	0x204009bc
  4001cc:	0040a47c 	.word	0x0040a47c
  4001d0:	00000000 	.word	0x00000000

004001d4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001d4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX/2);
  4001d6:	4810      	ldr	r0, [pc, #64]	; (400218 <sysclk_init+0x44>)
  4001d8:	4b10      	ldr	r3, [pc, #64]	; (40021c <sysclk_init+0x48>)
  4001da:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001dc:	213e      	movs	r1, #62	; 0x3e
  4001de:	2000      	movs	r0, #0
  4001e0:	4b0f      	ldr	r3, [pc, #60]	; (400220 <sysclk_init+0x4c>)
  4001e2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001e4:	4c0f      	ldr	r4, [pc, #60]	; (400224 <sysclk_init+0x50>)
  4001e6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001e8:	2800      	cmp	r0, #0
  4001ea:	d0fc      	beq.n	4001e6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001ec:	4b0e      	ldr	r3, [pc, #56]	; (400228 <sysclk_init+0x54>)
  4001ee:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001f0:	4a0e      	ldr	r2, [pc, #56]	; (40022c <sysclk_init+0x58>)
  4001f2:	4b0f      	ldr	r3, [pc, #60]	; (400230 <sysclk_init+0x5c>)
  4001f4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001f6:	4c0f      	ldr	r4, [pc, #60]	; (400234 <sysclk_init+0x60>)
  4001f8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001fa:	2800      	cmp	r0, #0
  4001fc:	d0fc      	beq.n	4001f8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001fe:	2002      	movs	r0, #2
  400200:	4b0d      	ldr	r3, [pc, #52]	; (400238 <sysclk_init+0x64>)
  400202:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400204:	2000      	movs	r0, #0
  400206:	4b0d      	ldr	r3, [pc, #52]	; (40023c <sysclk_init+0x68>)
  400208:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40020a:	4b0d      	ldr	r3, [pc, #52]	; (400240 <sysclk_init+0x6c>)
  40020c:	4798      	blx	r3

	/* Set a flash wait state depending on the master clock frequency */
	system_init_flash(sysclk_get_cpu_hz() / CONFIG_SYSCLK_DIV);
  40020e:	4802      	ldr	r0, [pc, #8]	; (400218 <sysclk_init+0x44>)
  400210:	4b02      	ldr	r3, [pc, #8]	; (40021c <sysclk_init+0x48>)
  400212:	4798      	blx	r3
  400214:	bd10      	pop	{r4, pc}
  400216:	bf00      	nop
  400218:	08f0d180 	.word	0x08f0d180
  40021c:	00400e69 	.word	0x00400e69
  400220:	004007ed 	.word	0x004007ed
  400224:	00400841 	.word	0x00400841
  400228:	00400851 	.word	0x00400851
  40022c:	20183f01 	.word	0x20183f01
  400230:	400e0600 	.word	0x400e0600
  400234:	00400861 	.word	0x00400861
  400238:	00400751 	.word	0x00400751
  40023c:	00400789 	.word	0x00400789
  400240:	00400d5d 	.word	0x00400d5d

00400244 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400248:	b980      	cbnz	r0, 40026c <_read+0x28>
  40024a:	460c      	mov	r4, r1
  40024c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40024e:	2a00      	cmp	r2, #0
  400250:	dd0f      	ble.n	400272 <_read+0x2e>
  400252:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400254:	4e08      	ldr	r6, [pc, #32]	; (400278 <_read+0x34>)
  400256:	4d09      	ldr	r5, [pc, #36]	; (40027c <_read+0x38>)
  400258:	6830      	ldr	r0, [r6, #0]
  40025a:	4621      	mov	r1, r4
  40025c:	682b      	ldr	r3, [r5, #0]
  40025e:	4798      	blx	r3
		ptr++;
  400260:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  400262:	42bc      	cmp	r4, r7
  400264:	d1f8      	bne.n	400258 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400266:	4640      	mov	r0, r8
  400268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  40026c:	f04f 38ff 	mov.w	r8, #4294967295
  400270:	e7f9      	b.n	400266 <_read+0x22>
	for (; len > 0; --len) {
  400272:	4680      	mov	r8, r0
  400274:	e7f7      	b.n	400266 <_read+0x22>
  400276:	bf00      	nop
  400278:	20400cdc 	.word	0x20400cdc
  40027c:	20400cd4 	.word	0x20400cd4

00400280 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  400280:	3801      	subs	r0, #1
  400282:	2802      	cmp	r0, #2
  400284:	d815      	bhi.n	4002b2 <_write+0x32>
{
  400286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40028a:	460e      	mov	r6, r1
  40028c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40028e:	b19a      	cbz	r2, 4002b8 <_write+0x38>
  400290:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  400292:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4002cc <_write+0x4c>
  400296:	4f0c      	ldr	r7, [pc, #48]	; (4002c8 <_write+0x48>)
  400298:	f8d8 0000 	ldr.w	r0, [r8]
  40029c:	f815 1b01 	ldrb.w	r1, [r5], #1
  4002a0:	683b      	ldr	r3, [r7, #0]
  4002a2:	4798      	blx	r3
  4002a4:	2800      	cmp	r0, #0
  4002a6:	db0a      	blt.n	4002be <_write+0x3e>
  4002a8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4002aa:	3c01      	subs	r4, #1
  4002ac:	d1f4      	bne.n	400298 <_write+0x18>
  4002ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4002b2:	f04f 30ff 	mov.w	r0, #4294967295
  4002b6:	4770      	bx	lr
	for (; len != 0; --len) {
  4002b8:	4610      	mov	r0, r2
  4002ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4002be:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4002c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4002c6:	bf00      	nop
  4002c8:	20400cd8 	.word	0x20400cd8
  4002cc:	20400cdc 	.word	0x20400cdc

004002d0 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4002d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4002d6:	4b5b      	ldr	r3, [pc, #364]	; (400444 <board_init+0x174>)
  4002d8:	605a      	str	r2, [r3, #4]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  4002da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002de:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  4002e2:	4b59      	ldr	r3, [pc, #356]	; (400448 <board_init+0x178>)
  4002e4:	2100      	movs	r1, #0
  4002e6:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  4002ea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002ee:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  4002f2:	695a      	ldr	r2, [r3, #20]
  4002f4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4002f8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  4002fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  4002fe:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  400302:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  400306:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
  40030a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  40030e:	f3c7 354e 	ubfx	r5, r7, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400312:	f3c7 07c9 	ubfx	r7, r7, #3, #10
  400316:	016e      	lsls	r6, r5, #5
  400318:	ea4f 7c87 	mov.w	ip, r7, lsl #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40031c:	f643 7ee0 	movw	lr, #16352	; 0x3fe0
  400320:	461c      	mov	r4, r3
  400322:	ea06 000e 	and.w	r0, r6, lr
  400326:	4662      	mov	r2, ip
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  400328:	463b      	mov	r3, r7
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  40032a:	ea40 0102 	orr.w	r1, r0, r2
  40032e:	f8c4 1260 	str.w	r1, [r4, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  400332:	3b01      	subs	r3, #1
  400334:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
  400338:	f1b3 3fff 	cmp.w	r3, #4294967295
  40033c:	d1f5      	bne.n	40032a <board_init+0x5a>
    } while(sets-- != 0U);
  40033e:	3d01      	subs	r5, #1
  400340:	3e20      	subs	r6, #32
  400342:	f1b5 3fff 	cmp.w	r5, #4294967295
  400346:	d1ec      	bne.n	400322 <board_init+0x52>
  400348:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  40034c:	4b3e      	ldr	r3, [pc, #248]	; (400448 <board_init+0x178>)
  40034e:	695a      	ldr	r2, [r3, #20]
  400350:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400354:	615a      	str	r2, [r3, #20]
  400356:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40035a:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40035e:	4a3b      	ldr	r2, [pc, #236]	; (40044c <board_init+0x17c>)
  400360:	493b      	ldr	r1, [pc, #236]	; (400450 <board_init+0x180>)
  400362:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400364:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400368:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
  40036a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40036e:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400372:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400376:	f022 0201 	bic.w	r2, r2, #1
  40037a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40037e:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400382:	f022 0201 	bic.w	r2, r2, #1
  400386:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb 0xF":::"memory");
  40038a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  40038e:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400392:	200a      	movs	r0, #10
  400394:	4c2f      	ldr	r4, [pc, #188]	; (400454 <board_init+0x184>)
  400396:	47a0      	blx	r4
  400398:	200b      	movs	r0, #11
  40039a:	47a0      	blx	r4
  40039c:	200c      	movs	r0, #12
  40039e:	47a0      	blx	r4
  4003a0:	2010      	movs	r0, #16
  4003a2:	47a0      	blx	r4
  4003a4:	2011      	movs	r0, #17
  4003a6:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4003a8:	4b2b      	ldr	r3, [pc, #172]	; (400458 <board_init+0x188>)
  4003aa:	f44f 7280 	mov.w	r2, #256	; 0x100
  4003ae:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4003b4:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4003b6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4003ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4003be:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4003c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4003c4:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4003c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003ca:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4003cc:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4003ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4003d2:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4003d4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003d8:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4003da:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4003dc:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4003e0:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4003e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4003e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  4003ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  4003ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  4003f2:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  4003f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4003f8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  4003fa:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4003fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400400:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400402:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400406:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400408:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40040a:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40040e:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400410:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400412:	4a12      	ldr	r2, [pc, #72]	; (40045c <board_init+0x18c>)
  400414:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400418:	f043 0310 	orr.w	r3, r3, #16
  40041c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400420:	4b0f      	ldr	r3, [pc, #60]	; (400460 <board_init+0x190>)
  400422:	2210      	movs	r2, #16
  400424:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40042a:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  40042c:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  40042e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400432:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400434:	4311      	orrs	r1, r2
  400436:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400438:	6f59      	ldr	r1, [r3, #116]	; 0x74
  40043a:	4311      	orrs	r1, r2
  40043c:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  40043e:	605a      	str	r2, [r3, #4]
  400440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400442:	bf00      	nop
  400444:	400e1850 	.word	0x400e1850
  400448:	e000ed00 	.word	0xe000ed00
  40044c:	400e0c00 	.word	0x400e0c00
  400450:	5a00080c 	.word	0x5a00080c
  400454:	00400871 	.word	0x00400871
  400458:	400e1200 	.word	0x400e1200
  40045c:	40088000 	.word	0x40088000
  400460:	400e1000 	.word	0x400e1000

00400464 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400464:	6301      	str	r1, [r0, #48]	; 0x30
  400466:	4770      	bx	lr

00400468 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400468:	6341      	str	r1, [r0, #52]	; 0x34
  40046a:	4770      	bx	lr

0040046c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40046c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40046e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400472:	d03a      	beq.n	4004ea <pio_set_peripheral+0x7e>
  400474:	d813      	bhi.n	40049e <pio_set_peripheral+0x32>
  400476:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40047a:	d025      	beq.n	4004c8 <pio_set_peripheral+0x5c>
  40047c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400480:	d10a      	bne.n	400498 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400482:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400484:	4313      	orrs	r3, r2
  400486:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400488:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40048a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40048c:	400b      	ands	r3, r1
  40048e:	ea23 0302 	bic.w	r3, r3, r2
  400492:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400494:	6042      	str	r2, [r0, #4]
  400496:	4770      	bx	lr
	switch (ul_type) {
  400498:	2900      	cmp	r1, #0
  40049a:	d1fb      	bne.n	400494 <pio_set_peripheral+0x28>
  40049c:	4770      	bx	lr
  40049e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4004a2:	d021      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004a4:	d809      	bhi.n	4004ba <pio_set_peripheral+0x4e>
  4004a6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4004aa:	d1f3      	bne.n	400494 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4004ae:	4313      	orrs	r3, r2
  4004b0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004b2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004b4:	4313      	orrs	r3, r2
  4004b6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004b8:	e7ec      	b.n	400494 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4004ba:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4004be:	d013      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004c0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4004c4:	d010      	beq.n	4004e8 <pio_set_peripheral+0x7c>
  4004c6:	e7e5      	b.n	400494 <pio_set_peripheral+0x28>
{
  4004c8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ca:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004cc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4004ce:	43d3      	mvns	r3, r2
  4004d0:	4021      	ands	r1, r4
  4004d2:	461c      	mov	r4, r3
  4004d4:	4019      	ands	r1, r3
  4004d6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004d8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4004da:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4004dc:	400b      	ands	r3, r1
  4004de:	4023      	ands	r3, r4
  4004e0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4004e2:	6042      	str	r2, [r0, #4]
}
  4004e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004e8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4004ea:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4004ec:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4004ee:	400b      	ands	r3, r1
  4004f0:	ea23 0302 	bic.w	r3, r3, r2
  4004f4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4004f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4004f8:	4313      	orrs	r3, r2
  4004fa:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4004fc:	e7ca      	b.n	400494 <pio_set_peripheral+0x28>

004004fe <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4004fe:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400500:	f012 0f01 	tst.w	r2, #1
  400504:	d10d      	bne.n	400522 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400506:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400508:	f012 0f0a 	tst.w	r2, #10
  40050c:	d00b      	beq.n	400526 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40050e:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400510:	f012 0f02 	tst.w	r2, #2
  400514:	d109      	bne.n	40052a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400516:	f012 0f08 	tst.w	r2, #8
  40051a:	d008      	beq.n	40052e <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40051c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400520:	e005      	b.n	40052e <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400522:	6641      	str	r1, [r0, #100]	; 0x64
  400524:	e7f0      	b.n	400508 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400526:	6241      	str	r1, [r0, #36]	; 0x24
  400528:	e7f2      	b.n	400510 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40052a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40052e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400530:	6001      	str	r1, [r0, #0]
  400532:	4770      	bx	lr

00400534 <pio_set_output>:
{
  400534:	b410      	push	{r4}
  400536:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400538:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40053a:	b94c      	cbnz	r4, 400550 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40053c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40053e:	b14b      	cbz	r3, 400554 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400540:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400542:	b94a      	cbnz	r2, 400558 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400544:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400546:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400548:	6001      	str	r1, [r0, #0]
}
  40054a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40054e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400550:	6641      	str	r1, [r0, #100]	; 0x64
  400552:	e7f4      	b.n	40053e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400554:	6541      	str	r1, [r0, #84]	; 0x54
  400556:	e7f4      	b.n	400542 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400558:	6301      	str	r1, [r0, #48]	; 0x30
  40055a:	e7f4      	b.n	400546 <pio_set_output+0x12>

0040055c <pio_configure>:
{
  40055c:	b570      	push	{r4, r5, r6, lr}
  40055e:	b082      	sub	sp, #8
  400560:	4605      	mov	r5, r0
  400562:	4616      	mov	r6, r2
  400564:	461c      	mov	r4, r3
	switch (ul_type) {
  400566:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40056a:	d014      	beq.n	400596 <pio_configure+0x3a>
  40056c:	d90a      	bls.n	400584 <pio_configure+0x28>
  40056e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400572:	d024      	beq.n	4005be <pio_configure+0x62>
  400574:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400578:	d021      	beq.n	4005be <pio_configure+0x62>
  40057a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40057e:	d017      	beq.n	4005b0 <pio_configure+0x54>
		return 0;
  400580:	2000      	movs	r0, #0
  400582:	e01a      	b.n	4005ba <pio_configure+0x5e>
	switch (ul_type) {
  400584:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400588:	d005      	beq.n	400596 <pio_configure+0x3a>
  40058a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40058e:	d002      	beq.n	400596 <pio_configure+0x3a>
  400590:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400594:	d1f4      	bne.n	400580 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400596:	4632      	mov	r2, r6
  400598:	4628      	mov	r0, r5
  40059a:	4b11      	ldr	r3, [pc, #68]	; (4005e0 <pio_configure+0x84>)
  40059c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40059e:	f014 0f01 	tst.w	r4, #1
  4005a2:	d102      	bne.n	4005aa <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4005a4:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4005a6:	2001      	movs	r0, #1
  4005a8:	e007      	b.n	4005ba <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4005aa:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4005ac:	2001      	movs	r0, #1
  4005ae:	e004      	b.n	4005ba <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4005b0:	461a      	mov	r2, r3
  4005b2:	4631      	mov	r1, r6
  4005b4:	4b0b      	ldr	r3, [pc, #44]	; (4005e4 <pio_configure+0x88>)
  4005b6:	4798      	blx	r3
	return 1;
  4005b8:	2001      	movs	r0, #1
}
  4005ba:	b002      	add	sp, #8
  4005bc:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4005be:	f004 0301 	and.w	r3, r4, #1
  4005c2:	9300      	str	r3, [sp, #0]
  4005c4:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4005c8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4005cc:	bf14      	ite	ne
  4005ce:	2200      	movne	r2, #0
  4005d0:	2201      	moveq	r2, #1
  4005d2:	4631      	mov	r1, r6
  4005d4:	4628      	mov	r0, r5
  4005d6:	4c04      	ldr	r4, [pc, #16]	; (4005e8 <pio_configure+0x8c>)
  4005d8:	47a0      	blx	r4
	return 1;
  4005da:	2001      	movs	r0, #1
		break;
  4005dc:	e7ed      	b.n	4005ba <pio_configure+0x5e>
  4005de:	bf00      	nop
  4005e0:	0040046d 	.word	0x0040046d
  4005e4:	004004ff 	.word	0x004004ff
  4005e8:	00400535 	.word	0x00400535

004005ec <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4005ec:	f012 0f10 	tst.w	r2, #16
  4005f0:	d012      	beq.n	400618 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4005f2:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4005f6:	f012 0f20 	tst.w	r2, #32
  4005fa:	d007      	beq.n	40060c <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4005fc:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400600:	f012 0f40 	tst.w	r2, #64	; 0x40
  400604:	d005      	beq.n	400612 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400606:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  40060a:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  40060c:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400610:	e7f6      	b.n	400600 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400612:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400616:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400618:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40061c:	4770      	bx	lr

0040061e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  40061e:	6401      	str	r1, [r0, #64]	; 0x40
  400620:	4770      	bx	lr

00400622 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400622:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400624:	4770      	bx	lr

00400626 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400626:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400628:	4770      	bx	lr
	...

0040062c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40062c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400630:	4604      	mov	r4, r0
  400632:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400634:	4b0e      	ldr	r3, [pc, #56]	; (400670 <pio_handler_process+0x44>)
  400636:	4798      	blx	r3
  400638:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40063a:	4620      	mov	r0, r4
  40063c:	4b0d      	ldr	r3, [pc, #52]	; (400674 <pio_handler_process+0x48>)
  40063e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  400640:	4005      	ands	r5, r0
  400642:	d013      	beq.n	40066c <pio_handler_process+0x40>
  400644:	4c0c      	ldr	r4, [pc, #48]	; (400678 <pio_handler_process+0x4c>)
  400646:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40064a:	e003      	b.n	400654 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  40064c:	42b4      	cmp	r4, r6
  40064e:	d00d      	beq.n	40066c <pio_handler_process+0x40>
  400650:	3410      	adds	r4, #16
		while (status != 0) {
  400652:	b15d      	cbz	r5, 40066c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  400654:	6820      	ldr	r0, [r4, #0]
  400656:	4540      	cmp	r0, r8
  400658:	d1f8      	bne.n	40064c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40065a:	6861      	ldr	r1, [r4, #4]
  40065c:	4229      	tst	r1, r5
  40065e:	d0f5      	beq.n	40064c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400660:	68e3      	ldr	r3, [r4, #12]
  400662:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  400664:	6863      	ldr	r3, [r4, #4]
  400666:	ea25 0503 	bic.w	r5, r5, r3
  40066a:	e7ef      	b.n	40064c <pio_handler_process+0x20>
  40066c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400670:	00400623 	.word	0x00400623
  400674:	00400627 	.word	0x00400627
  400678:	204009d4 	.word	0x204009d4

0040067c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  40067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  40067e:	4c18      	ldr	r4, [pc, #96]	; (4006e0 <pio_handler_set+0x64>)
  400680:	6826      	ldr	r6, [r4, #0]
  400682:	2e06      	cmp	r6, #6
  400684:	d82a      	bhi.n	4006dc <pio_handler_set+0x60>
  400686:	f04f 0c00 	mov.w	ip, #0
  40068a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40068c:	4f15      	ldr	r7, [pc, #84]	; (4006e4 <pio_handler_set+0x68>)
  40068e:	e004      	b.n	40069a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400690:	3401      	adds	r4, #1
  400692:	b2e4      	uxtb	r4, r4
  400694:	46a4      	mov	ip, r4
  400696:	42a6      	cmp	r6, r4
  400698:	d309      	bcc.n	4006ae <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  40069a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  40069c:	0125      	lsls	r5, r4, #4
  40069e:	597d      	ldr	r5, [r7, r5]
  4006a0:	428d      	cmp	r5, r1
  4006a2:	d1f5      	bne.n	400690 <pio_handler_set+0x14>
  4006a4:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4006a8:	686d      	ldr	r5, [r5, #4]
  4006aa:	4295      	cmp	r5, r2
  4006ac:	d1f0      	bne.n	400690 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4006ae:	4d0d      	ldr	r5, [pc, #52]	; (4006e4 <pio_handler_set+0x68>)
  4006b0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4006b4:	eb05 040e 	add.w	r4, r5, lr
  4006b8:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4006bc:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4006be:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4006c0:	9906      	ldr	r1, [sp, #24]
  4006c2:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  4006c4:	3601      	adds	r6, #1
  4006c6:	4566      	cmp	r6, ip
  4006c8:	d005      	beq.n	4006d6 <pio_handler_set+0x5a>
  4006ca:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  4006cc:	461a      	mov	r2, r3
  4006ce:	4b06      	ldr	r3, [pc, #24]	; (4006e8 <pio_handler_set+0x6c>)
  4006d0:	4798      	blx	r3

	return 0;
  4006d2:	2000      	movs	r0, #0
  4006d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  4006d6:	4902      	ldr	r1, [pc, #8]	; (4006e0 <pio_handler_set+0x64>)
  4006d8:	600e      	str	r6, [r1, #0]
  4006da:	e7f6      	b.n	4006ca <pio_handler_set+0x4e>
		return 1;
  4006dc:	2001      	movs	r0, #1
}
  4006de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4006e0:	20400a44 	.word	0x20400a44
  4006e4:	204009d4 	.word	0x204009d4
  4006e8:	004005ed 	.word	0x004005ed

004006ec <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4006ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4006ee:	210a      	movs	r1, #10
  4006f0:	4801      	ldr	r0, [pc, #4]	; (4006f8 <PIOA_Handler+0xc>)
  4006f2:	4b02      	ldr	r3, [pc, #8]	; (4006fc <PIOA_Handler+0x10>)
  4006f4:	4798      	blx	r3
  4006f6:	bd08      	pop	{r3, pc}
  4006f8:	400e0e00 	.word	0x400e0e00
  4006fc:	0040062d 	.word	0x0040062d

00400700 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400700:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400702:	210b      	movs	r1, #11
  400704:	4801      	ldr	r0, [pc, #4]	; (40070c <PIOB_Handler+0xc>)
  400706:	4b02      	ldr	r3, [pc, #8]	; (400710 <PIOB_Handler+0x10>)
  400708:	4798      	blx	r3
  40070a:	bd08      	pop	{r3, pc}
  40070c:	400e1000 	.word	0x400e1000
  400710:	0040062d 	.word	0x0040062d

00400714 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400714:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400716:	210c      	movs	r1, #12
  400718:	4801      	ldr	r0, [pc, #4]	; (400720 <PIOC_Handler+0xc>)
  40071a:	4b02      	ldr	r3, [pc, #8]	; (400724 <PIOC_Handler+0x10>)
  40071c:	4798      	blx	r3
  40071e:	bd08      	pop	{r3, pc}
  400720:	400e1200 	.word	0x400e1200
  400724:	0040062d 	.word	0x0040062d

00400728 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400728:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40072a:	2110      	movs	r1, #16
  40072c:	4801      	ldr	r0, [pc, #4]	; (400734 <PIOD_Handler+0xc>)
  40072e:	4b02      	ldr	r3, [pc, #8]	; (400738 <PIOD_Handler+0x10>)
  400730:	4798      	blx	r3
  400732:	bd08      	pop	{r3, pc}
  400734:	400e1400 	.word	0x400e1400
  400738:	0040062d 	.word	0x0040062d

0040073c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40073c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40073e:	2111      	movs	r1, #17
  400740:	4801      	ldr	r0, [pc, #4]	; (400748 <PIOE_Handler+0xc>)
  400742:	4b02      	ldr	r3, [pc, #8]	; (40074c <PIOE_Handler+0x10>)
  400744:	4798      	blx	r3
  400746:	bd08      	pop	{r3, pc}
  400748:	400e1600 	.word	0x400e1600
  40074c:	0040062d 	.word	0x0040062d

00400750 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400750:	2803      	cmp	r0, #3
  400752:	d011      	beq.n	400778 <pmc_mck_set_division+0x28>
  400754:	2804      	cmp	r0, #4
  400756:	d012      	beq.n	40077e <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400758:	2802      	cmp	r0, #2
  40075a:	bf0c      	ite	eq
  40075c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400760:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  400762:	4a08      	ldr	r2, [pc, #32]	; (400784 <pmc_mck_set_division+0x34>)
  400764:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  40076a:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  40076c:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40076e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400770:	f013 0f08 	tst.w	r3, #8
  400774:	d0fb      	beq.n	40076e <pmc_mck_set_division+0x1e>
}
  400776:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400778:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  40077c:	e7f1      	b.n	400762 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40077e:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  400782:	e7ee      	b.n	400762 <pmc_mck_set_division+0x12>
  400784:	400e0600 	.word	0x400e0600

00400788 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400788:	4a17      	ldr	r2, [pc, #92]	; (4007e8 <pmc_switch_mck_to_pllack+0x60>)
  40078a:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40078c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400790:	4318      	orrs	r0, r3
  400792:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400794:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400796:	f013 0f08 	tst.w	r3, #8
  40079a:	d10a      	bne.n	4007b2 <pmc_switch_mck_to_pllack+0x2a>
  40079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4007a0:	4911      	ldr	r1, [pc, #68]	; (4007e8 <pmc_switch_mck_to_pllack+0x60>)
  4007a2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007a4:	f012 0f08 	tst.w	r2, #8
  4007a8:	d103      	bne.n	4007b2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007aa:	3b01      	subs	r3, #1
  4007ac:	d1f9      	bne.n	4007a2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4007ae:	2001      	movs	r0, #1
  4007b0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4007b2:	4a0d      	ldr	r2, [pc, #52]	; (4007e8 <pmc_switch_mck_to_pllack+0x60>)
  4007b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4007b6:	f023 0303 	bic.w	r3, r3, #3
  4007ba:	f043 0302 	orr.w	r3, r3, #2
  4007be:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4007c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007c2:	f013 0f08 	tst.w	r3, #8
  4007c6:	d10a      	bne.n	4007de <pmc_switch_mck_to_pllack+0x56>
  4007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4007cc:	4906      	ldr	r1, [pc, #24]	; (4007e8 <pmc_switch_mck_to_pllack+0x60>)
  4007ce:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4007d0:	f012 0f08 	tst.w	r2, #8
  4007d4:	d105      	bne.n	4007e2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4007d6:	3b01      	subs	r3, #1
  4007d8:	d1f9      	bne.n	4007ce <pmc_switch_mck_to_pllack+0x46>
			return 1;
  4007da:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  4007dc:	4770      	bx	lr
	return 0;
  4007de:	2000      	movs	r0, #0
  4007e0:	4770      	bx	lr
  4007e2:	2000      	movs	r0, #0
  4007e4:	4770      	bx	lr
  4007e6:	bf00      	nop
  4007e8:	400e0600 	.word	0x400e0600

004007ec <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4007ec:	b9a0      	cbnz	r0, 400818 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4007ee:	480e      	ldr	r0, [pc, #56]	; (400828 <pmc_switch_mainck_to_xtal+0x3c>)
  4007f0:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4007f2:	0209      	lsls	r1, r1, #8
  4007f4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4007f6:	4a0d      	ldr	r2, [pc, #52]	; (40082c <pmc_switch_mainck_to_xtal+0x40>)
  4007f8:	401a      	ands	r2, r3
  4007fa:	4b0d      	ldr	r3, [pc, #52]	; (400830 <pmc_switch_mainck_to_xtal+0x44>)
  4007fc:	4313      	orrs	r3, r2
  4007fe:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400800:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400802:	4602      	mov	r2, r0
  400804:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400806:	f013 0f01 	tst.w	r3, #1
  40080a:	d0fb      	beq.n	400804 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40080c:	4a06      	ldr	r2, [pc, #24]	; (400828 <pmc_switch_mainck_to_xtal+0x3c>)
  40080e:	6a11      	ldr	r1, [r2, #32]
  400810:	4b08      	ldr	r3, [pc, #32]	; (400834 <pmc_switch_mainck_to_xtal+0x48>)
  400812:	430b      	orrs	r3, r1
  400814:	6213      	str	r3, [r2, #32]
  400816:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400818:	4903      	ldr	r1, [pc, #12]	; (400828 <pmc_switch_mainck_to_xtal+0x3c>)
  40081a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40081c:	4a06      	ldr	r2, [pc, #24]	; (400838 <pmc_switch_mainck_to_xtal+0x4c>)
  40081e:	401a      	ands	r2, r3
  400820:	4b06      	ldr	r3, [pc, #24]	; (40083c <pmc_switch_mainck_to_xtal+0x50>)
  400822:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400824:	620b      	str	r3, [r1, #32]
  400826:	4770      	bx	lr
  400828:	400e0600 	.word	0x400e0600
  40082c:	ffc8fffc 	.word	0xffc8fffc
  400830:	00370001 	.word	0x00370001
  400834:	01370000 	.word	0x01370000
  400838:	fec8fffc 	.word	0xfec8fffc
  40083c:	01370002 	.word	0x01370002

00400840 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  400840:	4b02      	ldr	r3, [pc, #8]	; (40084c <pmc_osc_is_ready_mainck+0xc>)
  400842:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400844:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400848:	4770      	bx	lr
  40084a:	bf00      	nop
  40084c:	400e0600 	.word	0x400e0600

00400850 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400850:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  400854:	4b01      	ldr	r3, [pc, #4]	; (40085c <pmc_disable_pllack+0xc>)
  400856:	629a      	str	r2, [r3, #40]	; 0x28
  400858:	4770      	bx	lr
  40085a:	bf00      	nop
  40085c:	400e0600 	.word	0x400e0600

00400860 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400860:	4b02      	ldr	r3, [pc, #8]	; (40086c <pmc_is_locked_pllack+0xc>)
  400862:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  400864:	f000 0002 	and.w	r0, r0, #2
  400868:	4770      	bx	lr
  40086a:	bf00      	nop
  40086c:	400e0600 	.word	0x400e0600

00400870 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  400870:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  400874:	4b05      	ldr	r3, [pc, #20]	; (40088c <pmc_enable_periph_clk+0x1c>)
  400876:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  40087a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  40087e:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  400882:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  400886:	2000      	movs	r0, #0
  400888:	4770      	bx	lr
  40088a:	bf00      	nop
  40088c:	400e0600 	.word	0x400e0600

00400890 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  400890:	4770      	bx	lr
	...

00400894 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  400894:	4a10      	ldr	r2, [pc, #64]	; (4008d8 <pmc_enable_waitmode+0x44>)
  400896:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  400898:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	(void)ul_flash_in_wait_mode;
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  40089c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  4008a0:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  4008a2:	6a11      	ldr	r1, [r2, #32]
  4008a4:	4b0d      	ldr	r3, [pc, #52]	; (4008dc <pmc_enable_waitmode+0x48>)
  4008a6:	430b      	orrs	r3, r1
  4008a8:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4008aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008ac:	f013 0f08 	tst.w	r3, #8
  4008b0:	d0fb      	beq.n	4008aa <pmc_enable_waitmode+0x16>
  4008b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
		__NOP();
  4008b6:	bf00      	nop
	for (i = 0; i < 500; i++) {
  4008b8:	3b01      	subs	r3, #1
  4008ba:	d1fc      	bne.n	4008b6 <pmc_enable_waitmode+0x22>
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4008bc:	4a06      	ldr	r2, [pc, #24]	; (4008d8 <pmc_enable_waitmode+0x44>)
  4008be:	6a13      	ldr	r3, [r2, #32]
  4008c0:	f013 0f08 	tst.w	r3, #8
  4008c4:	d0fb      	beq.n	4008be <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4008c6:	4a04      	ldr	r2, [pc, #16]	; (4008d8 <pmc_enable_waitmode+0x44>)
  4008c8:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4008ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4008ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4008d2:	6713      	str	r3, [r2, #112]	; 0x70
  4008d4:	4770      	bx	lr
  4008d6:	bf00      	nop
  4008d8:	400e0600 	.word	0x400e0600
  4008dc:	00370004 	.word	0x00370004

004008e0 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4008e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  4008e4:	1e43      	subs	r3, r0, #1
  4008e6:	2b04      	cmp	r3, #4
  4008e8:	f200 8107 	bhi.w	400afa <pmc_sleep+0x21a>
  4008ec:	e8df f013 	tbh	[pc, r3, lsl #1]
  4008f0:	00050005 	.word	0x00050005
  4008f4:	00150015 	.word	0x00150015
  4008f8:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  4008fa:	4a81      	ldr	r2, [pc, #516]	; (400b00 <pmc_sleep+0x220>)
  4008fc:	6913      	ldr	r3, [r2, #16]
  4008fe:	f023 0304 	bic.w	r3, r3, #4
  400902:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  400904:	2201      	movs	r2, #1
  400906:	4b7f      	ldr	r3, [pc, #508]	; (400b04 <pmc_sleep+0x224>)
  400908:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
  40090a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40090e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
  400910:	f3bf 8f4f 	dsb	sy
		__DSB();
		__WFI();
  400914:	bf30      	wfi
		break;
  400916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40091a:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  40091c:	2803      	cmp	r0, #3
  40091e:	bf0c      	ite	eq
  400920:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  400922:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  400926:	4b78      	ldr	r3, [pc, #480]	; (400b08 <pmc_sleep+0x228>)
  400928:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  40092a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  40092c:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  400930:	2200      	movs	r2, #0
  400932:	4b74      	ldr	r3, [pc, #464]	; (400b04 <pmc_sleep+0x224>)
  400934:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  400936:	2201      	movs	r2, #1
  400938:	4b74      	ldr	r3, [pc, #464]	; (400b0c <pmc_sleep+0x22c>)
  40093a:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  40093c:	4b74      	ldr	r3, [pc, #464]	; (400b10 <pmc_sleep+0x230>)
  40093e:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  400940:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  400942:	4a74      	ldr	r2, [pc, #464]	; (400b14 <pmc_sleep+0x234>)
  400944:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  400948:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  40094a:	4a73      	ldr	r2, [pc, #460]	; (400b18 <pmc_sleep+0x238>)
  40094c:	433a      	orrs	r2, r7
  40094e:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  400950:	f005 0903 	and.w	r9, r5, #3
  400954:	f1b9 0f01 	cmp.w	r9, #1
  400958:	f240 8089 	bls.w	400a6e <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  40095c:	f025 0103 	bic.w	r1, r5, #3
  400960:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  400964:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400966:	461a      	mov	r2, r3
  400968:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40096a:	f013 0f08 	tst.w	r3, #8
  40096e:	d0fb      	beq.n	400968 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  400970:	f011 0f70 	tst.w	r1, #112	; 0x70
  400974:	d008      	beq.n	400988 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  400976:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  40097a:	4b65      	ldr	r3, [pc, #404]	; (400b10 <pmc_sleep+0x230>)
  40097c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40097e:	461a      	mov	r2, r3
  400980:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400982:	f013 0f08 	tst.w	r3, #8
  400986:	d0fb      	beq.n	400980 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  400988:	4b64      	ldr	r3, [pc, #400]	; (400b1c <pmc_sleep+0x23c>)
  40098a:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40098c:	4a60      	ldr	r2, [pc, #384]	; (400b10 <pmc_sleep+0x230>)
  40098e:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400990:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  400994:	d0fb      	beq.n	40098e <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  400996:	4a5e      	ldr	r2, [pc, #376]	; (400b10 <pmc_sleep+0x230>)
  400998:	6a11      	ldr	r1, [r2, #32]
  40099a:	4b61      	ldr	r3, [pc, #388]	; (400b20 <pmc_sleep+0x240>)
  40099c:	400b      	ands	r3, r1
  40099e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4009a2:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4009a4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4009a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4009aa:	d0fb      	beq.n	4009a4 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  4009ac:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  4009b0:	4a58      	ldr	r2, [pc, #352]	; (400b14 <pmc_sleep+0x234>)
  4009b2:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  4009b4:	2c04      	cmp	r4, #4
  4009b6:	d05c      	beq.n	400a72 <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4009b8:	4c52      	ldr	r4, [pc, #328]	; (400b04 <pmc_sleep+0x224>)
  4009ba:	2301      	movs	r3, #1
  4009bc:	7023      	strb	r3, [r4, #0]
  4009be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4009c2:	b662      	cpsie	i

		pmc_enable_waitmode();
  4009c4:	4b57      	ldr	r3, [pc, #348]	; (400b24 <pmc_sleep+0x244>)
  4009c6:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4009c8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  4009ca:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4009ce:	2300      	movs	r3, #0
  4009d0:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4009d2:	f017 0f02 	tst.w	r7, #2
  4009d6:	d055      	beq.n	400a84 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4009d8:	4a4d      	ldr	r2, [pc, #308]	; (400b10 <pmc_sleep+0x230>)
  4009da:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4009dc:	4952      	ldr	r1, [pc, #328]	; (400b28 <pmc_sleep+0x248>)
  4009de:	4019      	ands	r1, r3
  4009e0:	4b52      	ldr	r3, [pc, #328]	; (400b2c <pmc_sleep+0x24c>)
  4009e2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4009e4:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4009e6:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  4009e8:	4b51      	ldr	r3, [pc, #324]	; (400b30 <pmc_sleep+0x250>)
  4009ea:	400b      	ands	r3, r1
  4009ec:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4009f0:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  4009f2:	4b50      	ldr	r3, [pc, #320]	; (400b34 <pmc_sleep+0x254>)
  4009f4:	4033      	ands	r3, r6
  4009f6:	2b00      	cmp	r3, #0
  4009f8:	d06e      	beq.n	400ad8 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  4009fa:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4009fe:	4b44      	ldr	r3, [pc, #272]	; (400b10 <pmc_sleep+0x230>)
  400a00:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  400a02:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  400a04:	f1b9 0f02 	cmp.w	r9, #2
  400a08:	d104      	bne.n	400a14 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  400a0a:	4a41      	ldr	r2, [pc, #260]	; (400b10 <pmc_sleep+0x230>)
  400a0c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a0e:	f013 0f02 	tst.w	r3, #2
  400a12:	d0fb      	beq.n	400a0c <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  400a14:	4a3e      	ldr	r2, [pc, #248]	; (400b10 <pmc_sleep+0x230>)
  400a16:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  400a1c:	f005 0070 	and.w	r0, r5, #112	; 0x70
  400a20:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400a22:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400a24:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a26:	f013 0f08 	tst.w	r3, #8
  400a2a:	d0fb      	beq.n	400a24 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  400a2c:	4b39      	ldr	r3, [pc, #228]	; (400b14 <pmc_sleep+0x234>)
  400a2e:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  400a32:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  400a36:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400a38:	461a      	mov	r2, r3
  400a3a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a3c:	f013 0f08 	tst.w	r3, #8
  400a40:	d0fb      	beq.n	400a3a <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  400a42:	4a33      	ldr	r2, [pc, #204]	; (400b10 <pmc_sleep+0x230>)
  400a44:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400a46:	420b      	tst	r3, r1
  400a48:	d0fc      	beq.n	400a44 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  400a4a:	2200      	movs	r2, #0
  400a4c:	4b2f      	ldr	r3, [pc, #188]	; (400b0c <pmc_sleep+0x22c>)
  400a4e:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  400a50:	4b39      	ldr	r3, [pc, #228]	; (400b38 <pmc_sleep+0x258>)
  400a52:	681b      	ldr	r3, [r3, #0]
  400a54:	b11b      	cbz	r3, 400a5e <pmc_sleep+0x17e>
			callback_clocks_restored();
  400a56:	4798      	blx	r3
			callback_clocks_restored = NULL;
  400a58:	2200      	movs	r2, #0
  400a5a:	4b37      	ldr	r3, [pc, #220]	; (400b38 <pmc_sleep+0x258>)
  400a5c:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  400a5e:	2201      	movs	r2, #1
  400a60:	4b28      	ldr	r3, [pc, #160]	; (400b04 <pmc_sleep+0x224>)
  400a62:	701a      	strb	r2, [r3, #0]
  400a64:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400a68:	b662      	cpsie	i
  400a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  400a6e:	4629      	mov	r1, r5
  400a70:	e77e      	b.n	400970 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400a72:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  400a76:	6a11      	ldr	r1, [r2, #32]
  400a78:	4b30      	ldr	r3, [pc, #192]	; (400b3c <pmc_sleep+0x25c>)
  400a7a:	400b      	ands	r3, r1
  400a7c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400a80:	6213      	str	r3, [r2, #32]
  400a82:	e799      	b.n	4009b8 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  400a84:	f017 0f01 	tst.w	r7, #1
  400a88:	d0b3      	beq.n	4009f2 <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  400a8a:	4b21      	ldr	r3, [pc, #132]	; (400b10 <pmc_sleep+0x230>)
  400a8c:	6a1b      	ldr	r3, [r3, #32]
  400a8e:	f013 0f01 	tst.w	r3, #1
  400a92:	d10b      	bne.n	400aac <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400a94:	491e      	ldr	r1, [pc, #120]	; (400b10 <pmc_sleep+0x230>)
  400a96:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  400a98:	4a29      	ldr	r2, [pc, #164]	; (400b40 <pmc_sleep+0x260>)
  400a9a:	401a      	ands	r2, r3
  400a9c:	4b29      	ldr	r3, [pc, #164]	; (400b44 <pmc_sleep+0x264>)
  400a9e:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400aa0:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400aa2:	460a      	mov	r2, r1
  400aa4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400aa6:	f013 0f01 	tst.w	r3, #1
  400aaa:	d0fb      	beq.n	400aa4 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  400aac:	4b18      	ldr	r3, [pc, #96]	; (400b10 <pmc_sleep+0x230>)
  400aae:	6a1b      	ldr	r3, [r3, #32]
  400ab0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400ab4:	d108      	bne.n	400ac8 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  400ab6:	4a16      	ldr	r2, [pc, #88]	; (400b10 <pmc_sleep+0x230>)
  400ab8:	6a11      	ldr	r1, [r2, #32]
  400aba:	4b23      	ldr	r3, [pc, #140]	; (400b48 <pmc_sleep+0x268>)
  400abc:	430b      	orrs	r3, r1
  400abe:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  400ac0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400ac2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400ac6:	d0fb      	beq.n	400ac0 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400ac8:	4a11      	ldr	r2, [pc, #68]	; (400b10 <pmc_sleep+0x230>)
  400aca:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  400acc:	4b18      	ldr	r3, [pc, #96]	; (400b30 <pmc_sleep+0x250>)
  400ace:	400b      	ands	r3, r1
  400ad0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  400ad4:	6213      	str	r3, [r2, #32]
  400ad6:	e78c      	b.n	4009f2 <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  400ad8:	2100      	movs	r1, #0
  400ada:	e793      	b.n	400a04 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  400adc:	4a08      	ldr	r2, [pc, #32]	; (400b00 <pmc_sleep+0x220>)
  400ade:	6913      	ldr	r3, [r2, #16]
  400ae0:	f043 0304 	orr.w	r3, r3, #4
  400ae4:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  400ae6:	4a19      	ldr	r2, [pc, #100]	; (400b4c <pmc_sleep+0x26c>)
  400ae8:	4b19      	ldr	r3, [pc, #100]	; (400b50 <pmc_sleep+0x270>)
  400aea:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  400aec:	2201      	movs	r2, #1
  400aee:	4b05      	ldr	r3, [pc, #20]	; (400b04 <pmc_sleep+0x224>)
  400af0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400af2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400af6:	b662      	cpsie	i
		__WFI() ;
  400af8:	bf30      	wfi
  400afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400afe:	bf00      	nop
  400b00:	e000ed00 	.word	0xe000ed00
  400b04:	20400000 	.word	0x20400000
  400b08:	00400891 	.word	0x00400891
  400b0c:	20400a48 	.word	0x20400a48
  400b10:	400e0600 	.word	0x400e0600
  400b14:	400e0c00 	.word	0x400e0c00
  400b18:	00370008 	.word	0x00370008
  400b1c:	00400851 	.word	0x00400851
  400b20:	fec8ffff 	.word	0xfec8ffff
  400b24:	00400895 	.word	0x00400895
  400b28:	fec8fffc 	.word	0xfec8fffc
  400b2c:	01370002 	.word	0x01370002
  400b30:	ffc8ff87 	.word	0xffc8ff87
  400b34:	07ff0000 	.word	0x07ff0000
  400b38:	20400a4c 	.word	0x20400a4c
  400b3c:	ffc8fffe 	.word	0xffc8fffe
  400b40:	ffc8fffc 	.word	0xffc8fffc
  400b44:	00370001 	.word	0x00370001
  400b48:	01370000 	.word	0x01370000
  400b4c:	a5000004 	.word	0xa5000004
  400b50:	400e1810 	.word	0x400e1810

00400b54 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400b54:	6943      	ldr	r3, [r0, #20]
  400b56:	f013 0f02 	tst.w	r3, #2
  400b5a:	d002      	beq.n	400b62 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400b5c:	61c1      	str	r1, [r0, #28]
	return 0;
  400b5e:	2000      	movs	r0, #0
  400b60:	4770      	bx	lr
		return 1;
  400b62:	2001      	movs	r0, #1
}
  400b64:	4770      	bx	lr

00400b66 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400b66:	6943      	ldr	r3, [r0, #20]
  400b68:	f013 0f01 	tst.w	r3, #1
  400b6c:	d003      	beq.n	400b76 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400b6e:	6983      	ldr	r3, [r0, #24]
  400b70:	700b      	strb	r3, [r1, #0]
	return 0;
  400b72:	2000      	movs	r0, #0
  400b74:	4770      	bx	lr
		return 1;
  400b76:	2001      	movs	r0, #1
}
  400b78:	4770      	bx	lr

00400b7a <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400b7a:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400b7c:	010b      	lsls	r3, r1, #4
  400b7e:	4293      	cmp	r3, r2
  400b80:	d914      	bls.n	400bac <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400b82:	00c9      	lsls	r1, r1, #3
  400b84:	084b      	lsrs	r3, r1, #1
  400b86:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400b8a:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400b8e:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400b90:	1e5c      	subs	r4, r3, #1
  400b92:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400b96:	428c      	cmp	r4, r1
  400b98:	d901      	bls.n	400b9e <usart_set_async_baudrate+0x24>
		return 1;
  400b9a:	2001      	movs	r0, #1
  400b9c:	e017      	b.n	400bce <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400b9e:	6841      	ldr	r1, [r0, #4]
  400ba0:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400ba4:	6041      	str	r1, [r0, #4]
  400ba6:	e00c      	b.n	400bc2 <usart_set_async_baudrate+0x48>
		return 1;
  400ba8:	2001      	movs	r0, #1
  400baa:	e010      	b.n	400bce <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400bac:	0859      	lsrs	r1, r3, #1
  400bae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400bb2:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400bb6:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400bb8:	1e5c      	subs	r4, r3, #1
  400bba:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400bbe:	428c      	cmp	r4, r1
  400bc0:	d8f2      	bhi.n	400ba8 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400bc2:	0412      	lsls	r2, r2, #16
  400bc4:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400bc8:	431a      	orrs	r2, r3
  400bca:	6202      	str	r2, [r0, #32]

	return 0;
  400bcc:	2000      	movs	r0, #0
}
  400bce:	f85d 4b04 	ldr.w	r4, [sp], #4
  400bd2:	4770      	bx	lr

00400bd4 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400bd4:	4b08      	ldr	r3, [pc, #32]	; (400bf8 <usart_reset+0x24>)
  400bd6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400bda:	2300      	movs	r3, #0
  400bdc:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400bde:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400be0:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400be2:	2388      	movs	r3, #136	; 0x88
  400be4:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400be6:	2324      	movs	r3, #36	; 0x24
  400be8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400bea:	f44f 7380 	mov.w	r3, #256	; 0x100
  400bee:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400bf0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400bf4:	6003      	str	r3, [r0, #0]
  400bf6:	4770      	bx	lr
  400bf8:	55534100 	.word	0x55534100

00400bfc <usart_init_rs232>:
{
  400bfc:	b570      	push	{r4, r5, r6, lr}
  400bfe:	4605      	mov	r5, r0
  400c00:	460c      	mov	r4, r1
  400c02:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400c04:	4b0f      	ldr	r3, [pc, #60]	; (400c44 <usart_init_rs232+0x48>)
  400c06:	4798      	blx	r3
	ul_reg_val = 0;
  400c08:	2200      	movs	r2, #0
  400c0a:	4b0f      	ldr	r3, [pc, #60]	; (400c48 <usart_init_rs232+0x4c>)
  400c0c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400c0e:	b1a4      	cbz	r4, 400c3a <usart_init_rs232+0x3e>
  400c10:	4632      	mov	r2, r6
  400c12:	6821      	ldr	r1, [r4, #0]
  400c14:	4628      	mov	r0, r5
  400c16:	4b0d      	ldr	r3, [pc, #52]	; (400c4c <usart_init_rs232+0x50>)
  400c18:	4798      	blx	r3
  400c1a:	4602      	mov	r2, r0
  400c1c:	b978      	cbnz	r0, 400c3e <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400c1e:	6863      	ldr	r3, [r4, #4]
  400c20:	68a1      	ldr	r1, [r4, #8]
  400c22:	430b      	orrs	r3, r1
  400c24:	6921      	ldr	r1, [r4, #16]
  400c26:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400c28:	68e1      	ldr	r1, [r4, #12]
  400c2a:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400c2c:	4906      	ldr	r1, [pc, #24]	; (400c48 <usart_init_rs232+0x4c>)
  400c2e:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400c30:	6869      	ldr	r1, [r5, #4]
  400c32:	430b      	orrs	r3, r1
  400c34:	606b      	str	r3, [r5, #4]
}
  400c36:	4610      	mov	r0, r2
  400c38:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400c3a:	2201      	movs	r2, #1
  400c3c:	e7fb      	b.n	400c36 <usart_init_rs232+0x3a>
  400c3e:	2201      	movs	r2, #1
  400c40:	e7f9      	b.n	400c36 <usart_init_rs232+0x3a>
  400c42:	bf00      	nop
  400c44:	00400bd5 	.word	0x00400bd5
  400c48:	20400a50 	.word	0x20400a50
  400c4c:	00400b7b 	.word	0x00400b7b

00400c50 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400c50:	2340      	movs	r3, #64	; 0x40
  400c52:	6003      	str	r3, [r0, #0]
  400c54:	4770      	bx	lr

00400c56 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400c56:	2310      	movs	r3, #16
  400c58:	6003      	str	r3, [r0, #0]
  400c5a:	4770      	bx	lr

00400c5c <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
  400c5c:	6081      	str	r1, [r0, #8]
  400c5e:	4770      	bx	lr

00400c60 <usart_get_status>:
	return p_usart->US_CSR;
  400c60:	6940      	ldr	r0, [r0, #20]
}
  400c62:	4770      	bx	lr

00400c64 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400c64:	6943      	ldr	r3, [r0, #20]
  400c66:	f013 0f02 	tst.w	r3, #2
  400c6a:	d004      	beq.n	400c76 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400c6c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400c70:	61c1      	str	r1, [r0, #28]
	return 0;
  400c72:	2000      	movs	r0, #0
  400c74:	4770      	bx	lr
		return 1;
  400c76:	2001      	movs	r0, #1
}
  400c78:	4770      	bx	lr

00400c7a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400c7a:	6943      	ldr	r3, [r0, #20]
  400c7c:	f013 0f01 	tst.w	r3, #1
  400c80:	d005      	beq.n	400c8e <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400c82:	6983      	ldr	r3, [r0, #24]
  400c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400c88:	600b      	str	r3, [r1, #0]
	return 0;
  400c8a:	2000      	movs	r0, #0
  400c8c:	4770      	bx	lr
		return 1;
  400c8e:	2001      	movs	r0, #1
}
  400c90:	4770      	bx	lr

00400c92 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400c92:	e7fe      	b.n	400c92 <Dummy_Handler>

00400c94 <Reset_Handler>:
{
  400c94:	b500      	push	{lr}
  400c96:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400c98:	4b25      	ldr	r3, [pc, #148]	; (400d30 <Reset_Handler+0x9c>)
  400c9a:	4a26      	ldr	r2, [pc, #152]	; (400d34 <Reset_Handler+0xa0>)
  400c9c:	429a      	cmp	r2, r3
  400c9e:	d010      	beq.n	400cc2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400ca0:	4b25      	ldr	r3, [pc, #148]	; (400d38 <Reset_Handler+0xa4>)
  400ca2:	4a23      	ldr	r2, [pc, #140]	; (400d30 <Reset_Handler+0x9c>)
  400ca4:	429a      	cmp	r2, r3
  400ca6:	d20c      	bcs.n	400cc2 <Reset_Handler+0x2e>
  400ca8:	3b01      	subs	r3, #1
  400caa:	1a9b      	subs	r3, r3, r2
  400cac:	f023 0303 	bic.w	r3, r3, #3
  400cb0:	3304      	adds	r3, #4
  400cb2:	4413      	add	r3, r2
  400cb4:	491f      	ldr	r1, [pc, #124]	; (400d34 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400cb6:	f851 0b04 	ldr.w	r0, [r1], #4
  400cba:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400cbe:	429a      	cmp	r2, r3
  400cc0:	d1f9      	bne.n	400cb6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400cc2:	4b1e      	ldr	r3, [pc, #120]	; (400d3c <Reset_Handler+0xa8>)
  400cc4:	4a1e      	ldr	r2, [pc, #120]	; (400d40 <Reset_Handler+0xac>)
  400cc6:	429a      	cmp	r2, r3
  400cc8:	d20a      	bcs.n	400ce0 <Reset_Handler+0x4c>
  400cca:	3b01      	subs	r3, #1
  400ccc:	1a9b      	subs	r3, r3, r2
  400cce:	f023 0303 	bic.w	r3, r3, #3
  400cd2:	3304      	adds	r3, #4
  400cd4:	4413      	add	r3, r2
                *pDest++ = 0;
  400cd6:	2100      	movs	r1, #0
  400cd8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400cdc:	4293      	cmp	r3, r2
  400cde:	d1fb      	bne.n	400cd8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400ce0:	4a18      	ldr	r2, [pc, #96]	; (400d44 <Reset_Handler+0xb0>)
  400ce2:	4b19      	ldr	r3, [pc, #100]	; (400d48 <Reset_Handler+0xb4>)
  400ce4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400ce8:	6093      	str	r3, [r2, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
  400cea:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400cee:	fab3 f383 	clz	r3, r3
  400cf2:	095b      	lsrs	r3, r3, #5
  400cf4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400cf6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
  400cf8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400cfc:	2200      	movs	r2, #0
  400cfe:	4b13      	ldr	r3, [pc, #76]	; (400d4c <Reset_Handler+0xb8>)
  400d00:	701a      	strb	r2, [r3, #0]
	return flags;
  400d02:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400d04:	4a12      	ldr	r2, [pc, #72]	; (400d50 <Reset_Handler+0xbc>)
  400d06:	6813      	ldr	r3, [r2, #0]
  400d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400d0c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
  400d0e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
  400d12:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400d16:	b129      	cbz	r1, 400d24 <Reset_Handler+0x90>
		cpu_irq_enable();
  400d18:	2201      	movs	r2, #1
  400d1a:	4b0c      	ldr	r3, [pc, #48]	; (400d4c <Reset_Handler+0xb8>)
  400d1c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
  400d1e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400d22:	b662      	cpsie	i
        __libc_init_array();
  400d24:	4b0b      	ldr	r3, [pc, #44]	; (400d54 <Reset_Handler+0xc0>)
  400d26:	4798      	blx	r3
        main();
  400d28:	4b0b      	ldr	r3, [pc, #44]	; (400d58 <Reset_Handler+0xc4>)
  400d2a:	4798      	blx	r3
  400d2c:	e7fe      	b.n	400d2c <Reset_Handler+0x98>
  400d2e:	bf00      	nop
  400d30:	20400000 	.word	0x20400000
  400d34:	0040a47c 	.word	0x0040a47c
  400d38:	204009b8 	.word	0x204009b8
  400d3c:	20400d5c 	.word	0x20400d5c
  400d40:	204009b8 	.word	0x204009b8
  400d44:	e000ed00 	.word	0xe000ed00
  400d48:	00400000 	.word	0x00400000
  400d4c:	20400000 	.word	0x20400000
  400d50:	e000ed88 	.word	0xe000ed88
  400d54:	00403b49 	.word	0x00403b49
  400d58:	004038e1 	.word	0x004038e1

00400d5c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400d5c:	4b3b      	ldr	r3, [pc, #236]	; (400e4c <SystemCoreClockUpdate+0xf0>)
  400d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d60:	f003 0303 	and.w	r3, r3, #3
  400d64:	2b01      	cmp	r3, #1
  400d66:	d01d      	beq.n	400da4 <SystemCoreClockUpdate+0x48>
  400d68:	b183      	cbz	r3, 400d8c <SystemCoreClockUpdate+0x30>
  400d6a:	2b02      	cmp	r3, #2
  400d6c:	d036      	beq.n	400ddc <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400d6e:	4b37      	ldr	r3, [pc, #220]	; (400e4c <SystemCoreClockUpdate+0xf0>)
  400d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400d72:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400d76:	2b70      	cmp	r3, #112	; 0x70
  400d78:	d05f      	beq.n	400e3a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400d7a:	4b34      	ldr	r3, [pc, #208]	; (400e4c <SystemCoreClockUpdate+0xf0>)
  400d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400d7e:	4934      	ldr	r1, [pc, #208]	; (400e50 <SystemCoreClockUpdate+0xf4>)
  400d80:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400d84:	680b      	ldr	r3, [r1, #0]
  400d86:	40d3      	lsrs	r3, r2
  400d88:	600b      	str	r3, [r1, #0]
  400d8a:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400d8c:	4b31      	ldr	r3, [pc, #196]	; (400e54 <SystemCoreClockUpdate+0xf8>)
  400d8e:	695b      	ldr	r3, [r3, #20]
  400d90:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400d94:	bf14      	ite	ne
  400d96:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400d9a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400d9e:	4b2c      	ldr	r3, [pc, #176]	; (400e50 <SystemCoreClockUpdate+0xf4>)
  400da0:	601a      	str	r2, [r3, #0]
  400da2:	e7e4      	b.n	400d6e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400da4:	4b29      	ldr	r3, [pc, #164]	; (400e4c <SystemCoreClockUpdate+0xf0>)
  400da6:	6a1b      	ldr	r3, [r3, #32]
  400da8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400dac:	d003      	beq.n	400db6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400dae:	4a2a      	ldr	r2, [pc, #168]	; (400e58 <SystemCoreClockUpdate+0xfc>)
  400db0:	4b27      	ldr	r3, [pc, #156]	; (400e50 <SystemCoreClockUpdate+0xf4>)
  400db2:	601a      	str	r2, [r3, #0]
  400db4:	e7db      	b.n	400d6e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400db6:	4a29      	ldr	r2, [pc, #164]	; (400e5c <SystemCoreClockUpdate+0x100>)
  400db8:	4b25      	ldr	r3, [pc, #148]	; (400e50 <SystemCoreClockUpdate+0xf4>)
  400dba:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400dbc:	4b23      	ldr	r3, [pc, #140]	; (400e4c <SystemCoreClockUpdate+0xf0>)
  400dbe:	6a1b      	ldr	r3, [r3, #32]
  400dc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400dc4:	2b10      	cmp	r3, #16
  400dc6:	d005      	beq.n	400dd4 <SystemCoreClockUpdate+0x78>
  400dc8:	2b20      	cmp	r3, #32
  400dca:	d1d0      	bne.n	400d6e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400dcc:	4a22      	ldr	r2, [pc, #136]	; (400e58 <SystemCoreClockUpdate+0xfc>)
  400dce:	4b20      	ldr	r3, [pc, #128]	; (400e50 <SystemCoreClockUpdate+0xf4>)
  400dd0:	601a      	str	r2, [r3, #0]
          break;
  400dd2:	e7cc      	b.n	400d6e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400dd4:	4a22      	ldr	r2, [pc, #136]	; (400e60 <SystemCoreClockUpdate+0x104>)
  400dd6:	4b1e      	ldr	r3, [pc, #120]	; (400e50 <SystemCoreClockUpdate+0xf4>)
  400dd8:	601a      	str	r2, [r3, #0]
          break;
  400dda:	e7c8      	b.n	400d6e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400ddc:	4b1b      	ldr	r3, [pc, #108]	; (400e4c <SystemCoreClockUpdate+0xf0>)
  400dde:	6a1b      	ldr	r3, [r3, #32]
  400de0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400de4:	d016      	beq.n	400e14 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400de6:	4a1c      	ldr	r2, [pc, #112]	; (400e58 <SystemCoreClockUpdate+0xfc>)
  400de8:	4b19      	ldr	r3, [pc, #100]	; (400e50 <SystemCoreClockUpdate+0xf4>)
  400dea:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400dec:	4b17      	ldr	r3, [pc, #92]	; (400e4c <SystemCoreClockUpdate+0xf0>)
  400dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400df0:	f003 0303 	and.w	r3, r3, #3
  400df4:	2b02      	cmp	r3, #2
  400df6:	d1ba      	bne.n	400d6e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400df8:	4a14      	ldr	r2, [pc, #80]	; (400e4c <SystemCoreClockUpdate+0xf0>)
  400dfa:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400dfc:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400dfe:	4814      	ldr	r0, [pc, #80]	; (400e50 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400e00:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400e04:	6803      	ldr	r3, [r0, #0]
  400e06:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400e0a:	b2d2      	uxtb	r2, r2
  400e0c:	fbb3 f3f2 	udiv	r3, r3, r2
  400e10:	6003      	str	r3, [r0, #0]
  400e12:	e7ac      	b.n	400d6e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400e14:	4a11      	ldr	r2, [pc, #68]	; (400e5c <SystemCoreClockUpdate+0x100>)
  400e16:	4b0e      	ldr	r3, [pc, #56]	; (400e50 <SystemCoreClockUpdate+0xf4>)
  400e18:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400e1a:	4b0c      	ldr	r3, [pc, #48]	; (400e4c <SystemCoreClockUpdate+0xf0>)
  400e1c:	6a1b      	ldr	r3, [r3, #32]
  400e1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400e22:	2b10      	cmp	r3, #16
  400e24:	d005      	beq.n	400e32 <SystemCoreClockUpdate+0xd6>
  400e26:	2b20      	cmp	r3, #32
  400e28:	d1e0      	bne.n	400dec <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400e2a:	4a0b      	ldr	r2, [pc, #44]	; (400e58 <SystemCoreClockUpdate+0xfc>)
  400e2c:	4b08      	ldr	r3, [pc, #32]	; (400e50 <SystemCoreClockUpdate+0xf4>)
  400e2e:	601a      	str	r2, [r3, #0]
          break;
  400e30:	e7dc      	b.n	400dec <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400e32:	4a0b      	ldr	r2, [pc, #44]	; (400e60 <SystemCoreClockUpdate+0x104>)
  400e34:	4b06      	ldr	r3, [pc, #24]	; (400e50 <SystemCoreClockUpdate+0xf4>)
  400e36:	601a      	str	r2, [r3, #0]
          break;
  400e38:	e7d8      	b.n	400dec <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400e3a:	4a05      	ldr	r2, [pc, #20]	; (400e50 <SystemCoreClockUpdate+0xf4>)
  400e3c:	6813      	ldr	r3, [r2, #0]
  400e3e:	4909      	ldr	r1, [pc, #36]	; (400e64 <SystemCoreClockUpdate+0x108>)
  400e40:	fba1 1303 	umull	r1, r3, r1, r3
  400e44:	085b      	lsrs	r3, r3, #1
  400e46:	6013      	str	r3, [r2, #0]
  400e48:	4770      	bx	lr
  400e4a:	bf00      	nop
  400e4c:	400e0600 	.word	0x400e0600
  400e50:	20400004 	.word	0x20400004
  400e54:	400e1810 	.word	0x400e1810
  400e58:	00b71b00 	.word	0x00b71b00
  400e5c:	003d0900 	.word	0x003d0900
  400e60:	007a1200 	.word	0x007a1200
  400e64:	aaaaaaab 	.word	0xaaaaaaab

00400e68 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400e68:	4b16      	ldr	r3, [pc, #88]	; (400ec4 <system_init_flash+0x5c>)
  400e6a:	4298      	cmp	r0, r3
  400e6c:	d913      	bls.n	400e96 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400e6e:	4b16      	ldr	r3, [pc, #88]	; (400ec8 <system_init_flash+0x60>)
  400e70:	4298      	cmp	r0, r3
  400e72:	d915      	bls.n	400ea0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400e74:	4b15      	ldr	r3, [pc, #84]	; (400ecc <system_init_flash+0x64>)
  400e76:	4298      	cmp	r0, r3
  400e78:	d916      	bls.n	400ea8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400e7a:	4b15      	ldr	r3, [pc, #84]	; (400ed0 <system_init_flash+0x68>)
  400e7c:	4298      	cmp	r0, r3
  400e7e:	d917      	bls.n	400eb0 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400e80:	4b14      	ldr	r3, [pc, #80]	; (400ed4 <system_init_flash+0x6c>)
  400e82:	4298      	cmp	r0, r3
  400e84:	d918      	bls.n	400eb8 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400e86:	4b14      	ldr	r3, [pc, #80]	; (400ed8 <system_init_flash+0x70>)
  400e88:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400e8a:	bf94      	ite	ls
  400e8c:	4a13      	ldrls	r2, [pc, #76]	; (400edc <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400e8e:	4a14      	ldrhi	r2, [pc, #80]	; (400ee0 <system_init_flash+0x78>)
  400e90:	4b14      	ldr	r3, [pc, #80]	; (400ee4 <system_init_flash+0x7c>)
  400e92:	601a      	str	r2, [r3, #0]
  400e94:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400e96:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400e9a:	4b12      	ldr	r3, [pc, #72]	; (400ee4 <system_init_flash+0x7c>)
  400e9c:	601a      	str	r2, [r3, #0]
  400e9e:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400ea0:	4a11      	ldr	r2, [pc, #68]	; (400ee8 <system_init_flash+0x80>)
  400ea2:	4b10      	ldr	r3, [pc, #64]	; (400ee4 <system_init_flash+0x7c>)
  400ea4:	601a      	str	r2, [r3, #0]
  400ea6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400ea8:	4a10      	ldr	r2, [pc, #64]	; (400eec <system_init_flash+0x84>)
  400eaa:	4b0e      	ldr	r3, [pc, #56]	; (400ee4 <system_init_flash+0x7c>)
  400eac:	601a      	str	r2, [r3, #0]
  400eae:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400eb0:	4a0f      	ldr	r2, [pc, #60]	; (400ef0 <system_init_flash+0x88>)
  400eb2:	4b0c      	ldr	r3, [pc, #48]	; (400ee4 <system_init_flash+0x7c>)
  400eb4:	601a      	str	r2, [r3, #0]
  400eb6:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400eb8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400ebc:	4b09      	ldr	r3, [pc, #36]	; (400ee4 <system_init_flash+0x7c>)
  400ebe:	601a      	str	r2, [r3, #0]
  400ec0:	4770      	bx	lr
  400ec2:	bf00      	nop
  400ec4:	015ef3bf 	.word	0x015ef3bf
  400ec8:	02bde77f 	.word	0x02bde77f
  400ecc:	041cdb3f 	.word	0x041cdb3f
  400ed0:	057bceff 	.word	0x057bceff
  400ed4:	06dac2bf 	.word	0x06dac2bf
  400ed8:	0839b67f 	.word	0x0839b67f
  400edc:	04000500 	.word	0x04000500
  400ee0:	04000600 	.word	0x04000600
  400ee4:	400e0c00 	.word	0x400e0c00
  400ee8:	04000100 	.word	0x04000100
  400eec:	04000200 	.word	0x04000200
  400ef0:	04000300 	.word	0x04000300

00400ef4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400ef4:	4b0a      	ldr	r3, [pc, #40]	; (400f20 <_sbrk+0x2c>)
  400ef6:	681b      	ldr	r3, [r3, #0]
  400ef8:	b153      	cbz	r3, 400f10 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400efa:	4b09      	ldr	r3, [pc, #36]	; (400f20 <_sbrk+0x2c>)
  400efc:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400efe:	181a      	adds	r2, r3, r0
  400f00:	4908      	ldr	r1, [pc, #32]	; (400f24 <_sbrk+0x30>)
  400f02:	4291      	cmp	r1, r2
  400f04:	db08      	blt.n	400f18 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400f06:	4610      	mov	r0, r2
  400f08:	4a05      	ldr	r2, [pc, #20]	; (400f20 <_sbrk+0x2c>)
  400f0a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400f0c:	4618      	mov	r0, r3
  400f0e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400f10:	4a05      	ldr	r2, [pc, #20]	; (400f28 <_sbrk+0x34>)
  400f12:	4b03      	ldr	r3, [pc, #12]	; (400f20 <_sbrk+0x2c>)
  400f14:	601a      	str	r2, [r3, #0]
  400f16:	e7f0      	b.n	400efa <_sbrk+0x6>
		return (caddr_t) -1;	
  400f18:	f04f 30ff 	mov.w	r0, #4294967295
}
  400f1c:	4770      	bx	lr
  400f1e:	bf00      	nop
  400f20:	20400a54 	.word	0x20400a54
  400f24:	2045fffc 	.word	0x2045fffc
  400f28:	20402f60 	.word	0x20402f60

00400f2c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400f2c:	f04f 30ff 	mov.w	r0, #4294967295
  400f30:	4770      	bx	lr

00400f32 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400f32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400f36:	604b      	str	r3, [r1, #4]

	return 0;
}
  400f38:	2000      	movs	r0, #0
  400f3a:	4770      	bx	lr

00400f3c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400f3c:	2001      	movs	r0, #1
  400f3e:	4770      	bx	lr

00400f40 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400f40:	2000      	movs	r0, #0
  400f42:	4770      	bx	lr

00400f44 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f44:	f100 0308 	add.w	r3, r0, #8
  400f48:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400f4a:	f04f 32ff 	mov.w	r2, #4294967295
  400f4e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f50:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f52:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400f54:	2300      	movs	r3, #0
  400f56:	6003      	str	r3, [r0, #0]
  400f58:	4770      	bx	lr

00400f5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400f5a:	2300      	movs	r3, #0
  400f5c:	6103      	str	r3, [r0, #16]
  400f5e:	4770      	bx	lr

00400f60 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400f60:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400f62:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400f64:	689a      	ldr	r2, [r3, #8]
  400f66:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400f68:	689a      	ldr	r2, [r3, #8]
  400f6a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400f6c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400f6e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400f70:	6803      	ldr	r3, [r0, #0]
  400f72:	3301      	adds	r3, #1
  400f74:	6003      	str	r3, [r0, #0]
  400f76:	4770      	bx	lr

00400f78 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400f78:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400f7a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400f7c:	f1b5 3fff 	cmp.w	r5, #4294967295
  400f80:	d002      	beq.n	400f88 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f82:	f100 0208 	add.w	r2, r0, #8
  400f86:	e002      	b.n	400f8e <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400f88:	6902      	ldr	r2, [r0, #16]
  400f8a:	e004      	b.n	400f96 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400f8c:	461a      	mov	r2, r3
  400f8e:	6853      	ldr	r3, [r2, #4]
  400f90:	681c      	ldr	r4, [r3, #0]
  400f92:	42a5      	cmp	r5, r4
  400f94:	d2fa      	bcs.n	400f8c <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400f96:	6853      	ldr	r3, [r2, #4]
  400f98:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400f9a:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400f9c:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400f9e:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400fa0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400fa2:	6803      	ldr	r3, [r0, #0]
  400fa4:	3301      	adds	r3, #1
  400fa6:	6003      	str	r3, [r0, #0]
}
  400fa8:	bc30      	pop	{r4, r5}
  400faa:	4770      	bx	lr

00400fac <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400fac:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400fae:	6842      	ldr	r2, [r0, #4]
  400fb0:	6881      	ldr	r1, [r0, #8]
  400fb2:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400fb4:	6882      	ldr	r2, [r0, #8]
  400fb6:	6841      	ldr	r1, [r0, #4]
  400fb8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400fba:	685a      	ldr	r2, [r3, #4]
  400fbc:	4290      	cmp	r0, r2
  400fbe:	d006      	beq.n	400fce <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400fc0:	2200      	movs	r2, #0
  400fc2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400fc4:	681a      	ldr	r2, [r3, #0]
  400fc6:	3a01      	subs	r2, #1
  400fc8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
  400fca:	6818      	ldr	r0, [r3, #0]
}
  400fcc:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400fce:	6882      	ldr	r2, [r0, #8]
  400fd0:	605a      	str	r2, [r3, #4]
  400fd2:	e7f5      	b.n	400fc0 <uxListRemove+0x14>

00400fd4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
  400fd4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
  400fd6:	2300      	movs	r3, #0
  400fd8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400fda:	4b0f      	ldr	r3, [pc, #60]	; (401018 <prvTaskExitError+0x44>)
  400fdc:	681b      	ldr	r3, [r3, #0]
  400fde:	f1b3 3fff 	cmp.w	r3, #4294967295
  400fe2:	d00a      	beq.n	400ffa <prvTaskExitError+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400fe4:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fe8:	b672      	cpsid	i
  400fea:	f383 8811 	msr	BASEPRI, r3
  400fee:	f3bf 8f6f 	isb	sy
  400ff2:	f3bf 8f4f 	dsb	sy
  400ff6:	b662      	cpsie	i
  400ff8:	e7fe      	b.n	400ff8 <prvTaskExitError+0x24>
  400ffa:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ffe:	b672      	cpsid	i
  401000:	f383 8811 	msr	BASEPRI, r3
  401004:	f3bf 8f6f 	isb	sy
  401008:	f3bf 8f4f 	dsb	sy
  40100c:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
  40100e:	9b01      	ldr	r3, [sp, #4]
  401010:	2b00      	cmp	r3, #0
  401012:	d0fc      	beq.n	40100e <prvTaskExitError+0x3a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
  401014:	b002      	add	sp, #8
  401016:	4770      	bx	lr
  401018:	20400008 	.word	0x20400008

0040101c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
  40101c:	4808      	ldr	r0, [pc, #32]	; (401040 <prvPortStartFirstTask+0x24>)
  40101e:	6800      	ldr	r0, [r0, #0]
  401020:	6800      	ldr	r0, [r0, #0]
  401022:	f380 8808 	msr	MSP, r0
  401026:	f04f 0000 	mov.w	r0, #0
  40102a:	f380 8814 	msr	CONTROL, r0
  40102e:	b662      	cpsie	i
  401030:	b661      	cpsie	f
  401032:	f3bf 8f4f 	dsb	sy
  401036:	f3bf 8f6f 	isb	sy
  40103a:	df00      	svc	0
  40103c:	bf00      	nop
  40103e:	0000      	.short	0x0000
  401040:	e000ed08 	.word	0xe000ed08

00401044 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401044:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401054 <vPortEnableVFP+0x10>
  401048:	6801      	ldr	r1, [r0, #0]
  40104a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40104e:	6001      	str	r1, [r0, #0]
  401050:	4770      	bx	lr
  401052:	0000      	.short	0x0000
  401054:	e000ed88 	.word	0xe000ed88

00401058 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401058:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  40105c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
  401060:	f021 0101 	bic.w	r1, r1, #1
  401064:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401068:	4b05      	ldr	r3, [pc, #20]	; (401080 <pxPortInitialiseStack+0x28>)
  40106a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  40106e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
  401072:	f06f 0302 	mvn.w	r3, #2
  401076:	f840 3c24 	str.w	r3, [r0, #-36]
}
  40107a:	3844      	subs	r0, #68	; 0x44
  40107c:	4770      	bx	lr
  40107e:	bf00      	nop
  401080:	00400fd5 	.word	0x00400fd5
	...

00401090 <SVC_Handler>:
	__asm volatile (
  401090:	4b07      	ldr	r3, [pc, #28]	; (4010b0 <pxCurrentTCBConst2>)
  401092:	6819      	ldr	r1, [r3, #0]
  401094:	6808      	ldr	r0, [r1, #0]
  401096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40109a:	f380 8809 	msr	PSP, r0
  40109e:	f3bf 8f6f 	isb	sy
  4010a2:	f04f 0000 	mov.w	r0, #0
  4010a6:	f380 8811 	msr	BASEPRI, r0
  4010aa:	4770      	bx	lr
  4010ac:	f3af 8000 	nop.w

004010b0 <pxCurrentTCBConst2>:
  4010b0:	20400a60 	.word	0x20400a60

004010b4 <vPortEnterCritical>:
  4010b4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010b8:	b672      	cpsid	i
  4010ba:	f383 8811 	msr	BASEPRI, r3
  4010be:	f3bf 8f6f 	isb	sy
  4010c2:	f3bf 8f4f 	dsb	sy
  4010c6:	b662      	cpsie	i
	uxCriticalNesting++;
  4010c8:	4a0b      	ldr	r2, [pc, #44]	; (4010f8 <vPortEnterCritical+0x44>)
  4010ca:	6813      	ldr	r3, [r2, #0]
  4010cc:	3301      	adds	r3, #1
  4010ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  4010d0:	2b01      	cmp	r3, #1
  4010d2:	d10f      	bne.n	4010f4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  4010d4:	4b09      	ldr	r3, [pc, #36]	; (4010fc <vPortEnterCritical+0x48>)
  4010d6:	681b      	ldr	r3, [r3, #0]
  4010d8:	f013 0fff 	tst.w	r3, #255	; 0xff
  4010dc:	d00a      	beq.n	4010f4 <vPortEnterCritical+0x40>
  4010de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4010e2:	b672      	cpsid	i
  4010e4:	f383 8811 	msr	BASEPRI, r3
  4010e8:	f3bf 8f6f 	isb	sy
  4010ec:	f3bf 8f4f 	dsb	sy
  4010f0:	b662      	cpsie	i
  4010f2:	e7fe      	b.n	4010f2 <vPortEnterCritical+0x3e>
  4010f4:	4770      	bx	lr
  4010f6:	bf00      	nop
  4010f8:	20400008 	.word	0x20400008
  4010fc:	e000ed04 	.word	0xe000ed04

00401100 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401100:	4b0a      	ldr	r3, [pc, #40]	; (40112c <vPortExitCritical+0x2c>)
  401102:	681b      	ldr	r3, [r3, #0]
  401104:	b953      	cbnz	r3, 40111c <vPortExitCritical+0x1c>
  401106:	f04f 0380 	mov.w	r3, #128	; 0x80
  40110a:	b672      	cpsid	i
  40110c:	f383 8811 	msr	BASEPRI, r3
  401110:	f3bf 8f6f 	isb	sy
  401114:	f3bf 8f4f 	dsb	sy
  401118:	b662      	cpsie	i
  40111a:	e7fe      	b.n	40111a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  40111c:	3b01      	subs	r3, #1
  40111e:	4a03      	ldr	r2, [pc, #12]	; (40112c <vPortExitCritical+0x2c>)
  401120:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401122:	b90b      	cbnz	r3, 401128 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401124:	f383 8811 	msr	BASEPRI, r3
  401128:	4770      	bx	lr
  40112a:	bf00      	nop
  40112c:	20400008 	.word	0x20400008

00401130 <PendSV_Handler>:
	__asm volatile
  401130:	f3ef 8009 	mrs	r0, PSP
  401134:	f3bf 8f6f 	isb	sy
  401138:	4b15      	ldr	r3, [pc, #84]	; (401190 <pxCurrentTCBConst>)
  40113a:	681a      	ldr	r2, [r3, #0]
  40113c:	f01e 0f10 	tst.w	lr, #16
  401140:	bf08      	it	eq
  401142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40114a:	6010      	str	r0, [r2, #0]
  40114c:	e92d 0009 	stmdb	sp!, {r0, r3}
  401150:	f04f 0080 	mov.w	r0, #128	; 0x80
  401154:	b672      	cpsid	i
  401156:	f380 8811 	msr	BASEPRI, r0
  40115a:	f3bf 8f4f 	dsb	sy
  40115e:	f3bf 8f6f 	isb	sy
  401162:	b662      	cpsie	i
  401164:	f001 fa36 	bl	4025d4 <vTaskSwitchContext>
  401168:	f04f 0000 	mov.w	r0, #0
  40116c:	f380 8811 	msr	BASEPRI, r0
  401170:	bc09      	pop	{r0, r3}
  401172:	6819      	ldr	r1, [r3, #0]
  401174:	6808      	ldr	r0, [r1, #0]
  401176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40117a:	f01e 0f10 	tst.w	lr, #16
  40117e:	bf08      	it	eq
  401180:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401184:	f380 8809 	msr	PSP, r0
  401188:	f3bf 8f6f 	isb	sy
  40118c:	4770      	bx	lr
  40118e:	bf00      	nop

00401190 <pxCurrentTCBConst>:
  401190:	20400a60 	.word	0x20400a60

00401194 <SysTick_Handler>:
{
  401194:	b508      	push	{r3, lr}
	__asm volatile
  401196:	f04f 0380 	mov.w	r3, #128	; 0x80
  40119a:	b672      	cpsid	i
  40119c:	f383 8811 	msr	BASEPRI, r3
  4011a0:	f3bf 8f6f 	isb	sy
  4011a4:	f3bf 8f4f 	dsb	sy
  4011a8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  4011aa:	4b05      	ldr	r3, [pc, #20]	; (4011c0 <SysTick_Handler+0x2c>)
  4011ac:	4798      	blx	r3
  4011ae:	b118      	cbz	r0, 4011b8 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  4011b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4011b4:	4b03      	ldr	r3, [pc, #12]	; (4011c4 <SysTick_Handler+0x30>)
  4011b6:	601a      	str	r2, [r3, #0]
	__asm volatile
  4011b8:	2300      	movs	r3, #0
  4011ba:	f383 8811 	msr	BASEPRI, r3
  4011be:	bd08      	pop	{r3, pc}
  4011c0:	00402319 	.word	0x00402319
  4011c4:	e000ed04 	.word	0xe000ed04

004011c8 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
  4011c8:	4b05      	ldr	r3, [pc, #20]	; (4011e0 <vPortSetupTimerInterrupt+0x18>)
  4011ca:	2200      	movs	r2, #0
  4011cc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
  4011ce:	4905      	ldr	r1, [pc, #20]	; (4011e4 <vPortSetupTimerInterrupt+0x1c>)
  4011d0:	600a      	str	r2, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  4011d2:	4905      	ldr	r1, [pc, #20]	; (4011e8 <vPortSetupTimerInterrupt+0x20>)
  4011d4:	4a05      	ldr	r2, [pc, #20]	; (4011ec <vPortSetupTimerInterrupt+0x24>)
  4011d6:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  4011d8:	2207      	movs	r2, #7
  4011da:	601a      	str	r2, [r3, #0]
  4011dc:	4770      	bx	lr
  4011de:	bf00      	nop
  4011e0:	e000e010 	.word	0xe000e010
  4011e4:	e000e018 	.word	0xe000e018
  4011e8:	000927bf 	.word	0x000927bf
  4011ec:	e000e014 	.word	0xe000e014

004011f0 <xPortStartScheduler>:
{
  4011f0:	b510      	push	{r4, lr}
  4011f2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4011f4:	4b2e      	ldr	r3, [pc, #184]	; (4012b0 <xPortStartScheduler+0xc0>)
  4011f6:	781a      	ldrb	r2, [r3, #0]
  4011f8:	b2d2      	uxtb	r2, r2
  4011fa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4011fc:	22ff      	movs	r2, #255	; 0xff
  4011fe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  401200:	781b      	ldrb	r3, [r3, #0]
  401202:	b2db      	uxtb	r3, r3
  401204:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  401208:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40120c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401210:	4a28      	ldr	r2, [pc, #160]	; (4012b4 <xPortStartScheduler+0xc4>)
  401212:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  401214:	2207      	movs	r2, #7
  401216:	4b28      	ldr	r3, [pc, #160]	; (4012b8 <xPortStartScheduler+0xc8>)
  401218:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  40121a:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40121e:	f013 0f80 	tst.w	r3, #128	; 0x80
  401222:	d012      	beq.n	40124a <xPortStartScheduler+0x5a>
  401224:	2306      	movs	r3, #6
  401226:	e000      	b.n	40122a <xPortStartScheduler+0x3a>
  401228:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  40122a:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40122e:	0052      	lsls	r2, r2, #1
  401230:	b2d2      	uxtb	r2, r2
  401232:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  401236:	f89d 2003 	ldrb.w	r2, [sp, #3]
  40123a:	1e59      	subs	r1, r3, #1
  40123c:	f012 0f80 	tst.w	r2, #128	; 0x80
  401240:	d1f2      	bne.n	401228 <xPortStartScheduler+0x38>
  401242:	4a1d      	ldr	r2, [pc, #116]	; (4012b8 <xPortStartScheduler+0xc8>)
  401244:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
  401246:	2b04      	cmp	r3, #4
  401248:	d00a      	beq.n	401260 <xPortStartScheduler+0x70>
	__asm volatile
  40124a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40124e:	b672      	cpsid	i
  401250:	f383 8811 	msr	BASEPRI, r3
  401254:	f3bf 8f6f 	isb	sy
  401258:	f3bf 8f4f 	dsb	sy
  40125c:	b662      	cpsie	i
  40125e:	e7fe      	b.n	40125e <xPortStartScheduler+0x6e>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  401260:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  401262:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401266:	4a14      	ldr	r2, [pc, #80]	; (4012b8 <xPortStartScheduler+0xc8>)
  401268:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40126a:	9b01      	ldr	r3, [sp, #4]
  40126c:	b2db      	uxtb	r3, r3
  40126e:	4a10      	ldr	r2, [pc, #64]	; (4012b0 <xPortStartScheduler+0xc0>)
  401270:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  401272:	4b12      	ldr	r3, [pc, #72]	; (4012bc <xPortStartScheduler+0xcc>)
  401274:	681a      	ldr	r2, [r3, #0]
  401276:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  40127a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  40127c:	681a      	ldr	r2, [r3, #0]
  40127e:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  401282:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  401284:	4b0e      	ldr	r3, [pc, #56]	; (4012c0 <xPortStartScheduler+0xd0>)
  401286:	4798      	blx	r3
	uxCriticalNesting = 0;
  401288:	2400      	movs	r4, #0
  40128a:	4b0e      	ldr	r3, [pc, #56]	; (4012c4 <xPortStartScheduler+0xd4>)
  40128c:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
  40128e:	4b0e      	ldr	r3, [pc, #56]	; (4012c8 <xPortStartScheduler+0xd8>)
  401290:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  401292:	4a0e      	ldr	r2, [pc, #56]	; (4012cc <xPortStartScheduler+0xdc>)
  401294:	6813      	ldr	r3, [r2, #0]
  401296:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  40129a:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  40129c:	4b0c      	ldr	r3, [pc, #48]	; (4012d0 <xPortStartScheduler+0xe0>)
  40129e:	4798      	blx	r3
	vTaskSwitchContext();
  4012a0:	4b0c      	ldr	r3, [pc, #48]	; (4012d4 <xPortStartScheduler+0xe4>)
  4012a2:	4798      	blx	r3
	prvTaskExitError();
  4012a4:	4b0c      	ldr	r3, [pc, #48]	; (4012d8 <xPortStartScheduler+0xe8>)
  4012a6:	4798      	blx	r3
}
  4012a8:	4620      	mov	r0, r4
  4012aa:	b002      	add	sp, #8
  4012ac:	bd10      	pop	{r4, pc}
  4012ae:	bf00      	nop
  4012b0:	e000e400 	.word	0xe000e400
  4012b4:	20400a58 	.word	0x20400a58
  4012b8:	20400a5c 	.word	0x20400a5c
  4012bc:	e000ed20 	.word	0xe000ed20
  4012c0:	004011c9 	.word	0x004011c9
  4012c4:	20400008 	.word	0x20400008
  4012c8:	00401045 	.word	0x00401045
  4012cc:	e000ef34 	.word	0xe000ef34
  4012d0:	0040101d 	.word	0x0040101d
  4012d4:	004025d5 	.word	0x004025d5
  4012d8:	00400fd5 	.word	0x00400fd5

004012dc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
  4012dc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  4012e0:	2b0f      	cmp	r3, #15
  4012e2:	d911      	bls.n	401308 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  4012e4:	4a12      	ldr	r2, [pc, #72]	; (401330 <vPortValidateInterruptPriority+0x54>)
  4012e6:	5c9b      	ldrb	r3, [r3, r2]
  4012e8:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  4012ea:	4a12      	ldr	r2, [pc, #72]	; (401334 <vPortValidateInterruptPriority+0x58>)
  4012ec:	7812      	ldrb	r2, [r2, #0]
  4012ee:	429a      	cmp	r2, r3
  4012f0:	d90a      	bls.n	401308 <vPortValidateInterruptPriority+0x2c>
  4012f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012f6:	b672      	cpsid	i
  4012f8:	f383 8811 	msr	BASEPRI, r3
  4012fc:	f3bf 8f6f 	isb	sy
  401300:	f3bf 8f4f 	dsb	sy
  401304:	b662      	cpsie	i
  401306:	e7fe      	b.n	401306 <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401308:	4b0b      	ldr	r3, [pc, #44]	; (401338 <vPortValidateInterruptPriority+0x5c>)
  40130a:	681b      	ldr	r3, [r3, #0]
  40130c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401310:	4a0a      	ldr	r2, [pc, #40]	; (40133c <vPortValidateInterruptPriority+0x60>)
  401312:	6812      	ldr	r2, [r2, #0]
  401314:	4293      	cmp	r3, r2
  401316:	d90a      	bls.n	40132e <vPortValidateInterruptPriority+0x52>
  401318:	f04f 0380 	mov.w	r3, #128	; 0x80
  40131c:	b672      	cpsid	i
  40131e:	f383 8811 	msr	BASEPRI, r3
  401322:	f3bf 8f6f 	isb	sy
  401326:	f3bf 8f4f 	dsb	sy
  40132a:	b662      	cpsie	i
  40132c:	e7fe      	b.n	40132c <vPortValidateInterruptPriority+0x50>
  40132e:	4770      	bx	lr
  401330:	e000e3f0 	.word	0xe000e3f0
  401334:	20400a58 	.word	0x20400a58
  401338:	e000ed0c 	.word	0xe000ed0c
  40133c:	20400a5c 	.word	0x20400a5c

00401340 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  401340:	b510      	push	{r4, lr}
  401342:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  401344:	4b06      	ldr	r3, [pc, #24]	; (401360 <pvPortMalloc+0x20>)
  401346:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  401348:	4620      	mov	r0, r4
  40134a:	4b06      	ldr	r3, [pc, #24]	; (401364 <pvPortMalloc+0x24>)
  40134c:	4798      	blx	r3
  40134e:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  401350:	4b05      	ldr	r3, [pc, #20]	; (401368 <pvPortMalloc+0x28>)
  401352:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  401354:	b10c      	cbz	r4, 40135a <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  401356:	4620      	mov	r0, r4
  401358:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  40135a:	4b04      	ldr	r3, [pc, #16]	; (40136c <pvPortMalloc+0x2c>)
  40135c:	4798      	blx	r3
	return pvReturn;
  40135e:	e7fa      	b.n	401356 <pvPortMalloc+0x16>
  401360:	004022f1 	.word	0x004022f1
  401364:	00403bc1 	.word	0x00403bc1
  401368:	00402461 	.word	0x00402461
  40136c:	004038cb 	.word	0x004038cb

00401370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  401370:	b148      	cbz	r0, 401386 <vPortFree+0x16>
{
  401372:	b510      	push	{r4, lr}
  401374:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  401376:	4b04      	ldr	r3, [pc, #16]	; (401388 <vPortFree+0x18>)
  401378:	4798      	blx	r3
		{
			free( pv );
  40137a:	4620      	mov	r0, r4
  40137c:	4b03      	ldr	r3, [pc, #12]	; (40138c <vPortFree+0x1c>)
  40137e:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401380:	4b03      	ldr	r3, [pc, #12]	; (401390 <vPortFree+0x20>)
  401382:	4798      	blx	r3
  401384:	bd10      	pop	{r4, pc}
  401386:	4770      	bx	lr
  401388:	004022f1 	.word	0x004022f1
  40138c:	00403bd1 	.word	0x00403bd1
  401390:	00402461 	.word	0x00402461

00401394 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
  401394:	b510      	push	{r4, lr}
  401396:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
  401398:	4b04      	ldr	r3, [pc, #16]	; (4013ac <prvIsQueueEmpty+0x18>)
  40139a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  40139c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
  40139e:	4b04      	ldr	r3, [pc, #16]	; (4013b0 <prvIsQueueEmpty+0x1c>)
  4013a0:	4798      	blx	r3

	return xReturn;
}
  4013a2:	fab4 f084 	clz	r0, r4
  4013a6:	0940      	lsrs	r0, r0, #5
  4013a8:	bd10      	pop	{r4, pc}
  4013aa:	bf00      	nop
  4013ac:	004010b5 	.word	0x004010b5
  4013b0:	00401101 	.word	0x00401101

004013b4 <prvCopyDataToQueue>:
{
  4013b4:	b570      	push	{r4, r5, r6, lr}
  4013b6:	4604      	mov	r4, r0
  4013b8:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  4013ba:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4013bc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4013be:	b952      	cbnz	r2, 4013d6 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4013c0:	6803      	ldr	r3, [r0, #0]
  4013c2:	2b00      	cmp	r3, #0
  4013c4:	d12a      	bne.n	40141c <prvCopyDataToQueue+0x68>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  4013c6:	6840      	ldr	r0, [r0, #4]
  4013c8:	4b17      	ldr	r3, [pc, #92]	; (401428 <prvCopyDataToQueue+0x74>)
  4013ca:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  4013cc:	2300      	movs	r3, #0
  4013ce:	6063      	str	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  4013d0:	3501      	adds	r5, #1
  4013d2:	63a5      	str	r5, [r4, #56]	; 0x38
}
  4013d4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
  4013d6:	b96e      	cbnz	r6, 4013f4 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  4013d8:	6880      	ldr	r0, [r0, #8]
  4013da:	4b14      	ldr	r3, [pc, #80]	; (40142c <prvCopyDataToQueue+0x78>)
  4013dc:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  4013de:	68a3      	ldr	r3, [r4, #8]
  4013e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
  4013e2:	4413      	add	r3, r2
  4013e4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  4013e6:	6862      	ldr	r2, [r4, #4]
  4013e8:	4293      	cmp	r3, r2
  4013ea:	d319      	bcc.n	401420 <prvCopyDataToQueue+0x6c>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  4013ec:	6823      	ldr	r3, [r4, #0]
  4013ee:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  4013f0:	2000      	movs	r0, #0
  4013f2:	e7ed      	b.n	4013d0 <prvCopyDataToQueue+0x1c>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4013f4:	68c0      	ldr	r0, [r0, #12]
  4013f6:	4b0d      	ldr	r3, [pc, #52]	; (40142c <prvCopyDataToQueue+0x78>)
  4013f8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  4013fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
  4013fc:	425b      	negs	r3, r3
  4013fe:	68e2      	ldr	r2, [r4, #12]
  401400:	441a      	add	r2, r3
  401402:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  401404:	6821      	ldr	r1, [r4, #0]
  401406:	428a      	cmp	r2, r1
  401408:	d202      	bcs.n	401410 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  40140a:	6862      	ldr	r2, [r4, #4]
  40140c:	4413      	add	r3, r2
  40140e:	60e3      	str	r3, [r4, #12]
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  401410:	b145      	cbz	r5, 401424 <prvCopyDataToQueue+0x70>
  401412:	2e02      	cmp	r6, #2
  401414:	d106      	bne.n	401424 <prvCopyDataToQueue+0x70>
				--uxMessagesWaiting;
  401416:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
  401418:	2000      	movs	r0, #0
  40141a:	e7d9      	b.n	4013d0 <prvCopyDataToQueue+0x1c>
  40141c:	2000      	movs	r0, #0
  40141e:	e7d7      	b.n	4013d0 <prvCopyDataToQueue+0x1c>
  401420:	2000      	movs	r0, #0
  401422:	e7d5      	b.n	4013d0 <prvCopyDataToQueue+0x1c>
  401424:	2000      	movs	r0, #0
  401426:	e7d3      	b.n	4013d0 <prvCopyDataToQueue+0x1c>
  401428:	00402b1d 	.word	0x00402b1d
  40142c:	00404141 	.word	0x00404141

00401430 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  401430:	b570      	push	{r4, r5, r6, lr}
  401432:	b082      	sub	sp, #8
  401434:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  401436:	6c84      	ldr	r4, [r0, #72]	; 0x48
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  401438:	b174      	cbz	r4, 401458 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  40143a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40143c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40143e:	429a      	cmp	r2, r3
  401440:	d315      	bcc.n	40146e <prvNotifyQueueSetContainer+0x3e>
  401442:	f04f 0380 	mov.w	r3, #128	; 0x80
  401446:	b672      	cpsid	i
  401448:	f383 8811 	msr	BASEPRI, r3
  40144c:	f3bf 8f6f 	isb	sy
  401450:	f3bf 8f4f 	dsb	sy
  401454:	b662      	cpsie	i
  401456:	e7fe      	b.n	401456 <prvNotifyQueueSetContainer+0x26>
  401458:	f04f 0380 	mov.w	r3, #128	; 0x80
  40145c:	b672      	cpsid	i
  40145e:	f383 8811 	msr	BASEPRI, r3
  401462:	f3bf 8f6f 	isb	sy
  401466:	f3bf 8f4f 	dsb	sy
  40146a:	b662      	cpsie	i
  40146c:	e7fe      	b.n	40146c <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  40146e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401470:	4293      	cmp	r3, r2
  401472:	d803      	bhi.n	40147c <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  401474:	2600      	movs	r6, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  401476:	4630      	mov	r0, r6
  401478:	b002      	add	sp, #8
  40147a:	bd70      	pop	{r4, r5, r6, pc}
  40147c:	460a      	mov	r2, r1
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
  40147e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  401482:	b26d      	sxtb	r5, r5
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  401484:	a901      	add	r1, sp, #4
  401486:	4620      	mov	r0, r4
  401488:	4b0a      	ldr	r3, [pc, #40]	; (4014b4 <prvNotifyQueueSetContainer+0x84>)
  40148a:	4798      	blx	r3
  40148c:	4606      	mov	r6, r0
			if( cTxLock == queueUNLOCKED )
  40148e:	f1b5 3fff 	cmp.w	r5, #4294967295
  401492:	d10a      	bne.n	4014aa <prvNotifyQueueSetContainer+0x7a>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401494:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401496:	2b00      	cmp	r3, #0
  401498:	d0ed      	beq.n	401476 <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40149a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40149e:	4b06      	ldr	r3, [pc, #24]	; (4014b8 <prvNotifyQueueSetContainer+0x88>)
  4014a0:	4798      	blx	r3
  4014a2:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4014a4:	bf18      	it	ne
  4014a6:	2601      	movne	r6, #1
  4014a8:	e7e5      	b.n	401476 <prvNotifyQueueSetContainer+0x46>
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
  4014aa:	1c6b      	adds	r3, r5, #1
  4014ac:	b25b      	sxtb	r3, r3
  4014ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4014b2:	e7e0      	b.n	401476 <prvNotifyQueueSetContainer+0x46>
  4014b4:	004013b5 	.word	0x004013b5
  4014b8:	00402729 	.word	0x00402729

004014bc <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  4014bc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4014be:	b172      	cbz	r2, 4014de <prvCopyDataFromQueue+0x22>
{
  4014c0:	b510      	push	{r4, lr}
  4014c2:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  4014c4:	68c4      	ldr	r4, [r0, #12]
  4014c6:	4414      	add	r4, r2
  4014c8:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  4014ca:	6840      	ldr	r0, [r0, #4]
  4014cc:	4284      	cmp	r4, r0
  4014ce:	d301      	bcc.n	4014d4 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  4014d0:	6818      	ldr	r0, [r3, #0]
  4014d2:	60d8      	str	r0, [r3, #12]
  4014d4:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  4014d6:	68d9      	ldr	r1, [r3, #12]
  4014d8:	4b01      	ldr	r3, [pc, #4]	; (4014e0 <prvCopyDataFromQueue+0x24>)
  4014da:	4798      	blx	r3
  4014dc:	bd10      	pop	{r4, pc}
  4014de:	4770      	bx	lr
  4014e0:	00404141 	.word	0x00404141

004014e4 <prvUnlockQueue>:
{
  4014e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4014e8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
  4014ea:	4b23      	ldr	r3, [pc, #140]	; (401578 <prvUnlockQueue+0x94>)
  4014ec:	4798      	blx	r3
		int8_t cTxLock = pxQueue->cTxLock;
  4014ee:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
  4014f2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  4014f4:	2c00      	cmp	r4, #0
  4014f6:	dd19      	ble.n	40152c <prvUnlockQueue+0x48>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  4014f8:	4e20      	ldr	r6, [pc, #128]	; (40157c <prvUnlockQueue+0x98>)
						vTaskMissedYield();
  4014fa:	f8df 808c 	ldr.w	r8, [pc, #140]	; 401588 <prvUnlockQueue+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4014fe:	4f20      	ldr	r7, [pc, #128]	; (401580 <prvUnlockQueue+0x9c>)
  401500:	e008      	b.n	401514 <prvUnlockQueue+0x30>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401502:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  401504:	b193      	cbz	r3, 40152c <prvUnlockQueue+0x48>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401506:	f105 0024 	add.w	r0, r5, #36	; 0x24
  40150a:	47b8      	blx	r7
  40150c:	b960      	cbnz	r0, 401528 <prvUnlockQueue+0x44>
  40150e:	3c01      	subs	r4, #1
  401510:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
  401512:	b15c      	cbz	r4, 40152c <prvUnlockQueue+0x48>
				if( pxQueue->pxQueueSetContainer != NULL )
  401514:	6cab      	ldr	r3, [r5, #72]	; 0x48
  401516:	2b00      	cmp	r3, #0
  401518:	d0f3      	beq.n	401502 <prvUnlockQueue+0x1e>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  40151a:	2100      	movs	r1, #0
  40151c:	4628      	mov	r0, r5
  40151e:	47b0      	blx	r6
  401520:	2800      	cmp	r0, #0
  401522:	d0f4      	beq.n	40150e <prvUnlockQueue+0x2a>
						vTaskMissedYield();
  401524:	47c0      	blx	r8
  401526:	e7f2      	b.n	40150e <prvUnlockQueue+0x2a>
							vTaskMissedYield();
  401528:	47c0      	blx	r8
  40152a:	e7f0      	b.n	40150e <prvUnlockQueue+0x2a>
		pxQueue->cTxLock = queueUNLOCKED;
  40152c:	23ff      	movs	r3, #255	; 0xff
  40152e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
  401532:	4b14      	ldr	r3, [pc, #80]	; (401584 <prvUnlockQueue+0xa0>)
  401534:	4798      	blx	r3
	taskENTER_CRITICAL();
  401536:	4b10      	ldr	r3, [pc, #64]	; (401578 <prvUnlockQueue+0x94>)
  401538:	4798      	blx	r3
		int8_t cRxLock = pxQueue->cRxLock;
  40153a:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
  40153e:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401540:	2c00      	cmp	r4, #0
  401542:	dd12      	ble.n	40156a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401544:	692b      	ldr	r3, [r5, #16]
  401546:	b183      	cbz	r3, 40156a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401548:	f105 0710 	add.w	r7, r5, #16
  40154c:	4e0c      	ldr	r6, [pc, #48]	; (401580 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  40154e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 401588 <prvUnlockQueue+0xa4>
  401552:	e004      	b.n	40155e <prvUnlockQueue+0x7a>
  401554:	3c01      	subs	r4, #1
  401556:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
  401558:	b13c      	cbz	r4, 40156a <prvUnlockQueue+0x86>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40155a:	692b      	ldr	r3, [r5, #16]
  40155c:	b12b      	cbz	r3, 40156a <prvUnlockQueue+0x86>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  40155e:	4638      	mov	r0, r7
  401560:	47b0      	blx	r6
  401562:	2800      	cmp	r0, #0
  401564:	d0f6      	beq.n	401554 <prvUnlockQueue+0x70>
					vTaskMissedYield();
  401566:	47c0      	blx	r8
  401568:	e7f4      	b.n	401554 <prvUnlockQueue+0x70>
		pxQueue->cRxLock = queueUNLOCKED;
  40156a:	23ff      	movs	r3, #255	; 0xff
  40156c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
  401570:	4b04      	ldr	r3, [pc, #16]	; (401584 <prvUnlockQueue+0xa0>)
  401572:	4798      	blx	r3
  401574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401578:	004010b5 	.word	0x004010b5
  40157c:	00401431 	.word	0x00401431
  401580:	00402729 	.word	0x00402729
  401584:	00401101 	.word	0x00401101
  401588:	0040286d 	.word	0x0040286d

0040158c <xQueueGenericReset>:
{
  40158c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  40158e:	b330      	cbz	r0, 4015de <xQueueGenericReset+0x52>
  401590:	4604      	mov	r4, r0
  401592:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401594:	4b1d      	ldr	r3, [pc, #116]	; (40160c <xQueueGenericReset+0x80>)
  401596:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401598:	6822      	ldr	r2, [r4, #0]
  40159a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  40159c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40159e:	fb03 f301 	mul.w	r3, r3, r1
  4015a2:	18d0      	adds	r0, r2, r3
  4015a4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4015a6:	2000      	movs	r0, #0
  4015a8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4015aa:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4015ac:	1a5b      	subs	r3, r3, r1
  4015ae:	4413      	add	r3, r2
  4015b0:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
  4015b2:	23ff      	movs	r3, #255	; 0xff
  4015b4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
  4015b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
  4015bc:	b9d5      	cbnz	r5, 4015f4 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4015be:	6923      	ldr	r3, [r4, #16]
  4015c0:	b1fb      	cbz	r3, 401602 <xQueueGenericReset+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4015c2:	f104 0010 	add.w	r0, r4, #16
  4015c6:	4b12      	ldr	r3, [pc, #72]	; (401610 <xQueueGenericReset+0x84>)
  4015c8:	4798      	blx	r3
  4015ca:	b1d0      	cbz	r0, 401602 <xQueueGenericReset+0x76>
					queueYIELD_IF_USING_PREEMPTION();
  4015cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015d0:	4b10      	ldr	r3, [pc, #64]	; (401614 <xQueueGenericReset+0x88>)
  4015d2:	601a      	str	r2, [r3, #0]
  4015d4:	f3bf 8f4f 	dsb	sy
  4015d8:	f3bf 8f6f 	isb	sy
  4015dc:	e011      	b.n	401602 <xQueueGenericReset+0x76>
  4015de:	f04f 0380 	mov.w	r3, #128	; 0x80
  4015e2:	b672      	cpsid	i
  4015e4:	f383 8811 	msr	BASEPRI, r3
  4015e8:	f3bf 8f6f 	isb	sy
  4015ec:	f3bf 8f4f 	dsb	sy
  4015f0:	b662      	cpsie	i
  4015f2:	e7fe      	b.n	4015f2 <xQueueGenericReset+0x66>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  4015f4:	f104 0010 	add.w	r0, r4, #16
  4015f8:	4d07      	ldr	r5, [pc, #28]	; (401618 <xQueueGenericReset+0x8c>)
  4015fa:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  4015fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401600:	47a8      	blx	r5
	taskEXIT_CRITICAL();
  401602:	4b06      	ldr	r3, [pc, #24]	; (40161c <xQueueGenericReset+0x90>)
  401604:	4798      	blx	r3
}
  401606:	2001      	movs	r0, #1
  401608:	bd38      	pop	{r3, r4, r5, pc}
  40160a:	bf00      	nop
  40160c:	004010b5 	.word	0x004010b5
  401610:	00402729 	.word	0x00402729
  401614:	e000ed04 	.word	0xe000ed04
  401618:	00400f45 	.word	0x00400f45
  40161c:	00401101 	.word	0x00401101

00401620 <xQueueGenericCreate>:
	{
  401620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  401622:	b950      	cbnz	r0, 40163a <xQueueGenericCreate+0x1a>
  401624:	f04f 0380 	mov.w	r3, #128	; 0x80
  401628:	b672      	cpsid	i
  40162a:	f383 8811 	msr	BASEPRI, r3
  40162e:	f3bf 8f6f 	isb	sy
  401632:	f3bf 8f4f 	dsb	sy
  401636:	b662      	cpsie	i
  401638:	e7fe      	b.n	401638 <xQueueGenericCreate+0x18>
  40163a:	4606      	mov	r6, r0
  40163c:	4617      	mov	r7, r2
  40163e:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401640:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  401644:	3054      	adds	r0, #84	; 0x54
  401646:	4b0b      	ldr	r3, [pc, #44]	; (401674 <xQueueGenericCreate+0x54>)
  401648:	4798      	blx	r3
		if( pxNewQueue != NULL )
  40164a:	4604      	mov	r4, r0
  40164c:	b178      	cbz	r0, 40166e <xQueueGenericCreate+0x4e>
	if( uxItemSize == ( UBaseType_t ) 0 )
  40164e:	b11d      	cbz	r5, 401658 <xQueueGenericCreate+0x38>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
  401650:	f100 0354 	add.w	r3, r0, #84	; 0x54
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
  401654:	6003      	str	r3, [r0, #0]
  401656:	e000      	b.n	40165a <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  401658:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
  40165a:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
  40165c:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  40165e:	2101      	movs	r1, #1
  401660:	4620      	mov	r0, r4
  401662:	4b05      	ldr	r3, [pc, #20]	; (401678 <xQueueGenericCreate+0x58>)
  401664:	4798      	blx	r3
		pxNewQueue->ucQueueType = ucQueueType;
  401666:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
		pxNewQueue->pxQueueSetContainer = NULL;
  40166a:	2300      	movs	r3, #0
  40166c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
  40166e:	4620      	mov	r0, r4
  401670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  401672:	bf00      	nop
  401674:	00401341 	.word	0x00401341
  401678:	0040158d 	.word	0x0040158d

0040167c <xQueueGenericSend>:
{
  40167c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401680:	b085      	sub	sp, #20
  401682:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401684:	b1b8      	cbz	r0, 4016b6 <xQueueGenericSend+0x3a>
  401686:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401688:	b301      	cbz	r1, 4016cc <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40168a:	2b02      	cmp	r3, #2
  40168c:	d02c      	beq.n	4016e8 <xQueueGenericSend+0x6c>
  40168e:	461e      	mov	r6, r3
  401690:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401692:	4b69      	ldr	r3, [pc, #420]	; (401838 <xQueueGenericSend+0x1bc>)
  401694:	4798      	blx	r3
  401696:	2800      	cmp	r0, #0
  401698:	d134      	bne.n	401704 <xQueueGenericSend+0x88>
  40169a:	9b01      	ldr	r3, [sp, #4]
  40169c:	2b00      	cmp	r3, #0
  40169e:	d039      	beq.n	401714 <xQueueGenericSend+0x98>
  4016a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016a4:	b672      	cpsid	i
  4016a6:	f383 8811 	msr	BASEPRI, r3
  4016aa:	f3bf 8f6f 	isb	sy
  4016ae:	f3bf 8f4f 	dsb	sy
  4016b2:	b662      	cpsie	i
  4016b4:	e7fe      	b.n	4016b4 <xQueueGenericSend+0x38>
  4016b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016ba:	b672      	cpsid	i
  4016bc:	f383 8811 	msr	BASEPRI, r3
  4016c0:	f3bf 8f6f 	isb	sy
  4016c4:	f3bf 8f4f 	dsb	sy
  4016c8:	b662      	cpsie	i
  4016ca:	e7fe      	b.n	4016ca <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4016cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4016ce:	2a00      	cmp	r2, #0
  4016d0:	d0db      	beq.n	40168a <xQueueGenericSend+0xe>
  4016d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016d6:	b672      	cpsid	i
  4016d8:	f383 8811 	msr	BASEPRI, r3
  4016dc:	f3bf 8f6f 	isb	sy
  4016e0:	f3bf 8f4f 	dsb	sy
  4016e4:	b662      	cpsie	i
  4016e6:	e7fe      	b.n	4016e6 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4016e8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  4016ea:	2a01      	cmp	r2, #1
  4016ec:	d0cf      	beq.n	40168e <xQueueGenericSend+0x12>
  4016ee:	f04f 0380 	mov.w	r3, #128	; 0x80
  4016f2:	b672      	cpsid	i
  4016f4:	f383 8811 	msr	BASEPRI, r3
  4016f8:	f3bf 8f6f 	isb	sy
  4016fc:	f3bf 8f4f 	dsb	sy
  401700:	b662      	cpsie	i
  401702:	e7fe      	b.n	401702 <xQueueGenericSend+0x86>
  401704:	2500      	movs	r5, #0
		taskENTER_CRITICAL();
  401706:	f8df 815c 	ldr.w	r8, [pc, #348]	; 401864 <xQueueGenericSend+0x1e8>
					vTaskInternalSetTimeOutState( &xTimeOut );
  40170a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 401868 <xQueueGenericSend+0x1ec>
					portYIELD_WITHIN_API();
  40170e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 401844 <xQueueGenericSend+0x1c8>
  401712:	e041      	b.n	401798 <xQueueGenericSend+0x11c>
  401714:	2500      	movs	r5, #0
  401716:	e7f6      	b.n	401706 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  401718:	4632      	mov	r2, r6
  40171a:	4639      	mov	r1, r7
  40171c:	4620      	mov	r0, r4
  40171e:	4b47      	ldr	r3, [pc, #284]	; (40183c <xQueueGenericSend+0x1c0>)
  401720:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  401722:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401724:	b193      	cbz	r3, 40174c <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  401726:	4631      	mov	r1, r6
  401728:	4620      	mov	r0, r4
  40172a:	4b45      	ldr	r3, [pc, #276]	; (401840 <xQueueGenericSend+0x1c4>)
  40172c:	4798      	blx	r3
  40172e:	b138      	cbz	r0, 401740 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401734:	4b43      	ldr	r3, [pc, #268]	; (401844 <xQueueGenericSend+0x1c8>)
  401736:	601a      	str	r2, [r3, #0]
  401738:	f3bf 8f4f 	dsb	sy
  40173c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401740:	4b41      	ldr	r3, [pc, #260]	; (401848 <xQueueGenericSend+0x1cc>)
  401742:	4798      	blx	r3
				return pdPASS;
  401744:	2001      	movs	r0, #1
}
  401746:	b005      	add	sp, #20
  401748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40174c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40174e:	b173      	cbz	r3, 40176e <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401750:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401754:	4b3d      	ldr	r3, [pc, #244]	; (40184c <xQueueGenericSend+0x1d0>)
  401756:	4798      	blx	r3
  401758:	2800      	cmp	r0, #0
  40175a:	d0f1      	beq.n	401740 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  40175c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401760:	4b38      	ldr	r3, [pc, #224]	; (401844 <xQueueGenericSend+0x1c8>)
  401762:	601a      	str	r2, [r3, #0]
  401764:	f3bf 8f4f 	dsb	sy
  401768:	f3bf 8f6f 	isb	sy
  40176c:	e7e8      	b.n	401740 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  40176e:	2800      	cmp	r0, #0
  401770:	d0e6      	beq.n	401740 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  401772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401776:	4b33      	ldr	r3, [pc, #204]	; (401844 <xQueueGenericSend+0x1c8>)
  401778:	601a      	str	r2, [r3, #0]
  40177a:	f3bf 8f4f 	dsb	sy
  40177e:	f3bf 8f6f 	isb	sy
  401782:	e7dd      	b.n	401740 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401784:	4b30      	ldr	r3, [pc, #192]	; (401848 <xQueueGenericSend+0x1cc>)
  401786:	4798      	blx	r3
					return errQUEUE_FULL;
  401788:	2000      	movs	r0, #0
  40178a:	e7dc      	b.n	401746 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  40178c:	4620      	mov	r0, r4
  40178e:	4b30      	ldr	r3, [pc, #192]	; (401850 <xQueueGenericSend+0x1d4>)
  401790:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401792:	4b30      	ldr	r3, [pc, #192]	; (401854 <xQueueGenericSend+0x1d8>)
  401794:	4798      	blx	r3
  401796:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
  401798:	47c0      	blx	r8
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  40179a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  40179c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40179e:	429a      	cmp	r2, r3
  4017a0:	d3ba      	bcc.n	401718 <xQueueGenericSend+0x9c>
  4017a2:	2e02      	cmp	r6, #2
  4017a4:	d0b8      	beq.n	401718 <xQueueGenericSend+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
  4017a6:	9b01      	ldr	r3, [sp, #4]
  4017a8:	2b00      	cmp	r3, #0
  4017aa:	d0eb      	beq.n	401784 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  4017ac:	b90d      	cbnz	r5, 4017b2 <xQueueGenericSend+0x136>
					vTaskInternalSetTimeOutState( &xTimeOut );
  4017ae:	a802      	add	r0, sp, #8
  4017b0:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4017b2:	4b25      	ldr	r3, [pc, #148]	; (401848 <xQueueGenericSend+0x1cc>)
  4017b4:	4798      	blx	r3
		vTaskSuspendAll();
  4017b6:	4b28      	ldr	r3, [pc, #160]	; (401858 <xQueueGenericSend+0x1dc>)
  4017b8:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4017ba:	47c0      	blx	r8
  4017bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  4017c0:	b25b      	sxtb	r3, r3
  4017c2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4017c6:	d102      	bne.n	4017ce <xQueueGenericSend+0x152>
  4017c8:	2300      	movs	r3, #0
  4017ca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  4017ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  4017d2:	b25b      	sxtb	r3, r3
  4017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
  4017d8:	d102      	bne.n	4017e0 <xQueueGenericSend+0x164>
  4017da:	2300      	movs	r3, #0
  4017dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  4017e0:	4b19      	ldr	r3, [pc, #100]	; (401848 <xQueueGenericSend+0x1cc>)
  4017e2:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  4017e4:	a901      	add	r1, sp, #4
  4017e6:	a802      	add	r0, sp, #8
  4017e8:	4b1c      	ldr	r3, [pc, #112]	; (40185c <xQueueGenericSend+0x1e0>)
  4017ea:	4798      	blx	r3
  4017ec:	b9e0      	cbnz	r0, 401828 <xQueueGenericSend+0x1ac>
	taskENTER_CRITICAL();
  4017ee:	47c0      	blx	r8
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  4017f0:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  4017f4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  4017f6:	4b14      	ldr	r3, [pc, #80]	; (401848 <xQueueGenericSend+0x1cc>)
  4017f8:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  4017fa:	45ab      	cmp	fp, r5
  4017fc:	d1c6      	bne.n	40178c <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  4017fe:	9901      	ldr	r1, [sp, #4]
  401800:	f104 0010 	add.w	r0, r4, #16
  401804:	4b16      	ldr	r3, [pc, #88]	; (401860 <xQueueGenericSend+0x1e4>)
  401806:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401808:	4620      	mov	r0, r4
  40180a:	4b11      	ldr	r3, [pc, #68]	; (401850 <xQueueGenericSend+0x1d4>)
  40180c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40180e:	4b11      	ldr	r3, [pc, #68]	; (401854 <xQueueGenericSend+0x1d8>)
  401810:	4798      	blx	r3
  401812:	2800      	cmp	r0, #0
  401814:	d1bf      	bne.n	401796 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401816:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40181a:	f8c9 3000 	str.w	r3, [r9]
  40181e:	f3bf 8f4f 	dsb	sy
  401822:	f3bf 8f6f 	isb	sy
  401826:	e7b6      	b.n	401796 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  401828:	4620      	mov	r0, r4
  40182a:	4b09      	ldr	r3, [pc, #36]	; (401850 <xQueueGenericSend+0x1d4>)
  40182c:	4798      	blx	r3
			( void ) xTaskResumeAll();
  40182e:	4b09      	ldr	r3, [pc, #36]	; (401854 <xQueueGenericSend+0x1d8>)
  401830:	4798      	blx	r3
			return errQUEUE_FULL;
  401832:	2000      	movs	r0, #0
  401834:	e787      	b.n	401746 <xQueueGenericSend+0xca>
  401836:	bf00      	nop
  401838:	00402a3d 	.word	0x00402a3d
  40183c:	004013b5 	.word	0x004013b5
  401840:	00401431 	.word	0x00401431
  401844:	e000ed04 	.word	0xe000ed04
  401848:	00401101 	.word	0x00401101
  40184c:	00402729 	.word	0x00402729
  401850:	004014e5 	.word	0x004014e5
  401854:	00402461 	.word	0x00402461
  401858:	004022f1 	.word	0x004022f1
  40185c:	004027d9 	.word	0x004027d9
  401860:	004026a5 	.word	0x004026a5
  401864:	004010b5 	.word	0x004010b5
  401868:	004027c1 	.word	0x004027c1

0040186c <xQueueGenericSendFromISR>:
{
  40186c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
  401870:	2800      	cmp	r0, #0
  401872:	d039      	beq.n	4018e8 <xQueueGenericSendFromISR+0x7c>
  401874:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401876:	2900      	cmp	r1, #0
  401878:	d041      	beq.n	4018fe <xQueueGenericSendFromISR+0x92>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40187a:	2b02      	cmp	r3, #2
  40187c:	d04d      	beq.n	40191a <xQueueGenericSendFromISR+0xae>
  40187e:	461f      	mov	r7, r3
  401880:	4690      	mov	r8, r2
  401882:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401884:	4b3a      	ldr	r3, [pc, #232]	; (401970 <xQueueGenericSendFromISR+0x104>)
  401886:	4798      	blx	r3
	__asm volatile
  401888:	f3ef 8611 	mrs	r6, BASEPRI
  40188c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401890:	b672      	cpsid	i
  401892:	f383 8811 	msr	BASEPRI, r3
  401896:	f3bf 8f6f 	isb	sy
  40189a:	f3bf 8f4f 	dsb	sy
  40189e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4018a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4018a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4018a4:	429a      	cmp	r2, r3
  4018a6:	d301      	bcc.n	4018ac <xQueueGenericSendFromISR+0x40>
  4018a8:	2f02      	cmp	r7, #2
  4018aa:	d158      	bne.n	40195e <xQueueGenericSendFromISR+0xf2>
			const int8_t cTxLock = pxQueue->cTxLock;
  4018ac:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
  4018b0:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4018b2:	463a      	mov	r2, r7
  4018b4:	4649      	mov	r1, r9
  4018b6:	4620      	mov	r0, r4
  4018b8:	4b2e      	ldr	r3, [pc, #184]	; (401974 <xQueueGenericSendFromISR+0x108>)
  4018ba:	4798      	blx	r3
			if( cTxLock == queueUNLOCKED )
  4018bc:	f1b5 3fff 	cmp.w	r5, #4294967295
  4018c0:	d147      	bne.n	401952 <xQueueGenericSendFromISR+0xe6>
					if( pxQueue->pxQueueSetContainer != NULL )
  4018c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4018c4:	2b00      	cmp	r3, #0
  4018c6:	d036      	beq.n	401936 <xQueueGenericSendFromISR+0xca>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
  4018c8:	4639      	mov	r1, r7
  4018ca:	4620      	mov	r0, r4
  4018cc:	4b2a      	ldr	r3, [pc, #168]	; (401978 <xQueueGenericSendFromISR+0x10c>)
  4018ce:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4018d0:	f1b8 0f00 	cmp.w	r8, #0
  4018d4:	d045      	beq.n	401962 <xQueueGenericSendFromISR+0xf6>
  4018d6:	2800      	cmp	r0, #0
  4018d8:	d043      	beq.n	401962 <xQueueGenericSendFromISR+0xf6>
								*pxHigherPriorityTaskWoken = pdTRUE;
  4018da:	2001      	movs	r0, #1
  4018dc:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
  4018e0:	f386 8811 	msr	BASEPRI, r6
}
  4018e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
  4018e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018ec:	b672      	cpsid	i
  4018ee:	f383 8811 	msr	BASEPRI, r3
  4018f2:	f3bf 8f6f 	isb	sy
  4018f6:	f3bf 8f4f 	dsb	sy
  4018fa:	b662      	cpsie	i
  4018fc:	e7fe      	b.n	4018fc <xQueueGenericSendFromISR+0x90>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4018fe:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401900:	2800      	cmp	r0, #0
  401902:	d0ba      	beq.n	40187a <xQueueGenericSendFromISR+0xe>
  401904:	f04f 0380 	mov.w	r3, #128	; 0x80
  401908:	b672      	cpsid	i
  40190a:	f383 8811 	msr	BASEPRI, r3
  40190e:	f3bf 8f6f 	isb	sy
  401912:	f3bf 8f4f 	dsb	sy
  401916:	b662      	cpsie	i
  401918:	e7fe      	b.n	401918 <xQueueGenericSendFromISR+0xac>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  40191a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  40191c:	2801      	cmp	r0, #1
  40191e:	d0ae      	beq.n	40187e <xQueueGenericSendFromISR+0x12>
  401920:	f04f 0380 	mov.w	r3, #128	; 0x80
  401924:	b672      	cpsid	i
  401926:	f383 8811 	msr	BASEPRI, r3
  40192a:	f3bf 8f6f 	isb	sy
  40192e:	f3bf 8f4f 	dsb	sy
  401932:	b662      	cpsie	i
  401934:	e7fe      	b.n	401934 <xQueueGenericSendFromISR+0xc8>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401936:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401938:	b1ab      	cbz	r3, 401966 <xQueueGenericSendFromISR+0xfa>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40193a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40193e:	4b0f      	ldr	r3, [pc, #60]	; (40197c <xQueueGenericSendFromISR+0x110>)
  401940:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401942:	f1b8 0f00 	cmp.w	r8, #0
  401946:	d010      	beq.n	40196a <xQueueGenericSendFromISR+0xfe>
  401948:	b178      	cbz	r0, 40196a <xQueueGenericSendFromISR+0xfe>
									*pxHigherPriorityTaskWoken = pdTRUE;
  40194a:	2001      	movs	r0, #1
  40194c:	f8c8 0000 	str.w	r0, [r8]
  401950:	e7c6      	b.n	4018e0 <xQueueGenericSendFromISR+0x74>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  401952:	1c6b      	adds	r3, r5, #1
  401954:	b25b      	sxtb	r3, r3
  401956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
  40195a:	2001      	movs	r0, #1
  40195c:	e7c0      	b.n	4018e0 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
  40195e:	2000      	movs	r0, #0
  401960:	e7be      	b.n	4018e0 <xQueueGenericSendFromISR+0x74>
			xReturn = pdPASS;
  401962:	2001      	movs	r0, #1
  401964:	e7bc      	b.n	4018e0 <xQueueGenericSendFromISR+0x74>
  401966:	2001      	movs	r0, #1
  401968:	e7ba      	b.n	4018e0 <xQueueGenericSendFromISR+0x74>
  40196a:	2001      	movs	r0, #1
  40196c:	e7b8      	b.n	4018e0 <xQueueGenericSendFromISR+0x74>
  40196e:	bf00      	nop
  401970:	004012dd 	.word	0x004012dd
  401974:	004013b5 	.word	0x004013b5
  401978:	00401431 	.word	0x00401431
  40197c:	00402729 	.word	0x00402729

00401980 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  401980:	b170      	cbz	r0, 4019a0 <xQueueGiveFromISR+0x20>
{
  401982:	b570      	push	{r4, r5, r6, lr}
  401984:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401986:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401988:	b1ab      	cbz	r3, 4019b6 <xQueueGiveFromISR+0x36>
  40198a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40198e:	b672      	cpsid	i
  401990:	f383 8811 	msr	BASEPRI, r3
  401994:	f3bf 8f6f 	isb	sy
  401998:	f3bf 8f4f 	dsb	sy
  40199c:	b662      	cpsie	i
  40199e:	e7fe      	b.n	40199e <xQueueGiveFromISR+0x1e>
  4019a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019a4:	b672      	cpsid	i
  4019a6:	f383 8811 	msr	BASEPRI, r3
  4019aa:	f3bf 8f6f 	isb	sy
  4019ae:	f3bf 8f4f 	dsb	sy
  4019b2:	b662      	cpsie	i
  4019b4:	e7fe      	b.n	4019b4 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  4019b6:	6803      	ldr	r3, [r0, #0]
  4019b8:	b33b      	cbz	r3, 401a0a <xQueueGiveFromISR+0x8a>
  4019ba:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4019bc:	4b26      	ldr	r3, [pc, #152]	; (401a58 <xQueueGiveFromISR+0xd8>)
  4019be:	4798      	blx	r3
	__asm volatile
  4019c0:	f3ef 8511 	mrs	r5, BASEPRI
  4019c4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4019c8:	b672      	cpsid	i
  4019ca:	f383 8811 	msr	BASEPRI, r3
  4019ce:	f3bf 8f6f 	isb	sy
  4019d2:	f3bf 8f4f 	dsb	sy
  4019d6:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  4019d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
  4019da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4019dc:	429a      	cmp	r2, r3
  4019de:	d233      	bcs.n	401a48 <xQueueGiveFromISR+0xc8>
			const int8_t cTxLock = pxQueue->cTxLock;
  4019e0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  4019e4:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
  4019e6:	3201      	adds	r2, #1
  4019e8:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
  4019ea:	f1b3 3fff 	cmp.w	r3, #4294967295
  4019ee:	d125      	bne.n	401a3c <xQueueGiveFromISR+0xbc>
					if( pxQueue->pxQueueSetContainer != NULL )
  4019f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4019f2:	b1c3      	cbz	r3, 401a26 <xQueueGiveFromISR+0xa6>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
  4019f4:	2100      	movs	r1, #0
  4019f6:	4620      	mov	r0, r4
  4019f8:	4b18      	ldr	r3, [pc, #96]	; (401a5c <xQueueGiveFromISR+0xdc>)
  4019fa:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  4019fc:	b336      	cbz	r6, 401a4c <xQueueGiveFromISR+0xcc>
  4019fe:	b328      	cbz	r0, 401a4c <xQueueGiveFromISR+0xcc>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401a00:	2001      	movs	r0, #1
  401a02:	6030      	str	r0, [r6, #0]
	__asm volatile
  401a04:	f385 8811 	msr	BASEPRI, r5
}
  401a08:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401a0a:	6843      	ldr	r3, [r0, #4]
  401a0c:	2b00      	cmp	r3, #0
  401a0e:	d0d4      	beq.n	4019ba <xQueueGiveFromISR+0x3a>
	__asm volatile
  401a10:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a14:	b672      	cpsid	i
  401a16:	f383 8811 	msr	BASEPRI, r3
  401a1a:	f3bf 8f6f 	isb	sy
  401a1e:	f3bf 8f4f 	dsb	sy
  401a22:	b662      	cpsie	i
  401a24:	e7fe      	b.n	401a24 <xQueueGiveFromISR+0xa4>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401a28:	b193      	cbz	r3, 401a50 <xQueueGiveFromISR+0xd0>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401a2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a2e:	4b0c      	ldr	r3, [pc, #48]	; (401a60 <xQueueGiveFromISR+0xe0>)
  401a30:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  401a32:	b17e      	cbz	r6, 401a54 <xQueueGiveFromISR+0xd4>
  401a34:	b170      	cbz	r0, 401a54 <xQueueGiveFromISR+0xd4>
									*pxHigherPriorityTaskWoken = pdTRUE;
  401a36:	2001      	movs	r0, #1
  401a38:	6030      	str	r0, [r6, #0]
  401a3a:	e7e3      	b.n	401a04 <xQueueGiveFromISR+0x84>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
  401a3c:	3301      	adds	r3, #1
  401a3e:	b25b      	sxtb	r3, r3
  401a40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
  401a44:	2001      	movs	r0, #1
  401a46:	e7dd      	b.n	401a04 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
  401a48:	2000      	movs	r0, #0
  401a4a:	e7db      	b.n	401a04 <xQueueGiveFromISR+0x84>
			xReturn = pdPASS;
  401a4c:	2001      	movs	r0, #1
  401a4e:	e7d9      	b.n	401a04 <xQueueGiveFromISR+0x84>
  401a50:	2001      	movs	r0, #1
  401a52:	e7d7      	b.n	401a04 <xQueueGiveFromISR+0x84>
  401a54:	2001      	movs	r0, #1
  401a56:	e7d5      	b.n	401a04 <xQueueGiveFromISR+0x84>
  401a58:	004012dd 	.word	0x004012dd
  401a5c:	00401431 	.word	0x00401431
  401a60:	00402729 	.word	0x00402729

00401a64 <xQueueReceive>:
{
  401a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401a68:	b084      	sub	sp, #16
  401a6a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
  401a6c:	b190      	cbz	r0, 401a94 <xQueueReceive+0x30>
  401a6e:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401a70:	b1d9      	cbz	r1, 401aaa <xQueueReceive+0x46>
  401a72:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401a74:	4b54      	ldr	r3, [pc, #336]	; (401bc8 <xQueueReceive+0x164>)
  401a76:	4798      	blx	r3
  401a78:	bb28      	cbnz	r0, 401ac6 <xQueueReceive+0x62>
  401a7a:	9b01      	ldr	r3, [sp, #4]
  401a7c:	b35b      	cbz	r3, 401ad6 <xQueueReceive+0x72>
  401a7e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a82:	b672      	cpsid	i
  401a84:	f383 8811 	msr	BASEPRI, r3
  401a88:	f3bf 8f6f 	isb	sy
  401a8c:	f3bf 8f4f 	dsb	sy
  401a90:	b662      	cpsie	i
  401a92:	e7fe      	b.n	401a92 <xQueueReceive+0x2e>
  401a94:	f04f 0380 	mov.w	r3, #128	; 0x80
  401a98:	b672      	cpsid	i
  401a9a:	f383 8811 	msr	BASEPRI, r3
  401a9e:	f3bf 8f6f 	isb	sy
  401aa2:	f3bf 8f4f 	dsb	sy
  401aa6:	b662      	cpsie	i
  401aa8:	e7fe      	b.n	401aa8 <xQueueReceive+0x44>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401aaa:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401aac:	2b00      	cmp	r3, #0
  401aae:	d0e0      	beq.n	401a72 <xQueueReceive+0xe>
  401ab0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401ab4:	b672      	cpsid	i
  401ab6:	f383 8811 	msr	BASEPRI, r3
  401aba:	f3bf 8f6f 	isb	sy
  401abe:	f3bf 8f4f 	dsb	sy
  401ac2:	b662      	cpsie	i
  401ac4:	e7fe      	b.n	401ac4 <xQueueReceive+0x60>
  401ac6:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401ac8:	f8df 8128 	ldr.w	r8, [pc, #296]	; 401bf4 <xQueueReceive+0x190>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401acc:	f8df a128 	ldr.w	sl, [pc, #296]	; 401bf8 <xQueueReceive+0x194>
					portYIELD_WITHIN_API();
  401ad0:	f8df 9100 	ldr.w	r9, [pc, #256]	; 401bd4 <xQueueReceive+0x170>
  401ad4:	e031      	b.n	401b3a <xQueueReceive+0xd6>
  401ad6:	2700      	movs	r7, #0
  401ad8:	e7f6      	b.n	401ac8 <xQueueReceive+0x64>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401ada:	4631      	mov	r1, r6
  401adc:	4620      	mov	r0, r4
  401ade:	4b3b      	ldr	r3, [pc, #236]	; (401bcc <xQueueReceive+0x168>)
  401ae0:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
  401ae2:	3d01      	subs	r5, #1
  401ae4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401ae6:	6923      	ldr	r3, [r4, #16]
  401ae8:	b163      	cbz	r3, 401b04 <xQueueReceive+0xa0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401aea:	f104 0010 	add.w	r0, r4, #16
  401aee:	4b38      	ldr	r3, [pc, #224]	; (401bd0 <xQueueReceive+0x16c>)
  401af0:	4798      	blx	r3
  401af2:	b138      	cbz	r0, 401b04 <xQueueReceive+0xa0>
						queueYIELD_IF_USING_PREEMPTION();
  401af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401af8:	4b36      	ldr	r3, [pc, #216]	; (401bd4 <xQueueReceive+0x170>)
  401afa:	601a      	str	r2, [r3, #0]
  401afc:	f3bf 8f4f 	dsb	sy
  401b00:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401b04:	4b34      	ldr	r3, [pc, #208]	; (401bd8 <xQueueReceive+0x174>)
  401b06:	4798      	blx	r3
				return pdPASS;
  401b08:	2001      	movs	r0, #1
}
  401b0a:	b004      	add	sp, #16
  401b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
  401b10:	4b31      	ldr	r3, [pc, #196]	; (401bd8 <xQueueReceive+0x174>)
  401b12:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401b14:	2000      	movs	r0, #0
  401b16:	e7f8      	b.n	401b0a <xQueueReceive+0xa6>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401b18:	a802      	add	r0, sp, #8
  401b1a:	47d0      	blx	sl
  401b1c:	e016      	b.n	401b4c <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
  401b1e:	2300      	movs	r3, #0
  401b20:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401b24:	e01d      	b.n	401b62 <xQueueReceive+0xfe>
  401b26:	2300      	movs	r3, #0
  401b28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401b2c:	e01f      	b.n	401b6e <xQueueReceive+0x10a>
				prvUnlockQueue( pxQueue );
  401b2e:	4620      	mov	r0, r4
  401b30:	4b2a      	ldr	r3, [pc, #168]	; (401bdc <xQueueReceive+0x178>)
  401b32:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401b34:	4b2a      	ldr	r3, [pc, #168]	; (401be0 <xQueueReceive+0x17c>)
  401b36:	4798      	blx	r3
  401b38:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401b3a:	47c0      	blx	r8
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
  401b3c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
  401b3e:	2d00      	cmp	r5, #0
  401b40:	d1cb      	bne.n	401ada <xQueueReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  401b42:	9b01      	ldr	r3, [sp, #4]
  401b44:	2b00      	cmp	r3, #0
  401b46:	d0e3      	beq.n	401b10 <xQueueReceive+0xac>
				else if( xEntryTimeSet == pdFALSE )
  401b48:	2f00      	cmp	r7, #0
  401b4a:	d0e5      	beq.n	401b18 <xQueueReceive+0xb4>
		taskEXIT_CRITICAL();
  401b4c:	4b22      	ldr	r3, [pc, #136]	; (401bd8 <xQueueReceive+0x174>)
  401b4e:	4798      	blx	r3
		vTaskSuspendAll();
  401b50:	4b24      	ldr	r3, [pc, #144]	; (401be4 <xQueueReceive+0x180>)
  401b52:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401b54:	47c0      	blx	r8
  401b56:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401b5a:	b25b      	sxtb	r3, r3
  401b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b60:	d0dd      	beq.n	401b1e <xQueueReceive+0xba>
  401b62:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401b66:	b25b      	sxtb	r3, r3
  401b68:	f1b3 3fff 	cmp.w	r3, #4294967295
  401b6c:	d0db      	beq.n	401b26 <xQueueReceive+0xc2>
  401b6e:	4b1a      	ldr	r3, [pc, #104]	; (401bd8 <xQueueReceive+0x174>)
  401b70:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401b72:	a901      	add	r1, sp, #4
  401b74:	a802      	add	r0, sp, #8
  401b76:	4b1c      	ldr	r3, [pc, #112]	; (401be8 <xQueueReceive+0x184>)
  401b78:	4798      	blx	r3
  401b7a:	b9c8      	cbnz	r0, 401bb0 <xQueueReceive+0x14c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401b7c:	4620      	mov	r0, r4
  401b7e:	4b1b      	ldr	r3, [pc, #108]	; (401bec <xQueueReceive+0x188>)
  401b80:	4798      	blx	r3
  401b82:	2800      	cmp	r0, #0
  401b84:	d0d3      	beq.n	401b2e <xQueueReceive+0xca>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401b86:	9901      	ldr	r1, [sp, #4]
  401b88:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b8c:	4b18      	ldr	r3, [pc, #96]	; (401bf0 <xQueueReceive+0x18c>)
  401b8e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401b90:	4620      	mov	r0, r4
  401b92:	4b12      	ldr	r3, [pc, #72]	; (401bdc <xQueueReceive+0x178>)
  401b94:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401b96:	4b12      	ldr	r3, [pc, #72]	; (401be0 <xQueueReceive+0x17c>)
  401b98:	4798      	blx	r3
  401b9a:	2800      	cmp	r0, #0
  401b9c:	d1cc      	bne.n	401b38 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
  401b9e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401ba2:	f8c9 3000 	str.w	r3, [r9]
  401ba6:	f3bf 8f4f 	dsb	sy
  401baa:	f3bf 8f6f 	isb	sy
  401bae:	e7c3      	b.n	401b38 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
  401bb0:	4620      	mov	r0, r4
  401bb2:	4b0a      	ldr	r3, [pc, #40]	; (401bdc <xQueueReceive+0x178>)
  401bb4:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401bb6:	4b0a      	ldr	r3, [pc, #40]	; (401be0 <xQueueReceive+0x17c>)
  401bb8:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401bba:	4620      	mov	r0, r4
  401bbc:	4b0b      	ldr	r3, [pc, #44]	; (401bec <xQueueReceive+0x188>)
  401bbe:	4798      	blx	r3
  401bc0:	2800      	cmp	r0, #0
  401bc2:	d0b9      	beq.n	401b38 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
  401bc4:	2000      	movs	r0, #0
  401bc6:	e7a0      	b.n	401b0a <xQueueReceive+0xa6>
  401bc8:	00402a3d 	.word	0x00402a3d
  401bcc:	004014bd 	.word	0x004014bd
  401bd0:	00402729 	.word	0x00402729
  401bd4:	e000ed04 	.word	0xe000ed04
  401bd8:	00401101 	.word	0x00401101
  401bdc:	004014e5 	.word	0x004014e5
  401be0:	00402461 	.word	0x00402461
  401be4:	004022f1 	.word	0x004022f1
  401be8:	004027d9 	.word	0x004027d9
  401bec:	00401395 	.word	0x00401395
  401bf0:	004026a5 	.word	0x004026a5
  401bf4:	004010b5 	.word	0x004010b5
  401bf8:	004027c1 	.word	0x004027c1

00401bfc <xQueueSemaphoreTake>:
{
  401bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401c00:	b085      	sub	sp, #20
  401c02:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
  401c04:	b168      	cbz	r0, 401c22 <xQueueSemaphoreTake+0x26>
  401c06:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  401c08:	6c03      	ldr	r3, [r0, #64]	; 0x40
  401c0a:	b1ab      	cbz	r3, 401c38 <xQueueSemaphoreTake+0x3c>
  401c0c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c10:	b672      	cpsid	i
  401c12:	f383 8811 	msr	BASEPRI, r3
  401c16:	f3bf 8f6f 	isb	sy
  401c1a:	f3bf 8f4f 	dsb	sy
  401c1e:	b662      	cpsie	i
  401c20:	e7fe      	b.n	401c20 <xQueueSemaphoreTake+0x24>
  401c22:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c26:	b672      	cpsid	i
  401c28:	f383 8811 	msr	BASEPRI, r3
  401c2c:	f3bf 8f6f 	isb	sy
  401c30:	f3bf 8f4f 	dsb	sy
  401c34:	b662      	cpsie	i
  401c36:	e7fe      	b.n	401c36 <xQueueSemaphoreTake+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  401c38:	4b5e      	ldr	r3, [pc, #376]	; (401db4 <xQueueSemaphoreTake+0x1b8>)
  401c3a:	4798      	blx	r3
  401c3c:	b960      	cbnz	r0, 401c58 <xQueueSemaphoreTake+0x5c>
  401c3e:	9b01      	ldr	r3, [sp, #4]
  401c40:	b193      	cbz	r3, 401c68 <xQueueSemaphoreTake+0x6c>
  401c42:	f04f 0380 	mov.w	r3, #128	; 0x80
  401c46:	b672      	cpsid	i
  401c48:	f383 8811 	msr	BASEPRI, r3
  401c4c:	f3bf 8f6f 	isb	sy
  401c50:	f3bf 8f4f 	dsb	sy
  401c54:	b662      	cpsie	i
  401c56:	e7fe      	b.n	401c56 <xQueueSemaphoreTake+0x5a>
  401c58:	2500      	movs	r5, #0
  401c5a:	462f      	mov	r7, r5
		taskENTER_CRITICAL();
  401c5c:	4e56      	ldr	r6, [pc, #344]	; (401db8 <xQueueSemaphoreTake+0x1bc>)
					vTaskInternalSetTimeOutState( &xTimeOut );
  401c5e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 401dec <xQueueSemaphoreTake+0x1f0>
					portYIELD_WITHIN_API();
  401c62:	f8df 8160 	ldr.w	r8, [pc, #352]	; 401dc4 <xQueueSemaphoreTake+0x1c8>
  401c66:	e052      	b.n	401d0e <xQueueSemaphoreTake+0x112>
  401c68:	2500      	movs	r5, #0
  401c6a:	462f      	mov	r7, r5
  401c6c:	e7f6      	b.n	401c5c <xQueueSemaphoreTake+0x60>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
  401c6e:	3b01      	subs	r3, #1
  401c70:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401c72:	6823      	ldr	r3, [r4, #0]
  401c74:	b913      	cbnz	r3, 401c7c <xQueueSemaphoreTake+0x80>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  401c76:	4b51      	ldr	r3, [pc, #324]	; (401dbc <xQueueSemaphoreTake+0x1c0>)
  401c78:	4798      	blx	r3
  401c7a:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401c7c:	6923      	ldr	r3, [r4, #16]
  401c7e:	b163      	cbz	r3, 401c9a <xQueueSemaphoreTake+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  401c80:	f104 0010 	add.w	r0, r4, #16
  401c84:	4b4e      	ldr	r3, [pc, #312]	; (401dc0 <xQueueSemaphoreTake+0x1c4>)
  401c86:	4798      	blx	r3
  401c88:	b138      	cbz	r0, 401c9a <xQueueSemaphoreTake+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
  401c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401c8e:	4b4d      	ldr	r3, [pc, #308]	; (401dc4 <xQueueSemaphoreTake+0x1c8>)
  401c90:	601a      	str	r2, [r3, #0]
  401c92:	f3bf 8f4f 	dsb	sy
  401c96:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401c9a:	4b4b      	ldr	r3, [pc, #300]	; (401dc8 <xQueueSemaphoreTake+0x1cc>)
  401c9c:	4798      	blx	r3
				return pdPASS;
  401c9e:	2501      	movs	r5, #1
}
  401ca0:	4628      	mov	r0, r5
  401ca2:	b005      	add	sp, #20
  401ca4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
  401ca8:	b155      	cbz	r5, 401cc0 <xQueueSemaphoreTake+0xc4>
  401caa:	f04f 0380 	mov.w	r3, #128	; 0x80
  401cae:	b672      	cpsid	i
  401cb0:	f383 8811 	msr	BASEPRI, r3
  401cb4:	f3bf 8f6f 	isb	sy
  401cb8:	f3bf 8f4f 	dsb	sy
  401cbc:	b662      	cpsie	i
  401cbe:	e7fe      	b.n	401cbe <xQueueSemaphoreTake+0xc2>
					taskEXIT_CRITICAL();
  401cc0:	4b41      	ldr	r3, [pc, #260]	; (401dc8 <xQueueSemaphoreTake+0x1cc>)
  401cc2:	4798      	blx	r3
					return errQUEUE_EMPTY;
  401cc4:	e7ec      	b.n	401ca0 <xQueueSemaphoreTake+0xa4>
					vTaskInternalSetTimeOutState( &xTimeOut );
  401cc6:	a802      	add	r0, sp, #8
  401cc8:	47c8      	blx	r9
  401cca:	e029      	b.n	401d20 <xQueueSemaphoreTake+0x124>
		prvLockQueue( pxQueue );
  401ccc:	2300      	movs	r3, #0
  401cce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401cd2:	e030      	b.n	401d36 <xQueueSemaphoreTake+0x13a>
  401cd4:	2300      	movs	r3, #0
  401cd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401cda:	e032      	b.n	401d42 <xQueueSemaphoreTake+0x146>
						taskENTER_CRITICAL();
  401cdc:	47b0      	blx	r6
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  401cde:	6860      	ldr	r0, [r4, #4]
  401ce0:	4b3a      	ldr	r3, [pc, #232]	; (401dcc <xQueueSemaphoreTake+0x1d0>)
  401ce2:	4798      	blx	r3
  401ce4:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
  401ce6:	4b38      	ldr	r3, [pc, #224]	; (401dc8 <xQueueSemaphoreTake+0x1cc>)
  401ce8:	4798      	blx	r3
  401cea:	e03a      	b.n	401d62 <xQueueSemaphoreTake+0x166>
				prvUnlockQueue( pxQueue );
  401cec:	4620      	mov	r0, r4
  401cee:	4b38      	ldr	r3, [pc, #224]	; (401dd0 <xQueueSemaphoreTake+0x1d4>)
  401cf0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  401cf2:	4b38      	ldr	r3, [pc, #224]	; (401dd4 <xQueueSemaphoreTake+0x1d8>)
  401cf4:	4798      	blx	r3
  401cf6:	e009      	b.n	401d0c <xQueueSemaphoreTake+0x110>
			prvUnlockQueue( pxQueue );
  401cf8:	4620      	mov	r0, r4
  401cfa:	4b35      	ldr	r3, [pc, #212]	; (401dd0 <xQueueSemaphoreTake+0x1d4>)
  401cfc:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401cfe:	4b35      	ldr	r3, [pc, #212]	; (401dd4 <xQueueSemaphoreTake+0x1d8>)
  401d00:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401d02:	4620      	mov	r0, r4
  401d04:	4b34      	ldr	r3, [pc, #208]	; (401dd8 <xQueueSemaphoreTake+0x1dc>)
  401d06:	4798      	blx	r3
  401d08:	2800      	cmp	r0, #0
  401d0a:	d13f      	bne.n	401d8c <xQueueSemaphoreTake+0x190>
  401d0c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401d0e:	47b0      	blx	r6
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
  401d10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
  401d12:	2b00      	cmp	r3, #0
  401d14:	d1ab      	bne.n	401c6e <xQueueSemaphoreTake+0x72>
				if( xTicksToWait == ( TickType_t ) 0 )
  401d16:	9b01      	ldr	r3, [sp, #4]
  401d18:	2b00      	cmp	r3, #0
  401d1a:	d0c5      	beq.n	401ca8 <xQueueSemaphoreTake+0xac>
				else if( xEntryTimeSet == pdFALSE )
  401d1c:	2f00      	cmp	r7, #0
  401d1e:	d0d2      	beq.n	401cc6 <xQueueSemaphoreTake+0xca>
		taskEXIT_CRITICAL();
  401d20:	4b29      	ldr	r3, [pc, #164]	; (401dc8 <xQueueSemaphoreTake+0x1cc>)
  401d22:	4798      	blx	r3
		vTaskSuspendAll();
  401d24:	4b2d      	ldr	r3, [pc, #180]	; (401ddc <xQueueSemaphoreTake+0x1e0>)
  401d26:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401d28:	47b0      	blx	r6
  401d2a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401d2e:	b25b      	sxtb	r3, r3
  401d30:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d34:	d0ca      	beq.n	401ccc <xQueueSemaphoreTake+0xd0>
  401d36:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401d3a:	b25b      	sxtb	r3, r3
  401d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
  401d40:	d0c8      	beq.n	401cd4 <xQueueSemaphoreTake+0xd8>
  401d42:	4b21      	ldr	r3, [pc, #132]	; (401dc8 <xQueueSemaphoreTake+0x1cc>)
  401d44:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401d46:	a901      	add	r1, sp, #4
  401d48:	a802      	add	r0, sp, #8
  401d4a:	4b25      	ldr	r3, [pc, #148]	; (401de0 <xQueueSemaphoreTake+0x1e4>)
  401d4c:	4798      	blx	r3
  401d4e:	2800      	cmp	r0, #0
  401d50:	d1d2      	bne.n	401cf8 <xQueueSemaphoreTake+0xfc>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401d52:	4620      	mov	r0, r4
  401d54:	4b20      	ldr	r3, [pc, #128]	; (401dd8 <xQueueSemaphoreTake+0x1dc>)
  401d56:	4798      	blx	r3
  401d58:	2800      	cmp	r0, #0
  401d5a:	d0c7      	beq.n	401cec <xQueueSemaphoreTake+0xf0>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401d5c:	6823      	ldr	r3, [r4, #0]
  401d5e:	2b00      	cmp	r3, #0
  401d60:	d0bc      	beq.n	401cdc <xQueueSemaphoreTake+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401d62:	9901      	ldr	r1, [sp, #4]
  401d64:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401d68:	4b1e      	ldr	r3, [pc, #120]	; (401de4 <xQueueSemaphoreTake+0x1e8>)
  401d6a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401d6c:	4620      	mov	r0, r4
  401d6e:	4b18      	ldr	r3, [pc, #96]	; (401dd0 <xQueueSemaphoreTake+0x1d4>)
  401d70:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401d72:	4b18      	ldr	r3, [pc, #96]	; (401dd4 <xQueueSemaphoreTake+0x1d8>)
  401d74:	4798      	blx	r3
  401d76:	2800      	cmp	r0, #0
  401d78:	d1c8      	bne.n	401d0c <xQueueSemaphoreTake+0x110>
					portYIELD_WITHIN_API();
  401d7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401d7e:	f8c8 3000 	str.w	r3, [r8]
  401d82:	f3bf 8f4f 	dsb	sy
  401d86:	f3bf 8f6f 	isb	sy
  401d8a:	e7bf      	b.n	401d0c <xQueueSemaphoreTake+0x110>
					if( xInheritanceOccurred != pdFALSE )
  401d8c:	2d00      	cmp	r5, #0
  401d8e:	d087      	beq.n	401ca0 <xQueueSemaphoreTake+0xa4>
						taskENTER_CRITICAL();
  401d90:	4b09      	ldr	r3, [pc, #36]	; (401db8 <xQueueSemaphoreTake+0x1bc>)
  401d92:	4798      	blx	r3
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  401d94:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401d96:	b153      	cbz	r3, 401dae <xQueueSemaphoreTake+0x1b2>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
  401d98:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401d9a:	6819      	ldr	r1, [r3, #0]
  401d9c:	f1c1 0105 	rsb	r1, r1, #5
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
  401da0:	6860      	ldr	r0, [r4, #4]
  401da2:	4b11      	ldr	r3, [pc, #68]	; (401de8 <xQueueSemaphoreTake+0x1ec>)
  401da4:	4798      	blx	r3
						taskEXIT_CRITICAL();
  401da6:	4b08      	ldr	r3, [pc, #32]	; (401dc8 <xQueueSemaphoreTake+0x1cc>)
  401da8:	4798      	blx	r3
				return errQUEUE_EMPTY;
  401daa:	2500      	movs	r5, #0
  401dac:	e778      	b.n	401ca0 <xQueueSemaphoreTake+0xa4>
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  401dae:	2100      	movs	r1, #0
  401db0:	e7f6      	b.n	401da0 <xQueueSemaphoreTake+0x1a4>
  401db2:	bf00      	nop
  401db4:	00402a3d 	.word	0x00402a3d
  401db8:	004010b5 	.word	0x004010b5
  401dbc:	00402dcd 	.word	0x00402dcd
  401dc0:	00402729 	.word	0x00402729
  401dc4:	e000ed04 	.word	0xe000ed04
  401dc8:	00401101 	.word	0x00401101
  401dcc:	00402a5d 	.word	0x00402a5d
  401dd0:	004014e5 	.word	0x004014e5
  401dd4:	00402461 	.word	0x00402461
  401dd8:	00401395 	.word	0x00401395
  401ddc:	004022f1 	.word	0x004022f1
  401de0:	004027d9 	.word	0x004027d9
  401de4:	004026a5 	.word	0x004026a5
  401de8:	00402bd9 	.word	0x00402bd9
  401dec:	004027c1 	.word	0x004027c1

00401df0 <vQueueAddToRegistry>:
	{
  401df0:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401df2:	4b0b      	ldr	r3, [pc, #44]	; (401e20 <vQueueAddToRegistry+0x30>)
  401df4:	681b      	ldr	r3, [r3, #0]
  401df6:	b153      	cbz	r3, 401e0e <vQueueAddToRegistry+0x1e>
  401df8:	2301      	movs	r3, #1
  401dfa:	4c09      	ldr	r4, [pc, #36]	; (401e20 <vQueueAddToRegistry+0x30>)
  401dfc:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401e00:	b132      	cbz	r2, 401e10 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401e02:	3301      	adds	r3, #1
  401e04:	2b08      	cmp	r3, #8
  401e06:	d1f9      	bne.n	401dfc <vQueueAddToRegistry+0xc>
	}
  401e08:	f85d 4b04 	ldr.w	r4, [sp], #4
  401e0c:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401e0e:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401e10:	4a03      	ldr	r2, [pc, #12]	; (401e20 <vQueueAddToRegistry+0x30>)
  401e12:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401e16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401e1a:	6058      	str	r0, [r3, #4]
				break;
  401e1c:	e7f4      	b.n	401e08 <vQueueAddToRegistry+0x18>
  401e1e:	bf00      	nop
  401e20:	20400ce0 	.word	0x20400ce0

00401e24 <vQueueWaitForMessageRestricted>:
	{
  401e24:	b570      	push	{r4, r5, r6, lr}
  401e26:	4604      	mov	r4, r0
  401e28:	460d      	mov	r5, r1
  401e2a:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401e2c:	4b12      	ldr	r3, [pc, #72]	; (401e78 <vQueueWaitForMessageRestricted+0x54>)
  401e2e:	4798      	blx	r3
  401e30:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  401e34:	b25b      	sxtb	r3, r3
  401e36:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e3a:	d00d      	beq.n	401e58 <vQueueWaitForMessageRestricted+0x34>
  401e3c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
  401e40:	b25b      	sxtb	r3, r3
  401e42:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e46:	d00b      	beq.n	401e60 <vQueueWaitForMessageRestricted+0x3c>
  401e48:	4b0c      	ldr	r3, [pc, #48]	; (401e7c <vQueueWaitForMessageRestricted+0x58>)
  401e4a:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401e4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401e4e:	b15b      	cbz	r3, 401e68 <vQueueWaitForMessageRestricted+0x44>
		prvUnlockQueue( pxQueue );
  401e50:	4620      	mov	r0, r4
  401e52:	4b0b      	ldr	r3, [pc, #44]	; (401e80 <vQueueWaitForMessageRestricted+0x5c>)
  401e54:	4798      	blx	r3
  401e56:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401e58:	2300      	movs	r3, #0
  401e5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  401e5e:	e7ed      	b.n	401e3c <vQueueWaitForMessageRestricted+0x18>
  401e60:	2300      	movs	r3, #0
  401e62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  401e66:	e7ef      	b.n	401e48 <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401e68:	4632      	mov	r2, r6
  401e6a:	4629      	mov	r1, r5
  401e6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401e70:	4b04      	ldr	r3, [pc, #16]	; (401e84 <vQueueWaitForMessageRestricted+0x60>)
  401e72:	4798      	blx	r3
  401e74:	e7ec      	b.n	401e50 <vQueueWaitForMessageRestricted+0x2c>
  401e76:	bf00      	nop
  401e78:	004010b5 	.word	0x004010b5
  401e7c:	00401101 	.word	0x00401101
  401e80:	004014e5 	.word	0x004014e5
  401e84:	004026e1 	.word	0x004026e1

00401e88 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401e88:	4b08      	ldr	r3, [pc, #32]	; (401eac <prvResetNextTaskUnblockTime+0x24>)
  401e8a:	681b      	ldr	r3, [r3, #0]
  401e8c:	681b      	ldr	r3, [r3, #0]
  401e8e:	b13b      	cbz	r3, 401ea0 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401e90:	4b06      	ldr	r3, [pc, #24]	; (401eac <prvResetNextTaskUnblockTime+0x24>)
  401e92:	681b      	ldr	r3, [r3, #0]
  401e94:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
  401e96:	68db      	ldr	r3, [r3, #12]
  401e98:	685a      	ldr	r2, [r3, #4]
  401e9a:	4b05      	ldr	r3, [pc, #20]	; (401eb0 <prvResetNextTaskUnblockTime+0x28>)
  401e9c:	601a      	str	r2, [r3, #0]
  401e9e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401ea0:	f04f 32ff 	mov.w	r2, #4294967295
  401ea4:	4b02      	ldr	r3, [pc, #8]	; (401eb0 <prvResetNextTaskUnblockTime+0x28>)
  401ea6:	601a      	str	r2, [r3, #0]
  401ea8:	4770      	bx	lr
  401eaa:	bf00      	nop
  401eac:	20400a64 	.word	0x20400a64
  401eb0:	20400b14 	.word	0x20400b14

00401eb4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
  401eb4:	b570      	push	{r4, r5, r6, lr}
  401eb6:	4604      	mov	r4, r0
  401eb8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
  401eba:	4b1c      	ldr	r3, [pc, #112]	; (401f2c <prvAddCurrentTaskToDelayedList+0x78>)
  401ebc:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  401ebe:	4b1c      	ldr	r3, [pc, #112]	; (401f30 <prvAddCurrentTaskToDelayedList+0x7c>)
  401ec0:	6818      	ldr	r0, [r3, #0]
  401ec2:	3004      	adds	r0, #4
  401ec4:	4b1b      	ldr	r3, [pc, #108]	; (401f34 <prvAddCurrentTaskToDelayedList+0x80>)
  401ec6:	4798      	blx	r3
  401ec8:	b948      	cbnz	r0, 401ede <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  401eca:	4b19      	ldr	r3, [pc, #100]	; (401f30 <prvAddCurrentTaskToDelayedList+0x7c>)
  401ecc:	681a      	ldr	r2, [r3, #0]
  401ece:	491a      	ldr	r1, [pc, #104]	; (401f38 <prvAddCurrentTaskToDelayedList+0x84>)
  401ed0:	680b      	ldr	r3, [r1, #0]
  401ed2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  401ed4:	2201      	movs	r2, #1
  401ed6:	4082      	lsls	r2, r0
  401ed8:	ea23 0302 	bic.w	r3, r3, r2
  401edc:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
  401ede:	f1b4 3fff 	cmp.w	r4, #4294967295
  401ee2:	d100      	bne.n	401ee6 <prvAddCurrentTaskToDelayedList+0x32>
  401ee4:	b99e      	cbnz	r6, 401f0e <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
  401ee6:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
  401ee8:	4b11      	ldr	r3, [pc, #68]	; (401f30 <prvAddCurrentTaskToDelayedList+0x7c>)
  401eea:	681b      	ldr	r3, [r3, #0]
  401eec:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
  401eee:	42a5      	cmp	r5, r4
  401ef0:	d814      	bhi.n	401f1c <prvAddCurrentTaskToDelayedList+0x68>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401ef2:	4b12      	ldr	r3, [pc, #72]	; (401f3c <prvAddCurrentTaskToDelayedList+0x88>)
  401ef4:	6818      	ldr	r0, [r3, #0]
  401ef6:	4b0e      	ldr	r3, [pc, #56]	; (401f30 <prvAddCurrentTaskToDelayedList+0x7c>)
  401ef8:	6819      	ldr	r1, [r3, #0]
  401efa:	3104      	adds	r1, #4
  401efc:	4b10      	ldr	r3, [pc, #64]	; (401f40 <prvAddCurrentTaskToDelayedList+0x8c>)
  401efe:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
  401f00:	4b10      	ldr	r3, [pc, #64]	; (401f44 <prvAddCurrentTaskToDelayedList+0x90>)
  401f02:	681b      	ldr	r3, [r3, #0]
  401f04:	429c      	cmp	r4, r3
  401f06:	d201      	bcs.n	401f0c <prvAddCurrentTaskToDelayedList+0x58>
				{
					xNextTaskUnblockTime = xTimeToWake;
  401f08:	4b0e      	ldr	r3, [pc, #56]	; (401f44 <prvAddCurrentTaskToDelayedList+0x90>)
  401f0a:	601c      	str	r4, [r3, #0]
  401f0c:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401f0e:	4b08      	ldr	r3, [pc, #32]	; (401f30 <prvAddCurrentTaskToDelayedList+0x7c>)
  401f10:	6819      	ldr	r1, [r3, #0]
  401f12:	3104      	adds	r1, #4
  401f14:	480c      	ldr	r0, [pc, #48]	; (401f48 <prvAddCurrentTaskToDelayedList+0x94>)
  401f16:	4b0d      	ldr	r3, [pc, #52]	; (401f4c <prvAddCurrentTaskToDelayedList+0x98>)
  401f18:	4798      	blx	r3
  401f1a:	bd70      	pop	{r4, r5, r6, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
  401f1c:	4b0c      	ldr	r3, [pc, #48]	; (401f50 <prvAddCurrentTaskToDelayedList+0x9c>)
  401f1e:	6818      	ldr	r0, [r3, #0]
  401f20:	4b03      	ldr	r3, [pc, #12]	; (401f30 <prvAddCurrentTaskToDelayedList+0x7c>)
  401f22:	6819      	ldr	r1, [r3, #0]
  401f24:	3104      	adds	r1, #4
  401f26:	4b06      	ldr	r3, [pc, #24]	; (401f40 <prvAddCurrentTaskToDelayedList+0x8c>)
  401f28:	4798      	blx	r3
  401f2a:	bd70      	pop	{r4, r5, r6, pc}
  401f2c:	20400b5c 	.word	0x20400b5c
  401f30:	20400a60 	.word	0x20400a60
  401f34:	00400fad 	.word	0x00400fad
  401f38:	20400ae4 	.word	0x20400ae4
  401f3c:	20400a64 	.word	0x20400a64
  401f40:	00400f79 	.word	0x00400f79
  401f44:	20400b14 	.word	0x20400b14
  401f48:	20400b34 	.word	0x20400b34
  401f4c:	00400f61 	.word	0x00400f61
  401f50:	20400a68 	.word	0x20400a68

00401f54 <prvIdleTask>:
{
  401f54:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401f56:	4d18      	ldr	r5, [pc, #96]	; (401fb8 <prvIdleTask+0x64>)
			taskENTER_CRITICAL();
  401f58:	f8df 8078 	ldr.w	r8, [pc, #120]	; 401fd4 <prvIdleTask+0x80>
				taskYIELD();
  401f5c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 401fd8 <prvIdleTask+0x84>
  401f60:	e001      	b.n	401f66 <prvIdleTask+0x12>
			vApplicationIdleHook();
  401f62:	4b16      	ldr	r3, [pc, #88]	; (401fbc <prvIdleTask+0x68>)
  401f64:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401f66:	682b      	ldr	r3, [r5, #0]
  401f68:	b1c3      	cbz	r3, 401f9c <prvIdleTask+0x48>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401f6a:	4f15      	ldr	r7, [pc, #84]	; (401fc0 <prvIdleTask+0x6c>)
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401f6c:	4e15      	ldr	r6, [pc, #84]	; (401fc4 <prvIdleTask+0x70>)
			taskENTER_CRITICAL();
  401f6e:	47c0      	blx	r8
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  401f70:	68fb      	ldr	r3, [r7, #12]
  401f72:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  401f74:	1d20      	adds	r0, r4, #4
  401f76:	47b0      	blx	r6
				--uxCurrentNumberOfTasks;
  401f78:	4a13      	ldr	r2, [pc, #76]	; (401fc8 <prvIdleTask+0x74>)
  401f7a:	6813      	ldr	r3, [r2, #0]
  401f7c:	3b01      	subs	r3, #1
  401f7e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
  401f80:	682b      	ldr	r3, [r5, #0]
  401f82:	3b01      	subs	r3, #1
  401f84:	602b      	str	r3, [r5, #0]
			taskEXIT_CRITICAL();
  401f86:	4b11      	ldr	r3, [pc, #68]	; (401fcc <prvIdleTask+0x78>)
  401f88:	4798      	blx	r3
			vPortFree( pxTCB->pxStack );
  401f8a:	6b20      	ldr	r0, [r4, #48]	; 0x30
  401f8c:	f8df a04c 	ldr.w	sl, [pc, #76]	; 401fdc <prvIdleTask+0x88>
  401f90:	47d0      	blx	sl
			vPortFree( pxTCB );
  401f92:	4620      	mov	r0, r4
  401f94:	47d0      	blx	sl
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
  401f96:	682b      	ldr	r3, [r5, #0]
  401f98:	2b00      	cmp	r3, #0
  401f9a:	d1e8      	bne.n	401f6e <prvIdleTask+0x1a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  401f9c:	4b0c      	ldr	r3, [pc, #48]	; (401fd0 <prvIdleTask+0x7c>)
  401f9e:	681b      	ldr	r3, [r3, #0]
  401fa0:	2b01      	cmp	r3, #1
  401fa2:	d9de      	bls.n	401f62 <prvIdleTask+0xe>
				taskYIELD();
  401fa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401fa8:	f8c9 3000 	str.w	r3, [r9]
  401fac:	f3bf 8f4f 	dsb	sy
  401fb0:	f3bf 8f6f 	isb	sy
  401fb4:	e7d5      	b.n	401f62 <prvIdleTask+0xe>
  401fb6:	bf00      	nop
  401fb8:	20400ad4 	.word	0x20400ad4
  401fbc:	004038b9 	.word	0x004038b9
  401fc0:	20400b48 	.word	0x20400b48
  401fc4:	00400fad 	.word	0x00400fad
  401fc8:	20400ad0 	.word	0x20400ad0
  401fcc:	00401101 	.word	0x00401101
  401fd0:	20400a6c 	.word	0x20400a6c
  401fd4:	004010b5 	.word	0x004010b5
  401fd8:	e000ed04 	.word	0xe000ed04
  401fdc:	00401371 	.word	0x00401371

00401fe0 <xTaskCreate>:
	{
  401fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401fe4:	b083      	sub	sp, #12
  401fe6:	4683      	mov	fp, r0
  401fe8:	460d      	mov	r5, r1
  401fea:	9301      	str	r3, [sp, #4]
  401fec:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401ff0:	0096      	lsls	r6, r2, #2
  401ff2:	4630      	mov	r0, r6
  401ff4:	4b60      	ldr	r3, [pc, #384]	; (402178 <xTaskCreate+0x198>)
  401ff6:	4798      	blx	r3
			if( pxStack != NULL )
  401ff8:	2800      	cmp	r0, #0
  401ffa:	f000 808d 	beq.w	402118 <xTaskCreate+0x138>
  401ffe:	4607      	mov	r7, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
  402000:	2058      	movs	r0, #88	; 0x58
  402002:	4b5d      	ldr	r3, [pc, #372]	; (402178 <xTaskCreate+0x198>)
  402004:	4798      	blx	r3
				if( pxNewTCB != NULL )
  402006:	4604      	mov	r4, r0
  402008:	2800      	cmp	r0, #0
  40200a:	f000 8082 	beq.w	402112 <xTaskCreate+0x132>
					pxNewTCB->pxStack = pxStack;
  40200e:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
  402010:	4632      	mov	r2, r6
  402012:	21a5      	movs	r1, #165	; 0xa5
  402014:	4638      	mov	r0, r7
  402016:	4b59      	ldr	r3, [pc, #356]	; (40217c <xTaskCreate+0x19c>)
  402018:	4798      	blx	r3
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
  40201a:	3e04      	subs	r6, #4
  40201c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  40201e:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402020:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  402024:	782b      	ldrb	r3, [r5, #0]
  402026:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  40202a:	782b      	ldrb	r3, [r5, #0]
  40202c:	b163      	cbz	r3, 402048 <xTaskCreate+0x68>
  40202e:	462b      	mov	r3, r5
  402030:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402034:	f105 0109 	add.w	r1, r5, #9
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
  402038:	7858      	ldrb	r0, [r3, #1]
  40203a:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  40203e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
  402042:	b108      	cbz	r0, 402048 <xTaskCreate+0x68>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402044:	428b      	cmp	r3, r1
  402046:	d1f7      	bne.n	402038 <xTaskCreate+0x58>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402048:	2700      	movs	r7, #0
  40204a:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  40204e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402050:	2d04      	cmp	r5, #4
  402052:	bf28      	it	cs
  402054:	2504      	movcs	r5, #4
	pxNewTCB->uxPriority = uxPriority;
  402056:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
  402058:	64a5      	str	r5, [r4, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
  40205a:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
  40205c:	f104 0804 	add.w	r8, r4, #4
  402060:	4640      	mov	r0, r8
  402062:	f8df 916c 	ldr.w	r9, [pc, #364]	; 4021d0 <xTaskCreate+0x1f0>
  402066:	47c8      	blx	r9
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
  402068:	f104 0018 	add.w	r0, r4, #24
  40206c:	47c8      	blx	r9
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
  40206e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402070:	f1c5 0505 	rsb	r5, r5, #5
  402074:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
  402076:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
  402078:	6527      	str	r7, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
  40207a:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  40207e:	9a01      	ldr	r2, [sp, #4]
  402080:	4659      	mov	r1, fp
  402082:	4630      	mov	r0, r6
  402084:	4b3e      	ldr	r3, [pc, #248]	; (402180 <xTaskCreate+0x1a0>)
  402086:	4798      	blx	r3
  402088:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
  40208a:	f1ba 0f00 	cmp.w	sl, #0
  40208e:	d001      	beq.n	402094 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  402090:	f8ca 4000 	str.w	r4, [sl]
	taskENTER_CRITICAL();
  402094:	4b3b      	ldr	r3, [pc, #236]	; (402184 <xTaskCreate+0x1a4>)
  402096:	4798      	blx	r3
		uxCurrentNumberOfTasks++;
  402098:	4a3b      	ldr	r2, [pc, #236]	; (402188 <xTaskCreate+0x1a8>)
  40209a:	6813      	ldr	r3, [r2, #0]
  40209c:	3301      	adds	r3, #1
  40209e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
  4020a0:	4b3a      	ldr	r3, [pc, #232]	; (40218c <xTaskCreate+0x1ac>)
  4020a2:	681b      	ldr	r3, [r3, #0]
  4020a4:	2b00      	cmp	r3, #0
  4020a6:	d03a      	beq.n	40211e <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
  4020a8:	4b39      	ldr	r3, [pc, #228]	; (402190 <xTaskCreate+0x1b0>)
  4020aa:	681b      	ldr	r3, [r3, #0]
  4020ac:	b93b      	cbnz	r3, 4020be <xTaskCreate+0xde>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
  4020ae:	4b37      	ldr	r3, [pc, #220]	; (40218c <xTaskCreate+0x1ac>)
  4020b0:	681b      	ldr	r3, [r3, #0]
  4020b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4020b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4020b6:	429a      	cmp	r2, r3
  4020b8:	d801      	bhi.n	4020be <xTaskCreate+0xde>
					pxCurrentTCB = pxNewTCB;
  4020ba:	4b34      	ldr	r3, [pc, #208]	; (40218c <xTaskCreate+0x1ac>)
  4020bc:	601c      	str	r4, [r3, #0]
		uxTaskNumber++;
  4020be:	4a35      	ldr	r2, [pc, #212]	; (402194 <xTaskCreate+0x1b4>)
  4020c0:	6813      	ldr	r3, [r2, #0]
  4020c2:	3301      	adds	r3, #1
  4020c4:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
  4020c6:	6423      	str	r3, [r4, #64]	; 0x40
		prvAddTaskToReadyList( pxNewTCB );
  4020c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4020ca:	4a33      	ldr	r2, [pc, #204]	; (402198 <xTaskCreate+0x1b8>)
  4020cc:	6811      	ldr	r1, [r2, #0]
  4020ce:	2301      	movs	r3, #1
  4020d0:	4083      	lsls	r3, r0
  4020d2:	430b      	orrs	r3, r1
  4020d4:	6013      	str	r3, [r2, #0]
  4020d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4020da:	4641      	mov	r1, r8
  4020dc:	4b2f      	ldr	r3, [pc, #188]	; (40219c <xTaskCreate+0x1bc>)
  4020de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4020e2:	4b2f      	ldr	r3, [pc, #188]	; (4021a0 <xTaskCreate+0x1c0>)
  4020e4:	4798      	blx	r3
	taskEXIT_CRITICAL();
  4020e6:	4b2f      	ldr	r3, [pc, #188]	; (4021a4 <xTaskCreate+0x1c4>)
  4020e8:	4798      	blx	r3
	if( xSchedulerRunning != pdFALSE )
  4020ea:	4b29      	ldr	r3, [pc, #164]	; (402190 <xTaskCreate+0x1b0>)
  4020ec:	681b      	ldr	r3, [r3, #0]
  4020ee:	2b00      	cmp	r3, #0
  4020f0:	d03b      	beq.n	40216a <xTaskCreate+0x18a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
  4020f2:	4b26      	ldr	r3, [pc, #152]	; (40218c <xTaskCreate+0x1ac>)
  4020f4:	681b      	ldr	r3, [r3, #0]
  4020f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  4020f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4020fa:	429a      	cmp	r2, r3
  4020fc:	d239      	bcs.n	402172 <xTaskCreate+0x192>
			taskYIELD_IF_USING_PREEMPTION();
  4020fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402102:	4b29      	ldr	r3, [pc, #164]	; (4021a8 <xTaskCreate+0x1c8>)
  402104:	601a      	str	r2, [r3, #0]
  402106:	f3bf 8f4f 	dsb	sy
  40210a:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  40210e:	2001      	movs	r0, #1
  402110:	e02c      	b.n	40216c <xTaskCreate+0x18c>
					vPortFree( pxStack );
  402112:	4638      	mov	r0, r7
  402114:	4b25      	ldr	r3, [pc, #148]	; (4021ac <xTaskCreate+0x1cc>)
  402116:	4798      	blx	r3
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402118:	f04f 30ff 	mov.w	r0, #4294967295
  40211c:	e026      	b.n	40216c <xTaskCreate+0x18c>
			pxCurrentTCB = pxNewTCB;
  40211e:	4b1b      	ldr	r3, [pc, #108]	; (40218c <xTaskCreate+0x1ac>)
  402120:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  402122:	6813      	ldr	r3, [r2, #0]
  402124:	2b01      	cmp	r3, #1
  402126:	d1ca      	bne.n	4020be <xTaskCreate+0xde>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402128:	4e1c      	ldr	r6, [pc, #112]	; (40219c <xTaskCreate+0x1bc>)
  40212a:	4630      	mov	r0, r6
  40212c:	4d20      	ldr	r5, [pc, #128]	; (4021b0 <xTaskCreate+0x1d0>)
  40212e:	47a8      	blx	r5
  402130:	f106 0014 	add.w	r0, r6, #20
  402134:	47a8      	blx	r5
  402136:	f106 0028 	add.w	r0, r6, #40	; 0x28
  40213a:	47a8      	blx	r5
  40213c:	f106 003c 	add.w	r0, r6, #60	; 0x3c
  402140:	47a8      	blx	r5
  402142:	f106 0050 	add.w	r0, r6, #80	; 0x50
  402146:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList1 );
  402148:	4f1a      	ldr	r7, [pc, #104]	; (4021b4 <xTaskCreate+0x1d4>)
  40214a:	4638      	mov	r0, r7
  40214c:	47a8      	blx	r5
	vListInitialise( &xDelayedTaskList2 );
  40214e:	4e1a      	ldr	r6, [pc, #104]	; (4021b8 <xTaskCreate+0x1d8>)
  402150:	4630      	mov	r0, r6
  402152:	47a8      	blx	r5
	vListInitialise( &xPendingReadyList );
  402154:	4819      	ldr	r0, [pc, #100]	; (4021bc <xTaskCreate+0x1dc>)
  402156:	47a8      	blx	r5
		vListInitialise( &xTasksWaitingTermination );
  402158:	4819      	ldr	r0, [pc, #100]	; (4021c0 <xTaskCreate+0x1e0>)
  40215a:	47a8      	blx	r5
		vListInitialise( &xSuspendedTaskList );
  40215c:	4819      	ldr	r0, [pc, #100]	; (4021c4 <xTaskCreate+0x1e4>)
  40215e:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
  402160:	4b19      	ldr	r3, [pc, #100]	; (4021c8 <xTaskCreate+0x1e8>)
  402162:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402164:	4b19      	ldr	r3, [pc, #100]	; (4021cc <xTaskCreate+0x1ec>)
  402166:	601e      	str	r6, [r3, #0]
  402168:	e7a9      	b.n	4020be <xTaskCreate+0xde>
			xReturn = pdPASS;
  40216a:	2001      	movs	r0, #1
	}
  40216c:	b003      	add	sp, #12
  40216e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xReturn = pdPASS;
  402172:	2001      	movs	r0, #1
		return xReturn;
  402174:	e7fa      	b.n	40216c <xTaskCreate+0x18c>
  402176:	bf00      	nop
  402178:	00401341 	.word	0x00401341
  40217c:	00404275 	.word	0x00404275
  402180:	00401059 	.word	0x00401059
  402184:	004010b5 	.word	0x004010b5
  402188:	20400ad0 	.word	0x20400ad0
  40218c:	20400a60 	.word	0x20400a60
  402190:	20400b30 	.word	0x20400b30
  402194:	20400ae0 	.word	0x20400ae0
  402198:	20400ae4 	.word	0x20400ae4
  40219c:	20400a6c 	.word	0x20400a6c
  4021a0:	00400f61 	.word	0x00400f61
  4021a4:	00401101 	.word	0x00401101
  4021a8:	e000ed04 	.word	0xe000ed04
  4021ac:	00401371 	.word	0x00401371
  4021b0:	00400f45 	.word	0x00400f45
  4021b4:	20400ae8 	.word	0x20400ae8
  4021b8:	20400afc 	.word	0x20400afc
  4021bc:	20400b1c 	.word	0x20400b1c
  4021c0:	20400b48 	.word	0x20400b48
  4021c4:	20400b34 	.word	0x20400b34
  4021c8:	20400a64 	.word	0x20400a64
  4021cc:	20400a68 	.word	0x20400a68
  4021d0:	00400f5b 	.word	0x00400f5b

004021d4 <eTaskGetState>:
	{
  4021d4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxTCB );
  4021d6:	b1d0      	cbz	r0, 40220e <eTaskGetState+0x3a>
  4021d8:	4605      	mov	r5, r0
		if( pxTCB == pxCurrentTCB )
  4021da:	4b19      	ldr	r3, [pc, #100]	; (402240 <eTaskGetState+0x6c>)
  4021dc:	681b      	ldr	r3, [r3, #0]
  4021de:	4298      	cmp	r0, r3
  4021e0:	d026      	beq.n	402230 <eTaskGetState+0x5c>
			taskENTER_CRITICAL();
  4021e2:	4b18      	ldr	r3, [pc, #96]	; (402244 <eTaskGetState+0x70>)
  4021e4:	4798      	blx	r3
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
  4021e6:	696c      	ldr	r4, [r5, #20]
			taskEXIT_CRITICAL();
  4021e8:	4b17      	ldr	r3, [pc, #92]	; (402248 <eTaskGetState+0x74>)
  4021ea:	4798      	blx	r3
			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
  4021ec:	4b17      	ldr	r3, [pc, #92]	; (40224c <eTaskGetState+0x78>)
  4021ee:	681b      	ldr	r3, [r3, #0]
  4021f0:	429c      	cmp	r4, r3
  4021f2:	d01f      	beq.n	402234 <eTaskGetState+0x60>
  4021f4:	4b16      	ldr	r3, [pc, #88]	; (402250 <eTaskGetState+0x7c>)
  4021f6:	681b      	ldr	r3, [r3, #0]
  4021f8:	429c      	cmp	r4, r3
  4021fa:	d01d      	beq.n	402238 <eTaskGetState+0x64>
				else if( pxStateList == &xSuspendedTaskList )
  4021fc:	4b15      	ldr	r3, [pc, #84]	; (402254 <eTaskGetState+0x80>)
  4021fe:	429c      	cmp	r4, r3
  402200:	d010      	beq.n	402224 <eTaskGetState+0x50>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
  402202:	b1dc      	cbz	r4, 40223c <eTaskGetState+0x68>
  402204:	4b14      	ldr	r3, [pc, #80]	; (402258 <eTaskGetState+0x84>)
  402206:	429c      	cmp	r4, r3
  402208:	d018      	beq.n	40223c <eTaskGetState+0x68>
				eReturn = eReady;
  40220a:	2001      	movs	r0, #1
  40220c:	bd38      	pop	{r3, r4, r5, pc}
  40220e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402212:	b672      	cpsid	i
  402214:	f383 8811 	msr	BASEPRI, r3
  402218:	f3bf 8f6f 	isb	sy
  40221c:	f3bf 8f4f 	dsb	sy
  402220:	b662      	cpsie	i
  402222:	e7fe      	b.n	402222 <eTaskGetState+0x4e>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
  402224:	6aab      	ldr	r3, [r5, #40]	; 0x28
						eReturn = eBlocked;
  402226:	2b00      	cmp	r3, #0
  402228:	bf0c      	ite	eq
  40222a:	2003      	moveq	r0, #3
  40222c:	2002      	movne	r0, #2
  40222e:	bd38      	pop	{r3, r4, r5, pc}
			eReturn = eRunning;
  402230:	2000      	movs	r0, #0
  402232:	bd38      	pop	{r3, r4, r5, pc}
				eReturn = eBlocked;
  402234:	2002      	movs	r0, #2
  402236:	bd38      	pop	{r3, r4, r5, pc}
  402238:	2002      	movs	r0, #2
  40223a:	bd38      	pop	{r3, r4, r5, pc}
					eReturn = eDeleted;
  40223c:	2004      	movs	r0, #4
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  40223e:	bd38      	pop	{r3, r4, r5, pc}
  402240:	20400a60 	.word	0x20400a60
  402244:	004010b5 	.word	0x004010b5
  402248:	00401101 	.word	0x00401101
  40224c:	20400a64 	.word	0x20400a64
  402250:	20400a68 	.word	0x20400a68
  402254:	20400b34 	.word	0x20400b34
  402258:	20400b48 	.word	0x20400b48

0040225c <vTaskStartScheduler>:
{
  40225c:	b510      	push	{r4, lr}
  40225e:	b082      	sub	sp, #8
		xReturn = xTaskCreate(	prvIdleTask,
  402260:	4b1a      	ldr	r3, [pc, #104]	; (4022cc <vTaskStartScheduler+0x70>)
  402262:	9301      	str	r3, [sp, #4]
  402264:	2300      	movs	r3, #0
  402266:	9300      	str	r3, [sp, #0]
  402268:	2282      	movs	r2, #130	; 0x82
  40226a:	4919      	ldr	r1, [pc, #100]	; (4022d0 <vTaskStartScheduler+0x74>)
  40226c:	4819      	ldr	r0, [pc, #100]	; (4022d4 <vTaskStartScheduler+0x78>)
  40226e:	4c1a      	ldr	r4, [pc, #104]	; (4022d8 <vTaskStartScheduler+0x7c>)
  402270:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402272:	2801      	cmp	r0, #1
  402274:	d004      	beq.n	402280 <vTaskStartScheduler+0x24>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
  402276:	f1b0 3fff 	cmp.w	r0, #4294967295
  40227a:	d01c      	beq.n	4022b6 <vTaskStartScheduler+0x5a>
}
  40227c:	b002      	add	sp, #8
  40227e:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
  402280:	4b16      	ldr	r3, [pc, #88]	; (4022dc <vTaskStartScheduler+0x80>)
  402282:	4798      	blx	r3
	if( xReturn == pdPASS )
  402284:	2801      	cmp	r0, #1
  402286:	d1f6      	bne.n	402276 <vTaskStartScheduler+0x1a>
  402288:	f04f 0380 	mov.w	r3, #128	; 0x80
  40228c:	b672      	cpsid	i
  40228e:	f383 8811 	msr	BASEPRI, r3
  402292:	f3bf 8f6f 	isb	sy
  402296:	f3bf 8f4f 	dsb	sy
  40229a:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  40229c:	f04f 32ff 	mov.w	r2, #4294967295
  4022a0:	4b0f      	ldr	r3, [pc, #60]	; (4022e0 <vTaskStartScheduler+0x84>)
  4022a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  4022a4:	2201      	movs	r2, #1
  4022a6:	4b0f      	ldr	r3, [pc, #60]	; (4022e4 <vTaskStartScheduler+0x88>)
  4022a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  4022aa:	2200      	movs	r2, #0
  4022ac:	4b0e      	ldr	r3, [pc, #56]	; (4022e8 <vTaskStartScheduler+0x8c>)
  4022ae:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  4022b0:	4b0e      	ldr	r3, [pc, #56]	; (4022ec <vTaskStartScheduler+0x90>)
  4022b2:	4798      	blx	r3
  4022b4:	e7e2      	b.n	40227c <vTaskStartScheduler+0x20>
  4022b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022ba:	b672      	cpsid	i
  4022bc:	f383 8811 	msr	BASEPRI, r3
  4022c0:	f3bf 8f6f 	isb	sy
  4022c4:	f3bf 8f4f 	dsb	sy
  4022c8:	b662      	cpsie	i
  4022ca:	e7fe      	b.n	4022ca <vTaskStartScheduler+0x6e>
  4022cc:	20400b10 	.word	0x20400b10
  4022d0:	0040a058 	.word	0x0040a058
  4022d4:	00401f55 	.word	0x00401f55
  4022d8:	00401fe1 	.word	0x00401fe1
  4022dc:	00402ea5 	.word	0x00402ea5
  4022e0:	20400b14 	.word	0x20400b14
  4022e4:	20400b30 	.word	0x20400b30
  4022e8:	20400b5c 	.word	0x20400b5c
  4022ec:	004011f1 	.word	0x004011f1

004022f0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  4022f0:	4a02      	ldr	r2, [pc, #8]	; (4022fc <vTaskSuspendAll+0xc>)
  4022f2:	6813      	ldr	r3, [r2, #0]
  4022f4:	3301      	adds	r3, #1
  4022f6:	6013      	str	r3, [r2, #0]
  4022f8:	4770      	bx	lr
  4022fa:	bf00      	nop
  4022fc:	20400adc 	.word	0x20400adc

00402300 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402300:	4b01      	ldr	r3, [pc, #4]	; (402308 <xTaskGetTickCount+0x8>)
  402302:	6818      	ldr	r0, [r3, #0]
}
  402304:	4770      	bx	lr
  402306:	bf00      	nop
  402308:	20400b5c 	.word	0x20400b5c

0040230c <uxTaskGetNumberOfTasks>:
	return uxCurrentNumberOfTasks;
  40230c:	4b01      	ldr	r3, [pc, #4]	; (402314 <uxTaskGetNumberOfTasks+0x8>)
  40230e:	6818      	ldr	r0, [r3, #0]
}
  402310:	4770      	bx	lr
  402312:	bf00      	nop
  402314:	20400ad0 	.word	0x20400ad0

00402318 <xTaskIncrementTick>:
{
  402318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40231c:	4b41      	ldr	r3, [pc, #260]	; (402424 <xTaskIncrementTick+0x10c>)
  40231e:	681b      	ldr	r3, [r3, #0]
  402320:	2b00      	cmp	r3, #0
  402322:	d177      	bne.n	402414 <xTaskIncrementTick+0xfc>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
  402324:	4b40      	ldr	r3, [pc, #256]	; (402428 <xTaskIncrementTick+0x110>)
  402326:	681d      	ldr	r5, [r3, #0]
  402328:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
  40232a:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
  40232c:	b9d5      	cbnz	r5, 402364 <xTaskIncrementTick+0x4c>
			taskSWITCH_DELAYED_LISTS();
  40232e:	4b3f      	ldr	r3, [pc, #252]	; (40242c <xTaskIncrementTick+0x114>)
  402330:	681b      	ldr	r3, [r3, #0]
  402332:	681b      	ldr	r3, [r3, #0]
  402334:	b153      	cbz	r3, 40234c <xTaskIncrementTick+0x34>
  402336:	f04f 0380 	mov.w	r3, #128	; 0x80
  40233a:	b672      	cpsid	i
  40233c:	f383 8811 	msr	BASEPRI, r3
  402340:	f3bf 8f6f 	isb	sy
  402344:	f3bf 8f4f 	dsb	sy
  402348:	b662      	cpsie	i
  40234a:	e7fe      	b.n	40234a <xTaskIncrementTick+0x32>
  40234c:	4a37      	ldr	r2, [pc, #220]	; (40242c <xTaskIncrementTick+0x114>)
  40234e:	6811      	ldr	r1, [r2, #0]
  402350:	4b37      	ldr	r3, [pc, #220]	; (402430 <xTaskIncrementTick+0x118>)
  402352:	6818      	ldr	r0, [r3, #0]
  402354:	6010      	str	r0, [r2, #0]
  402356:	6019      	str	r1, [r3, #0]
  402358:	4a36      	ldr	r2, [pc, #216]	; (402434 <xTaskIncrementTick+0x11c>)
  40235a:	6813      	ldr	r3, [r2, #0]
  40235c:	3301      	adds	r3, #1
  40235e:	6013      	str	r3, [r2, #0]
  402360:	4b35      	ldr	r3, [pc, #212]	; (402438 <xTaskIncrementTick+0x120>)
  402362:	4798      	blx	r3
		if( xConstTickCount >= xNextTaskUnblockTime )
  402364:	4b35      	ldr	r3, [pc, #212]	; (40243c <xTaskIncrementTick+0x124>)
  402366:	681b      	ldr	r3, [r3, #0]
  402368:	429d      	cmp	r5, r3
  40236a:	d218      	bcs.n	40239e <xTaskIncrementTick+0x86>
BaseType_t xSwitchRequired = pdFALSE;
  40236c:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  40236e:	4b34      	ldr	r3, [pc, #208]	; (402440 <xTaskIncrementTick+0x128>)
  402370:	681b      	ldr	r3, [r3, #0]
  402372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402374:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402378:	009b      	lsls	r3, r3, #2
  40237a:	4a32      	ldr	r2, [pc, #200]	; (402444 <xTaskIncrementTick+0x12c>)
  40237c:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
  40237e:	2b02      	cmp	r3, #2
  402380:	bf28      	it	cs
  402382:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402384:	4b30      	ldr	r3, [pc, #192]	; (402448 <xTaskIncrementTick+0x130>)
  402386:	681b      	ldr	r3, [r3, #0]
  402388:	b90b      	cbnz	r3, 40238e <xTaskIncrementTick+0x76>
				vApplicationTickHook();
  40238a:	4b30      	ldr	r3, [pc, #192]	; (40244c <xTaskIncrementTick+0x134>)
  40238c:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  40238e:	4b30      	ldr	r3, [pc, #192]	; (402450 <xTaskIncrementTick+0x138>)
  402390:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402392:	2b00      	cmp	r3, #0
}
  402394:	bf0c      	ite	eq
  402396:	4620      	moveq	r0, r4
  402398:	2001      	movne	r0, #1
  40239a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40239e:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4023a0:	f8df 9088 	ldr.w	r9, [pc, #136]	; 40242c <xTaskIncrementTick+0x114>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4023a4:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 40245c <xTaskIncrementTick+0x144>
					prvAddTaskToReadyList( pxTCB );
  4023a8:	4f2a      	ldr	r7, [pc, #168]	; (402454 <xTaskIncrementTick+0x13c>)
  4023aa:	e01f      	b.n	4023ec <xTaskIncrementTick+0xd4>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4023ac:	f04f 32ff 	mov.w	r2, #4294967295
  4023b0:	4b22      	ldr	r3, [pc, #136]	; (40243c <xTaskIncrementTick+0x124>)
  4023b2:	601a      	str	r2, [r3, #0]
					break;
  4023b4:	e7db      	b.n	40236e <xTaskIncrementTick+0x56>
						xNextTaskUnblockTime = xItemValue;
  4023b6:	4a21      	ldr	r2, [pc, #132]	; (40243c <xTaskIncrementTick+0x124>)
  4023b8:	6013      	str	r3, [r2, #0]
						break;
  4023ba:	e7d8      	b.n	40236e <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4023bc:	f106 0018 	add.w	r0, r6, #24
  4023c0:	47c0      	blx	r8
					prvAddTaskToReadyList( pxTCB );
  4023c2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
  4023c4:	683a      	ldr	r2, [r7, #0]
  4023c6:	2301      	movs	r3, #1
  4023c8:	4083      	lsls	r3, r0
  4023ca:	4313      	orrs	r3, r2
  4023cc:	603b      	str	r3, [r7, #0]
  4023ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4023d2:	4651      	mov	r1, sl
  4023d4:	4b1b      	ldr	r3, [pc, #108]	; (402444 <xTaskIncrementTick+0x12c>)
  4023d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4023da:	4b1f      	ldr	r3, [pc, #124]	; (402458 <xTaskIncrementTick+0x140>)
  4023dc:	4798      	blx	r3
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4023de:	4b18      	ldr	r3, [pc, #96]	; (402440 <xTaskIncrementTick+0x128>)
  4023e0:	681b      	ldr	r3, [r3, #0]
  4023e2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
  4023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
  4023e6:	429a      	cmp	r2, r3
  4023e8:	bf28      	it	cs
  4023ea:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  4023ec:	f8d9 3000 	ldr.w	r3, [r9]
  4023f0:	681b      	ldr	r3, [r3, #0]
  4023f2:	2b00      	cmp	r3, #0
  4023f4:	d0da      	beq.n	4023ac <xTaskIncrementTick+0x94>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  4023f6:	f8d9 3000 	ldr.w	r3, [r9]
  4023fa:	68db      	ldr	r3, [r3, #12]
  4023fc:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
  4023fe:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
  402400:	429d      	cmp	r5, r3
  402402:	d3d8      	bcc.n	4023b6 <xTaskIncrementTick+0x9e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  402404:	f106 0a04 	add.w	sl, r6, #4
  402408:	4650      	mov	r0, sl
  40240a:	47c0      	blx	r8
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  40240c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  40240e:	2b00      	cmp	r3, #0
  402410:	d1d4      	bne.n	4023bc <xTaskIncrementTick+0xa4>
  402412:	e7d6      	b.n	4023c2 <xTaskIncrementTick+0xaa>
		++uxPendedTicks;
  402414:	4a0c      	ldr	r2, [pc, #48]	; (402448 <xTaskIncrementTick+0x130>)
  402416:	6813      	ldr	r3, [r2, #0]
  402418:	3301      	adds	r3, #1
  40241a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  40241c:	4b0b      	ldr	r3, [pc, #44]	; (40244c <xTaskIncrementTick+0x134>)
  40241e:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  402420:	2400      	movs	r4, #0
  402422:	e7b4      	b.n	40238e <xTaskIncrementTick+0x76>
  402424:	20400adc 	.word	0x20400adc
  402428:	20400b5c 	.word	0x20400b5c
  40242c:	20400a64 	.word	0x20400a64
  402430:	20400a68 	.word	0x20400a68
  402434:	20400b18 	.word	0x20400b18
  402438:	00401e89 	.word	0x00401e89
  40243c:	20400b14 	.word	0x20400b14
  402440:	20400a60 	.word	0x20400a60
  402444:	20400a6c 	.word	0x20400a6c
  402448:	20400ad8 	.word	0x20400ad8
  40244c:	004038c9 	.word	0x004038c9
  402450:	20400b60 	.word	0x20400b60
  402454:	20400ae4 	.word	0x20400ae4
  402458:	00400f61 	.word	0x00400f61
  40245c:	00400fad 	.word	0x00400fad

00402460 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
  402460:	4b36      	ldr	r3, [pc, #216]	; (40253c <xTaskResumeAll+0xdc>)
  402462:	681b      	ldr	r3, [r3, #0]
  402464:	b953      	cbnz	r3, 40247c <xTaskResumeAll+0x1c>
  402466:	f04f 0380 	mov.w	r3, #128	; 0x80
  40246a:	b672      	cpsid	i
  40246c:	f383 8811 	msr	BASEPRI, r3
  402470:	f3bf 8f6f 	isb	sy
  402474:	f3bf 8f4f 	dsb	sy
  402478:	b662      	cpsie	i
  40247a:	e7fe      	b.n	40247a <xTaskResumeAll+0x1a>
{
  40247c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
  402480:	4b2f      	ldr	r3, [pc, #188]	; (402540 <xTaskResumeAll+0xe0>)
  402482:	4798      	blx	r3
		--uxSchedulerSuspended;
  402484:	4b2d      	ldr	r3, [pc, #180]	; (40253c <xTaskResumeAll+0xdc>)
  402486:	681a      	ldr	r2, [r3, #0]
  402488:	3a01      	subs	r2, #1
  40248a:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40248c:	681b      	ldr	r3, [r3, #0]
  40248e:	2b00      	cmp	r3, #0
  402490:	d150      	bne.n	402534 <xTaskResumeAll+0xd4>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402492:	4b2c      	ldr	r3, [pc, #176]	; (402544 <xTaskResumeAll+0xe4>)
  402494:	681b      	ldr	r3, [r3, #0]
  402496:	b92b      	cbnz	r3, 4024a4 <xTaskResumeAll+0x44>
BaseType_t xAlreadyYielded = pdFALSE;
  402498:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  40249a:	4b2b      	ldr	r3, [pc, #172]	; (402548 <xTaskResumeAll+0xe8>)
  40249c:	4798      	blx	r3
}
  40249e:	4620      	mov	r0, r4
  4024a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4024a4:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4024a6:	4f29      	ldr	r7, [pc, #164]	; (40254c <xTaskResumeAll+0xec>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4024a8:	4e29      	ldr	r6, [pc, #164]	; (402550 <xTaskResumeAll+0xf0>)
					prvAddTaskToReadyList( pxTCB );
  4024aa:	4d2a      	ldr	r5, [pc, #168]	; (402554 <xTaskResumeAll+0xf4>)
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  4024ac:	683b      	ldr	r3, [r7, #0]
  4024ae:	b303      	cbz	r3, 4024f2 <xTaskResumeAll+0x92>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  4024b0:	68fb      	ldr	r3, [r7, #12]
  4024b2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  4024b4:	f104 0018 	add.w	r0, r4, #24
  4024b8:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
  4024ba:	f104 0804 	add.w	r8, r4, #4
  4024be:	4640      	mov	r0, r8
  4024c0:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  4024c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  4024c4:	682a      	ldr	r2, [r5, #0]
  4024c6:	2301      	movs	r3, #1
  4024c8:	4083      	lsls	r3, r0
  4024ca:	4313      	orrs	r3, r2
  4024cc:	602b      	str	r3, [r5, #0]
  4024ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4024d2:	4641      	mov	r1, r8
  4024d4:	4b20      	ldr	r3, [pc, #128]	; (402558 <xTaskResumeAll+0xf8>)
  4024d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4024da:	4b20      	ldr	r3, [pc, #128]	; (40255c <xTaskResumeAll+0xfc>)
  4024dc:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  4024de:	4b20      	ldr	r3, [pc, #128]	; (402560 <xTaskResumeAll+0x100>)
  4024e0:	681b      	ldr	r3, [r3, #0]
  4024e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4024e6:	429a      	cmp	r2, r3
  4024e8:	d3e0      	bcc.n	4024ac <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
  4024ea:	2201      	movs	r2, #1
  4024ec:	4b1d      	ldr	r3, [pc, #116]	; (402564 <xTaskResumeAll+0x104>)
  4024ee:	601a      	str	r2, [r3, #0]
  4024f0:	e7dc      	b.n	4024ac <xTaskResumeAll+0x4c>
				if( pxTCB != NULL )
  4024f2:	b10c      	cbz	r4, 4024f8 <xTaskResumeAll+0x98>
					prvResetNextTaskUnblockTime();
  4024f4:	4b1c      	ldr	r3, [pc, #112]	; (402568 <xTaskResumeAll+0x108>)
  4024f6:	4798      	blx	r3
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
  4024f8:	4b1c      	ldr	r3, [pc, #112]	; (40256c <xTaskResumeAll+0x10c>)
  4024fa:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
  4024fc:	b16c      	cbz	r4, 40251a <xTaskResumeAll+0xba>
							if( xTaskIncrementTick() != pdFALSE )
  4024fe:	4f1c      	ldr	r7, [pc, #112]	; (402570 <xTaskResumeAll+0x110>)
								xYieldPending = pdTRUE;
  402500:	4e18      	ldr	r6, [pc, #96]	; (402564 <xTaskResumeAll+0x104>)
  402502:	2501      	movs	r5, #1
  402504:	e001      	b.n	40250a <xTaskResumeAll+0xaa>
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
  402506:	3c01      	subs	r4, #1
  402508:	d004      	beq.n	402514 <xTaskResumeAll+0xb4>
							if( xTaskIncrementTick() != pdFALSE )
  40250a:	47b8      	blx	r7
  40250c:	2800      	cmp	r0, #0
  40250e:	d0fa      	beq.n	402506 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
  402510:	6035      	str	r5, [r6, #0]
  402512:	e7f8      	b.n	402506 <xTaskResumeAll+0xa6>
						uxPendedTicks = 0;
  402514:	2200      	movs	r2, #0
  402516:	4b15      	ldr	r3, [pc, #84]	; (40256c <xTaskResumeAll+0x10c>)
  402518:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
  40251a:	4b12      	ldr	r3, [pc, #72]	; (402564 <xTaskResumeAll+0x104>)
  40251c:	681b      	ldr	r3, [r3, #0]
  40251e:	b15b      	cbz	r3, 402538 <xTaskResumeAll+0xd8>
					taskYIELD_IF_USING_PREEMPTION();
  402520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402524:	4b13      	ldr	r3, [pc, #76]	; (402574 <xTaskResumeAll+0x114>)
  402526:	601a      	str	r2, [r3, #0]
  402528:	f3bf 8f4f 	dsb	sy
  40252c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  402530:	2401      	movs	r4, #1
  402532:	e7b2      	b.n	40249a <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
  402534:	2400      	movs	r4, #0
  402536:	e7b0      	b.n	40249a <xTaskResumeAll+0x3a>
  402538:	2400      	movs	r4, #0
  40253a:	e7ae      	b.n	40249a <xTaskResumeAll+0x3a>
  40253c:	20400adc 	.word	0x20400adc
  402540:	004010b5 	.word	0x004010b5
  402544:	20400ad0 	.word	0x20400ad0
  402548:	00401101 	.word	0x00401101
  40254c:	20400b1c 	.word	0x20400b1c
  402550:	00400fad 	.word	0x00400fad
  402554:	20400ae4 	.word	0x20400ae4
  402558:	20400a6c 	.word	0x20400a6c
  40255c:	00400f61 	.word	0x00400f61
  402560:	20400a60 	.word	0x20400a60
  402564:	20400b60 	.word	0x20400b60
  402568:	00401e89 	.word	0x00401e89
  40256c:	20400ad8 	.word	0x20400ad8
  402570:	00402319 	.word	0x00402319
  402574:	e000ed04 	.word	0xe000ed04

00402578 <vTaskDelay>:
	{
  402578:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  40257a:	b1b8      	cbz	r0, 4025ac <vTaskDelay+0x34>
  40257c:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  40257e:	4b10      	ldr	r3, [pc, #64]	; (4025c0 <vTaskDelay+0x48>)
  402580:	681b      	ldr	r3, [r3, #0]
  402582:	b153      	cbz	r3, 40259a <vTaskDelay+0x22>
  402584:	f04f 0380 	mov.w	r3, #128	; 0x80
  402588:	b672      	cpsid	i
  40258a:	f383 8811 	msr	BASEPRI, r3
  40258e:	f3bf 8f6f 	isb	sy
  402592:	f3bf 8f4f 	dsb	sy
  402596:	b662      	cpsie	i
  402598:	e7fe      	b.n	402598 <vTaskDelay+0x20>
			vTaskSuspendAll();
  40259a:	4b0a      	ldr	r3, [pc, #40]	; (4025c4 <vTaskDelay+0x4c>)
  40259c:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
  40259e:	2100      	movs	r1, #0
  4025a0:	4620      	mov	r0, r4
  4025a2:	4b09      	ldr	r3, [pc, #36]	; (4025c8 <vTaskDelay+0x50>)
  4025a4:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  4025a6:	4b09      	ldr	r3, [pc, #36]	; (4025cc <vTaskDelay+0x54>)
  4025a8:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  4025aa:	b938      	cbnz	r0, 4025bc <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
  4025ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4025b0:	4b07      	ldr	r3, [pc, #28]	; (4025d0 <vTaskDelay+0x58>)
  4025b2:	601a      	str	r2, [r3, #0]
  4025b4:	f3bf 8f4f 	dsb	sy
  4025b8:	f3bf 8f6f 	isb	sy
  4025bc:	bd10      	pop	{r4, pc}
  4025be:	bf00      	nop
  4025c0:	20400adc 	.word	0x20400adc
  4025c4:	004022f1 	.word	0x004022f1
  4025c8:	00401eb5 	.word	0x00401eb5
  4025cc:	00402461 	.word	0x00402461
  4025d0:	e000ed04 	.word	0xe000ed04

004025d4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  4025d4:	4b2d      	ldr	r3, [pc, #180]	; (40268c <vTaskSwitchContext+0xb8>)
  4025d6:	681b      	ldr	r3, [r3, #0]
  4025d8:	2b00      	cmp	r3, #0
  4025da:	d12c      	bne.n	402636 <vTaskSwitchContext+0x62>
{
  4025dc:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  4025de:	2200      	movs	r2, #0
  4025e0:	4b2b      	ldr	r3, [pc, #172]	; (402690 <vTaskSwitchContext+0xbc>)
  4025e2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  4025e4:	4b2b      	ldr	r3, [pc, #172]	; (402694 <vTaskSwitchContext+0xc0>)
  4025e6:	681b      	ldr	r3, [r3, #0]
  4025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4025ea:	681a      	ldr	r2, [r3, #0]
  4025ec:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4025f0:	d103      	bne.n	4025fa <vTaskSwitchContext+0x26>
  4025f2:	685a      	ldr	r2, [r3, #4]
  4025f4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4025f8:	d021      	beq.n	40263e <vTaskSwitchContext+0x6a>
  4025fa:	4b26      	ldr	r3, [pc, #152]	; (402694 <vTaskSwitchContext+0xc0>)
  4025fc:	6818      	ldr	r0, [r3, #0]
  4025fe:	6819      	ldr	r1, [r3, #0]
  402600:	3134      	adds	r1, #52	; 0x34
  402602:	4b25      	ldr	r3, [pc, #148]	; (402698 <vTaskSwitchContext+0xc4>)
  402604:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402606:	4b25      	ldr	r3, [pc, #148]	; (40269c <vTaskSwitchContext+0xc8>)
  402608:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
  40260a:	fab3 f383 	clz	r3, r3
  40260e:	b2db      	uxtb	r3, r3
  402610:	f1c3 031f 	rsb	r3, r3, #31
  402614:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  402618:	0092      	lsls	r2, r2, #2
  40261a:	4921      	ldr	r1, [pc, #132]	; (4026a0 <vTaskSwitchContext+0xcc>)
  40261c:	588a      	ldr	r2, [r1, r2]
  40261e:	b9ba      	cbnz	r2, 402650 <vTaskSwitchContext+0x7c>
	__asm volatile
  402620:	f04f 0380 	mov.w	r3, #128	; 0x80
  402624:	b672      	cpsid	i
  402626:	f383 8811 	msr	BASEPRI, r3
  40262a:	f3bf 8f6f 	isb	sy
  40262e:	f3bf 8f4f 	dsb	sy
  402632:	b662      	cpsie	i
  402634:	e7fe      	b.n	402634 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  402636:	2201      	movs	r2, #1
  402638:	4b15      	ldr	r3, [pc, #84]	; (402690 <vTaskSwitchContext+0xbc>)
  40263a:	601a      	str	r2, [r3, #0]
  40263c:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40263e:	689a      	ldr	r2, [r3, #8]
  402640:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  402644:	d1d9      	bne.n	4025fa <vTaskSwitchContext+0x26>
  402646:	68db      	ldr	r3, [r3, #12]
  402648:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  40264c:	d1d5      	bne.n	4025fa <vTaskSwitchContext+0x26>
  40264e:	e7da      	b.n	402606 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402650:	4a13      	ldr	r2, [pc, #76]	; (4026a0 <vTaskSwitchContext+0xcc>)
  402652:	0099      	lsls	r1, r3, #2
  402654:	18c8      	adds	r0, r1, r3
  402656:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  40265a:	6844      	ldr	r4, [r0, #4]
  40265c:	6864      	ldr	r4, [r4, #4]
  40265e:	6044      	str	r4, [r0, #4]
  402660:	4419      	add	r1, r3
  402662:	4602      	mov	r2, r0
  402664:	3208      	adds	r2, #8
  402666:	4294      	cmp	r4, r2
  402668:	d009      	beq.n	40267e <vTaskSwitchContext+0xaa>
  40266a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  40266e:	4a0c      	ldr	r2, [pc, #48]	; (4026a0 <vTaskSwitchContext+0xcc>)
  402670:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  402674:	685b      	ldr	r3, [r3, #4]
  402676:	68da      	ldr	r2, [r3, #12]
  402678:	4b06      	ldr	r3, [pc, #24]	; (402694 <vTaskSwitchContext+0xc0>)
  40267a:	601a      	str	r2, [r3, #0]
  40267c:	bd10      	pop	{r4, pc}
  40267e:	6860      	ldr	r0, [r4, #4]
  402680:	4a07      	ldr	r2, [pc, #28]	; (4026a0 <vTaskSwitchContext+0xcc>)
  402682:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  402686:	6050      	str	r0, [r2, #4]
  402688:	e7ef      	b.n	40266a <vTaskSwitchContext+0x96>
  40268a:	bf00      	nop
  40268c:	20400adc 	.word	0x20400adc
  402690:	20400b60 	.word	0x20400b60
  402694:	20400a60 	.word	0x20400a60
  402698:	004038a1 	.word	0x004038a1
  40269c:	20400ae4 	.word	0x20400ae4
  4026a0:	20400a6c 	.word	0x20400a6c

004026a4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
  4026a4:	b950      	cbnz	r0, 4026bc <vTaskPlaceOnEventList+0x18>
  4026a6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026aa:	b672      	cpsid	i
  4026ac:	f383 8811 	msr	BASEPRI, r3
  4026b0:	f3bf 8f6f 	isb	sy
  4026b4:	f3bf 8f4f 	dsb	sy
  4026b8:	b662      	cpsie	i
  4026ba:	e7fe      	b.n	4026ba <vTaskPlaceOnEventList+0x16>
{
  4026bc:	b510      	push	{r4, lr}
  4026be:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4026c0:	4b04      	ldr	r3, [pc, #16]	; (4026d4 <vTaskPlaceOnEventList+0x30>)
  4026c2:	6819      	ldr	r1, [r3, #0]
  4026c4:	3118      	adds	r1, #24
  4026c6:	4b04      	ldr	r3, [pc, #16]	; (4026d8 <vTaskPlaceOnEventList+0x34>)
  4026c8:	4798      	blx	r3
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
  4026ca:	2101      	movs	r1, #1
  4026cc:	4620      	mov	r0, r4
  4026ce:	4b03      	ldr	r3, [pc, #12]	; (4026dc <vTaskPlaceOnEventList+0x38>)
  4026d0:	4798      	blx	r3
  4026d2:	bd10      	pop	{r4, pc}
  4026d4:	20400a60 	.word	0x20400a60
  4026d8:	00400f79 	.word	0x00400f79
  4026dc:	00401eb5 	.word	0x00401eb5

004026e0 <vTaskPlaceOnEventListRestricted>:
	{
  4026e0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
  4026e2:	b178      	cbz	r0, 402704 <vTaskPlaceOnEventListRestricted+0x24>
  4026e4:	4614      	mov	r4, r2
  4026e6:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4026e8:	4b0c      	ldr	r3, [pc, #48]	; (40271c <vTaskPlaceOnEventListRestricted+0x3c>)
  4026ea:	6819      	ldr	r1, [r3, #0]
  4026ec:	3118      	adds	r1, #24
  4026ee:	4b0c      	ldr	r3, [pc, #48]	; (402720 <vTaskPlaceOnEventListRestricted+0x40>)
  4026f0:	4798      	blx	r3
			xTicksToWait = portMAX_DELAY;
  4026f2:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
  4026f4:	4621      	mov	r1, r4
  4026f6:	bf0c      	ite	eq
  4026f8:	4628      	moveq	r0, r5
  4026fa:	f04f 30ff 	movne.w	r0, #4294967295
  4026fe:	4b09      	ldr	r3, [pc, #36]	; (402724 <vTaskPlaceOnEventListRestricted+0x44>)
  402700:	4798      	blx	r3
  402702:	bd38      	pop	{r3, r4, r5, pc}
  402704:	f04f 0380 	mov.w	r3, #128	; 0x80
  402708:	b672      	cpsid	i
  40270a:	f383 8811 	msr	BASEPRI, r3
  40270e:	f3bf 8f6f 	isb	sy
  402712:	f3bf 8f4f 	dsb	sy
  402716:	b662      	cpsie	i
  402718:	e7fe      	b.n	402718 <vTaskPlaceOnEventListRestricted+0x38>
  40271a:	bf00      	nop
  40271c:	20400a60 	.word	0x20400a60
  402720:	00400f61 	.word	0x00400f61
  402724:	00401eb5 	.word	0x00401eb5

00402728 <xTaskRemoveFromEventList>:
{
  402728:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  40272a:	68c3      	ldr	r3, [r0, #12]
  40272c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  40272e:	b324      	cbz	r4, 40277a <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402730:	f104 0518 	add.w	r5, r4, #24
  402734:	4628      	mov	r0, r5
  402736:	4b1a      	ldr	r3, [pc, #104]	; (4027a0 <xTaskRemoveFromEventList+0x78>)
  402738:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  40273a:	4b1a      	ldr	r3, [pc, #104]	; (4027a4 <xTaskRemoveFromEventList+0x7c>)
  40273c:	681b      	ldr	r3, [r3, #0]
  40273e:	bb3b      	cbnz	r3, 402790 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
  402740:	1d25      	adds	r5, r4, #4
  402742:	4628      	mov	r0, r5
  402744:	4b16      	ldr	r3, [pc, #88]	; (4027a0 <xTaskRemoveFromEventList+0x78>)
  402746:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402748:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40274a:	4a17      	ldr	r2, [pc, #92]	; (4027a8 <xTaskRemoveFromEventList+0x80>)
  40274c:	6811      	ldr	r1, [r2, #0]
  40274e:	2301      	movs	r3, #1
  402750:	4083      	lsls	r3, r0
  402752:	430b      	orrs	r3, r1
  402754:	6013      	str	r3, [r2, #0]
  402756:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40275a:	4629      	mov	r1, r5
  40275c:	4b13      	ldr	r3, [pc, #76]	; (4027ac <xTaskRemoveFromEventList+0x84>)
  40275e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402762:	4b13      	ldr	r3, [pc, #76]	; (4027b0 <xTaskRemoveFromEventList+0x88>)
  402764:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  402766:	4b13      	ldr	r3, [pc, #76]	; (4027b4 <xTaskRemoveFromEventList+0x8c>)
  402768:	681b      	ldr	r3, [r3, #0]
  40276a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40276e:	429a      	cmp	r2, r3
  402770:	d913      	bls.n	40279a <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  402772:	2001      	movs	r0, #1
  402774:	4b10      	ldr	r3, [pc, #64]	; (4027b8 <xTaskRemoveFromEventList+0x90>)
  402776:	6018      	str	r0, [r3, #0]
  402778:	bd38      	pop	{r3, r4, r5, pc}
  40277a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40277e:	b672      	cpsid	i
  402780:	f383 8811 	msr	BASEPRI, r3
  402784:	f3bf 8f6f 	isb	sy
  402788:	f3bf 8f4f 	dsb	sy
  40278c:	b662      	cpsie	i
  40278e:	e7fe      	b.n	40278e <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  402790:	4629      	mov	r1, r5
  402792:	480a      	ldr	r0, [pc, #40]	; (4027bc <xTaskRemoveFromEventList+0x94>)
  402794:	4b06      	ldr	r3, [pc, #24]	; (4027b0 <xTaskRemoveFromEventList+0x88>)
  402796:	4798      	blx	r3
  402798:	e7e5      	b.n	402766 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  40279a:	2000      	movs	r0, #0
}
  40279c:	bd38      	pop	{r3, r4, r5, pc}
  40279e:	bf00      	nop
  4027a0:	00400fad 	.word	0x00400fad
  4027a4:	20400adc 	.word	0x20400adc
  4027a8:	20400ae4 	.word	0x20400ae4
  4027ac:	20400a6c 	.word	0x20400a6c
  4027b0:	00400f61 	.word	0x00400f61
  4027b4:	20400a60 	.word	0x20400a60
  4027b8:	20400b60 	.word	0x20400b60
  4027bc:	20400b1c 	.word	0x20400b1c

004027c0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4027c0:	4b03      	ldr	r3, [pc, #12]	; (4027d0 <vTaskInternalSetTimeOutState+0x10>)
  4027c2:	681b      	ldr	r3, [r3, #0]
  4027c4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  4027c6:	4b03      	ldr	r3, [pc, #12]	; (4027d4 <vTaskInternalSetTimeOutState+0x14>)
  4027c8:	681b      	ldr	r3, [r3, #0]
  4027ca:	6043      	str	r3, [r0, #4]
  4027cc:	4770      	bx	lr
  4027ce:	bf00      	nop
  4027d0:	20400b18 	.word	0x20400b18
  4027d4:	20400b5c 	.word	0x20400b5c

004027d8 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
  4027d8:	b1a8      	cbz	r0, 402806 <xTaskCheckForTimeOut+0x2e>
{
  4027da:	b570      	push	{r4, r5, r6, lr}
  4027dc:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
  4027de:	b1e9      	cbz	r1, 40281c <xTaskCheckForTimeOut+0x44>
  4027e0:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
  4027e2:	4b1d      	ldr	r3, [pc, #116]	; (402858 <xTaskCheckForTimeOut+0x80>)
  4027e4:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  4027e6:	4b1d      	ldr	r3, [pc, #116]	; (40285c <xTaskCheckForTimeOut+0x84>)
  4027e8:	681a      	ldr	r2, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  4027ea:	6869      	ldr	r1, [r5, #4]
			if( *pxTicksToWait == portMAX_DELAY )
  4027ec:	6823      	ldr	r3, [r4, #0]
  4027ee:	f1b3 3fff 	cmp.w	r3, #4294967295
  4027f2:	d02f      	beq.n	402854 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4027f4:	481a      	ldr	r0, [pc, #104]	; (402860 <xTaskCheckForTimeOut+0x88>)
  4027f6:	6800      	ldr	r0, [r0, #0]
  4027f8:	682e      	ldr	r6, [r5, #0]
  4027fa:	4286      	cmp	r6, r0
  4027fc:	d019      	beq.n	402832 <xTaskCheckForTimeOut+0x5a>
  4027fe:	428a      	cmp	r2, r1
  402800:	d317      	bcc.n	402832 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
  402802:	2401      	movs	r4, #1
  402804:	e01b      	b.n	40283e <xTaskCheckForTimeOut+0x66>
  402806:	f04f 0380 	mov.w	r3, #128	; 0x80
  40280a:	b672      	cpsid	i
  40280c:	f383 8811 	msr	BASEPRI, r3
  402810:	f3bf 8f6f 	isb	sy
  402814:	f3bf 8f4f 	dsb	sy
  402818:	b662      	cpsie	i
  40281a:	e7fe      	b.n	40281a <xTaskCheckForTimeOut+0x42>
  40281c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402820:	b672      	cpsid	i
  402822:	f383 8811 	msr	BASEPRI, r3
  402826:	f3bf 8f6f 	isb	sy
  40282a:	f3bf 8f4f 	dsb	sy
  40282e:	b662      	cpsie	i
  402830:	e7fe      	b.n	402830 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
  402832:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
  402834:	429a      	cmp	r2, r3
  402836:	d306      	bcc.n	402846 <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait = 0;
  402838:	2300      	movs	r3, #0
  40283a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
  40283c:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
  40283e:	4b09      	ldr	r3, [pc, #36]	; (402864 <xTaskCheckForTimeOut+0x8c>)
  402840:	4798      	blx	r3
}
  402842:	4620      	mov	r0, r4
  402844:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= xElapsedTime;
  402846:	1a9b      	subs	r3, r3, r2
  402848:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
  40284a:	4628      	mov	r0, r5
  40284c:	4b06      	ldr	r3, [pc, #24]	; (402868 <xTaskCheckForTimeOut+0x90>)
  40284e:	4798      	blx	r3
			xReturn = pdFALSE;
  402850:	2400      	movs	r4, #0
  402852:	e7f4      	b.n	40283e <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
  402854:	2400      	movs	r4, #0
  402856:	e7f2      	b.n	40283e <xTaskCheckForTimeOut+0x66>
  402858:	004010b5 	.word	0x004010b5
  40285c:	20400b5c 	.word	0x20400b5c
  402860:	20400b18 	.word	0x20400b18
  402864:	00401101 	.word	0x00401101
  402868:	004027c1 	.word	0x004027c1

0040286c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  40286c:	2201      	movs	r2, #1
  40286e:	4b01      	ldr	r3, [pc, #4]	; (402874 <vTaskMissedYield+0x8>)
  402870:	601a      	str	r2, [r3, #0]
  402872:	4770      	bx	lr
  402874:	20400b60 	.word	0x20400b60

00402878 <vTaskGetInfo>:
	{
  402878:	b570      	push	{r4, r5, r6, lr}
  40287a:	460d      	mov	r5, r1
  40287c:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
  40287e:	4604      	mov	r4, r0
  402880:	b1d0      	cbz	r0, 4028b8 <vTaskGetInfo+0x40>
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
  402882:	602c      	str	r4, [r5, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
  402884:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402888:	606a      	str	r2, [r5, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
  40288a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40288c:	612a      	str	r2, [r5, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
  40288e:	6b22      	ldr	r2, [r4, #48]	; 0x30
  402890:	61ea      	str	r2, [r5, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
  402892:	6c22      	ldr	r2, [r4, #64]	; 0x40
  402894:	60aa      	str	r2, [r5, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
  402896:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  402898:	616a      	str	r2, [r5, #20]
			pxTaskStatus->ulRunTimeCounter = 0;
  40289a:	2200      	movs	r2, #0
  40289c:	61aa      	str	r2, [r5, #24]
		if( eState != eInvalid )
  40289e:	2b05      	cmp	r3, #5
  4028a0:	d019      	beq.n	4028d6 <vTaskGetInfo+0x5e>
			if( pxTCB == pxCurrentTCB )
  4028a2:	4a17      	ldr	r2, [pc, #92]	; (402900 <vTaskGetInfo+0x88>)
  4028a4:	6812      	ldr	r2, [r2, #0]
  4028a6:	4294      	cmp	r4, r2
  4028a8:	d009      	beq.n	4028be <vTaskGetInfo+0x46>
				pxTaskStatus->eCurrentState = eState;
  4028aa:	732b      	strb	r3, [r5, #12]
					if( eState == eSuspended )
  4028ac:	2b03      	cmp	r3, #3
  4028ae:	d009      	beq.n	4028c4 <vTaskGetInfo+0x4c>
		if( xGetFreeStackSpace != pdFALSE )
  4028b0:	b9b6      	cbnz	r6, 4028e0 <vTaskGetInfo+0x68>
			pxTaskStatus->usStackHighWaterMark = 0;
  4028b2:	2300      	movs	r3, #0
  4028b4:	842b      	strh	r3, [r5, #32]
  4028b6:	bd70      	pop	{r4, r5, r6, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
  4028b8:	4a11      	ldr	r2, [pc, #68]	; (402900 <vTaskGetInfo+0x88>)
  4028ba:	6814      	ldr	r4, [r2, #0]
  4028bc:	e7e1      	b.n	402882 <vTaskGetInfo+0xa>
				pxTaskStatus->eCurrentState = eRunning;
  4028be:	2300      	movs	r3, #0
  4028c0:	732b      	strb	r3, [r5, #12]
  4028c2:	e7f5      	b.n	4028b0 <vTaskGetInfo+0x38>
						vTaskSuspendAll();
  4028c4:	4b0f      	ldr	r3, [pc, #60]	; (402904 <vTaskGetInfo+0x8c>)
  4028c6:	4798      	blx	r3
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  4028c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  4028ca:	b10b      	cbz	r3, 4028d0 <vTaskGetInfo+0x58>
								pxTaskStatus->eCurrentState = eBlocked;
  4028cc:	2302      	movs	r3, #2
  4028ce:	732b      	strb	r3, [r5, #12]
						( void ) xTaskResumeAll();
  4028d0:	4b0d      	ldr	r3, [pc, #52]	; (402908 <vTaskGetInfo+0x90>)
  4028d2:	4798      	blx	r3
  4028d4:	e7ec      	b.n	4028b0 <vTaskGetInfo+0x38>
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
  4028d6:	4620      	mov	r0, r4
  4028d8:	4b0c      	ldr	r3, [pc, #48]	; (40290c <vTaskGetInfo+0x94>)
  4028da:	4798      	blx	r3
  4028dc:	7328      	strb	r0, [r5, #12]
  4028de:	e7e7      	b.n	4028b0 <vTaskGetInfo+0x38>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
  4028e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
  4028e2:	7803      	ldrb	r3, [r0, #0]
  4028e4:	2ba5      	cmp	r3, #165	; 0xa5
  4028e6:	d108      	bne.n	4028fa <vTaskGetInfo+0x82>
  4028e8:	1c43      	adds	r3, r0, #1
  4028ea:	1a19      	subs	r1, r3, r0
  4028ec:	f813 2b01 	ldrb.w	r2, [r3], #1
  4028f0:	2aa5      	cmp	r2, #165	; 0xa5
  4028f2:	d0fa      	beq.n	4028ea <vTaskGetInfo+0x72>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
  4028f4:	0889      	lsrs	r1, r1, #2
		return ( uint16_t ) ulCount;
  4028f6:	8429      	strh	r1, [r5, #32]
  4028f8:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t ulCount = 0U;
  4028fa:	2100      	movs	r1, #0
  4028fc:	e7fa      	b.n	4028f4 <vTaskGetInfo+0x7c>
  4028fe:	bf00      	nop
  402900:	20400a60 	.word	0x20400a60
  402904:	004022f1 	.word	0x004022f1
  402908:	00402461 	.word	0x00402461
  40290c:	004021d5 	.word	0x004021d5

00402910 <prvListTasksWithinSingleList>:
	{
  402910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402914:	b083      	sub	sp, #12
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
  402916:	680b      	ldr	r3, [r1, #0]
  402918:	b343      	cbz	r3, 40296c <prvListTasksWithinSingleList+0x5c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  40291a:	684b      	ldr	r3, [r1, #4]
  40291c:	685b      	ldr	r3, [r3, #4]
  40291e:	604b      	str	r3, [r1, #4]
  402920:	f101 0808 	add.w	r8, r1, #8
  402924:	4543      	cmp	r3, r8
  402926:	d00b      	beq.n	402940 <prvListTasksWithinSingleList+0x30>
  402928:	9201      	str	r2, [sp, #4]
  40292a:	460c      	mov	r4, r1
  40292c:	684b      	ldr	r3, [r1, #4]
  40292e:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  402932:	4605      	mov	r5, r0
	UBaseType_t uxTask = 0;
  402934:	2700      	movs	r7, #0
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
  402936:	f04f 0a01 	mov.w	sl, #1
  40293a:	f8df 903c 	ldr.w	r9, [pc, #60]	; 402978 <prvListTasksWithinSingleList+0x68>
  40293e:	e00d      	b.n	40295c <prvListTasksWithinSingleList+0x4c>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
  402940:	68cb      	ldr	r3, [r1, #12]
  402942:	604b      	str	r3, [r1, #4]
  402944:	e7f0      	b.n	402928 <prvListTasksWithinSingleList+0x18>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  402946:	6863      	ldr	r3, [r4, #4]
  402948:	68de      	ldr	r6, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
  40294a:	9b01      	ldr	r3, [sp, #4]
  40294c:	4652      	mov	r2, sl
  40294e:	4629      	mov	r1, r5
  402950:	4630      	mov	r0, r6
  402952:	47c8      	blx	r9
				uxTask++;
  402954:	3701      	adds	r7, #1
  402956:	3524      	adds	r5, #36	; 0x24
			} while( pxNextTCB != pxFirstTCB );
  402958:	45b3      	cmp	fp, r6
  40295a:	d008      	beq.n	40296e <prvListTasksWithinSingleList+0x5e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
  40295c:	6863      	ldr	r3, [r4, #4]
  40295e:	685b      	ldr	r3, [r3, #4]
  402960:	6063      	str	r3, [r4, #4]
  402962:	4598      	cmp	r8, r3
  402964:	d1ef      	bne.n	402946 <prvListTasksWithinSingleList+0x36>
  402966:	68e3      	ldr	r3, [r4, #12]
  402968:	6063      	str	r3, [r4, #4]
  40296a:	e7ec      	b.n	402946 <prvListTasksWithinSingleList+0x36>
	UBaseType_t uxTask = 0;
  40296c:	2700      	movs	r7, #0
	}
  40296e:	4638      	mov	r0, r7
  402970:	b003      	add	sp, #12
  402972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402976:	bf00      	nop
  402978:	00402879 	.word	0x00402879

0040297c <uxTaskGetSystemState>:
	{
  40297c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402980:	4606      	mov	r6, r0
  402982:	460c      	mov	r4, r1
  402984:	4617      	mov	r7, r2
		vTaskSuspendAll();
  402986:	4b24      	ldr	r3, [pc, #144]	; (402a18 <uxTaskGetSystemState+0x9c>)
  402988:	4798      	blx	r3
			if( uxArraySize >= uxCurrentNumberOfTasks )
  40298a:	4b24      	ldr	r3, [pc, #144]	; (402a1c <uxTaskGetSystemState+0xa0>)
  40298c:	681b      	ldr	r3, [r3, #0]
  40298e:	42a3      	cmp	r3, r4
  402990:	d83f      	bhi.n	402a12 <uxTaskGetSystemState+0x96>
  402992:	4b23      	ldr	r3, [pc, #140]	; (402a20 <uxTaskGetSystemState+0xa4>)
  402994:	f103 0550 	add.w	r5, r3, #80	; 0x50
  402998:	f1a3 0814 	sub.w	r8, r3, #20
  40299c:	2400      	movs	r4, #0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
  40299e:	f04f 0a01 	mov.w	sl, #1
  4029a2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402a28 <uxTaskGetSystemState+0xac>
  4029a6:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4029aa:	4652      	mov	r2, sl
  4029ac:	4629      	mov	r1, r5
  4029ae:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4029b2:	47c8      	blx	r9
  4029b4:	4404      	add	r4, r0
  4029b6:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4029b8:	4545      	cmp	r5, r8
  4029ba:	d1f4      	bne.n	4029a6 <uxTaskGetSystemState+0x2a>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
  4029bc:	4b19      	ldr	r3, [pc, #100]	; (402a24 <uxTaskGetSystemState+0xa8>)
  4029be:	6819      	ldr	r1, [r3, #0]
  4029c0:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4029c4:	2202      	movs	r2, #2
  4029c6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4029ca:	4d17      	ldr	r5, [pc, #92]	; (402a28 <uxTaskGetSystemState+0xac>)
  4029cc:	47a8      	blx	r5
  4029ce:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
  4029d0:	4b16      	ldr	r3, [pc, #88]	; (402a2c <uxTaskGetSystemState+0xb0>)
  4029d2:	6819      	ldr	r1, [r3, #0]
  4029d4:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4029d8:	2202      	movs	r2, #2
  4029da:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4029de:	47a8      	blx	r5
  4029e0:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
  4029e2:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4029e6:	2204      	movs	r2, #4
  4029e8:	4911      	ldr	r1, [pc, #68]	; (402a30 <uxTaskGetSystemState+0xb4>)
  4029ea:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4029ee:	47a8      	blx	r5
  4029f0:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
  4029f2:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
  4029f6:	2203      	movs	r2, #3
  4029f8:	490e      	ldr	r1, [pc, #56]	; (402a34 <uxTaskGetSystemState+0xb8>)
  4029fa:	eb06 0080 	add.w	r0, r6, r0, lsl #2
  4029fe:	47a8      	blx	r5
  402a00:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
  402a02:	b10f      	cbz	r7, 402a08 <uxTaskGetSystemState+0x8c>
						*pulTotalRunTime = 0;
  402a04:	2300      	movs	r3, #0
  402a06:	603b      	str	r3, [r7, #0]
		( void ) xTaskResumeAll();
  402a08:	4b0b      	ldr	r3, [pc, #44]	; (402a38 <uxTaskGetSystemState+0xbc>)
  402a0a:	4798      	blx	r3
	}
  402a0c:	4620      	mov	r0, r4
  402a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
  402a12:	2400      	movs	r4, #0
  402a14:	e7f8      	b.n	402a08 <uxTaskGetSystemState+0x8c>
  402a16:	bf00      	nop
  402a18:	004022f1 	.word	0x004022f1
  402a1c:	20400ad0 	.word	0x20400ad0
  402a20:	20400a6c 	.word	0x20400a6c
  402a24:	20400a64 	.word	0x20400a64
  402a28:	00402911 	.word	0x00402911
  402a2c:	20400a68 	.word	0x20400a68
  402a30:	20400b48 	.word	0x20400b48
  402a34:	20400b34 	.word	0x20400b34
  402a38:	00402461 	.word	0x00402461

00402a3c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
  402a3c:	4b05      	ldr	r3, [pc, #20]	; (402a54 <xTaskGetSchedulerState+0x18>)
  402a3e:	681b      	ldr	r3, [r3, #0]
  402a40:	b133      	cbz	r3, 402a50 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402a42:	4b05      	ldr	r3, [pc, #20]	; (402a58 <xTaskGetSchedulerState+0x1c>)
  402a44:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
  402a46:	2b00      	cmp	r3, #0
  402a48:	bf0c      	ite	eq
  402a4a:	2002      	moveq	r0, #2
  402a4c:	2000      	movne	r0, #0
  402a4e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  402a50:	2001      	movs	r0, #1
	}
  402a52:	4770      	bx	lr
  402a54:	20400b30 	.word	0x20400b30
  402a58:	20400adc 	.word	0x20400adc

00402a5c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
  402a5c:	2800      	cmp	r0, #0
  402a5e:	d050      	beq.n	402b02 <xTaskPriorityInherit+0xa6>
	{
  402a60:	b538      	push	{r3, r4, r5, lr}
  402a62:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
  402a64:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  402a66:	4928      	ldr	r1, [pc, #160]	; (402b08 <xTaskPriorityInherit+0xac>)
  402a68:	6809      	ldr	r1, [r1, #0]
  402a6a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402a6c:	428a      	cmp	r2, r1
  402a6e:	d23f      	bcs.n	402af0 <xTaskPriorityInherit+0x94>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402a70:	6981      	ldr	r1, [r0, #24]
  402a72:	2900      	cmp	r1, #0
  402a74:	db05      	blt.n	402a82 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402a76:	4924      	ldr	r1, [pc, #144]	; (402b08 <xTaskPriorityInherit+0xac>)
  402a78:	6809      	ldr	r1, [r1, #0]
  402a7a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402a7c:	f1c1 0105 	rsb	r1, r1, #5
  402a80:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
  402a82:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402a86:	4921      	ldr	r1, [pc, #132]	; (402b0c <xTaskPriorityInherit+0xb0>)
  402a88:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402a8c:	6961      	ldr	r1, [r4, #20]
  402a8e:	4291      	cmp	r1, r2
  402a90:	d005      	beq.n	402a9e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  402a92:	4a1d      	ldr	r2, [pc, #116]	; (402b08 <xTaskPriorityInherit+0xac>)
  402a94:	6812      	ldr	r2, [r2, #0]
  402a96:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402a98:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
  402a9a:	2001      	movs	r0, #1
  402a9c:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402a9e:	1d25      	adds	r5, r4, #4
  402aa0:	4628      	mov	r0, r5
  402aa2:	4b1b      	ldr	r3, [pc, #108]	; (402b10 <xTaskPriorityInherit+0xb4>)
  402aa4:	4798      	blx	r3
  402aa6:	b970      	cbnz	r0, 402ac6 <xTaskPriorityInherit+0x6a>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
  402aa8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402aaa:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  402aae:	009b      	lsls	r3, r3, #2
  402ab0:	4916      	ldr	r1, [pc, #88]	; (402b0c <xTaskPriorityInherit+0xb0>)
  402ab2:	58cb      	ldr	r3, [r1, r3]
  402ab4:	b93b      	cbnz	r3, 402ac6 <xTaskPriorityInherit+0x6a>
  402ab6:	4817      	ldr	r0, [pc, #92]	; (402b14 <xTaskPriorityInherit+0xb8>)
  402ab8:	6803      	ldr	r3, [r0, #0]
  402aba:	2101      	movs	r1, #1
  402abc:	fa01 f202 	lsl.w	r2, r1, r2
  402ac0:	ea23 0202 	bic.w	r2, r3, r2
  402ac4:	6002      	str	r2, [r0, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
  402ac6:	4b10      	ldr	r3, [pc, #64]	; (402b08 <xTaskPriorityInherit+0xac>)
  402ac8:	681b      	ldr	r3, [r3, #0]
  402aca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402acc:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
  402ace:	4a11      	ldr	r2, [pc, #68]	; (402b14 <xTaskPriorityInherit+0xb8>)
  402ad0:	6811      	ldr	r1, [r2, #0]
  402ad2:	2401      	movs	r4, #1
  402ad4:	fa04 f300 	lsl.w	r3, r4, r0
  402ad8:	430b      	orrs	r3, r1
  402ada:	6013      	str	r3, [r2, #0]
  402adc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402ae0:	4629      	mov	r1, r5
  402ae2:	4b0a      	ldr	r3, [pc, #40]	; (402b0c <xTaskPriorityInherit+0xb0>)
  402ae4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402ae8:	4b0b      	ldr	r3, [pc, #44]	; (402b18 <xTaskPriorityInherit+0xbc>)
  402aea:	4798      	blx	r3
				xReturn = pdTRUE;
  402aec:	4620      	mov	r0, r4
  402aee:	bd38      	pop	{r3, r4, r5, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
  402af0:	4a05      	ldr	r2, [pc, #20]	; (402b08 <xTaskPriorityInherit+0xac>)
  402af2:	6812      	ldr	r2, [r2, #0]
  402af4:	6c80      	ldr	r0, [r0, #72]	; 0x48
  402af6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  402af8:	4298      	cmp	r0, r3
  402afa:	bf2c      	ite	cs
  402afc:	2000      	movcs	r0, #0
  402afe:	2001      	movcc	r0, #1
  402b00:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402b02:	2000      	movs	r0, #0
		return xReturn;
  402b04:	4770      	bx	lr
  402b06:	bf00      	nop
  402b08:	20400a60 	.word	0x20400a60
  402b0c:	20400a6c 	.word	0x20400a6c
  402b10:	00400fad 	.word	0x00400fad
  402b14:	20400ae4 	.word	0x20400ae4
  402b18:	00400f61 	.word	0x00400f61

00402b1c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
  402b1c:	2800      	cmp	r0, #0
  402b1e:	d04d      	beq.n	402bbc <xTaskPriorityDisinherit+0xa0>
	{
  402b20:	b538      	push	{r3, r4, r5, lr}
  402b22:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
  402b24:	4a27      	ldr	r2, [pc, #156]	; (402bc4 <xTaskPriorityDisinherit+0xa8>)
  402b26:	6812      	ldr	r2, [r2, #0]
  402b28:	4290      	cmp	r0, r2
  402b2a:	d00a      	beq.n	402b42 <xTaskPriorityDisinherit+0x26>
  402b2c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b30:	b672      	cpsid	i
  402b32:	f383 8811 	msr	BASEPRI, r3
  402b36:	f3bf 8f6f 	isb	sy
  402b3a:	f3bf 8f4f 	dsb	sy
  402b3e:	b662      	cpsie	i
  402b40:	e7fe      	b.n	402b40 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
  402b42:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  402b44:	b952      	cbnz	r2, 402b5c <xTaskPriorityDisinherit+0x40>
  402b46:	f04f 0380 	mov.w	r3, #128	; 0x80
  402b4a:	b672      	cpsid	i
  402b4c:	f383 8811 	msr	BASEPRI, r3
  402b50:	f3bf 8f6f 	isb	sy
  402b54:	f3bf 8f4f 	dsb	sy
  402b58:	b662      	cpsie	i
  402b5a:	e7fe      	b.n	402b5a <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  402b5c:	3a01      	subs	r2, #1
  402b5e:	64c2      	str	r2, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  402b60:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  402b62:	6ca1      	ldr	r1, [r4, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  402b64:	4288      	cmp	r0, r1
  402b66:	d02b      	beq.n	402bc0 <xTaskPriorityDisinherit+0xa4>
  402b68:	bb52      	cbnz	r2, 402bc0 <xTaskPriorityDisinherit+0xa4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402b6a:	1d25      	adds	r5, r4, #4
  402b6c:	4628      	mov	r0, r5
  402b6e:	4b16      	ldr	r3, [pc, #88]	; (402bc8 <xTaskPriorityDisinherit+0xac>)
  402b70:	4798      	blx	r3
  402b72:	b968      	cbnz	r0, 402b90 <xTaskPriorityDisinherit+0x74>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402b74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402b76:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  402b7a:	009b      	lsls	r3, r3, #2
  402b7c:	4a13      	ldr	r2, [pc, #76]	; (402bcc <xTaskPriorityDisinherit+0xb0>)
  402b7e:	58d3      	ldr	r3, [r2, r3]
  402b80:	b933      	cbnz	r3, 402b90 <xTaskPriorityDisinherit+0x74>
  402b82:	4813      	ldr	r0, [pc, #76]	; (402bd0 <xTaskPriorityDisinherit+0xb4>)
  402b84:	6803      	ldr	r3, [r0, #0]
  402b86:	2201      	movs	r2, #1
  402b88:	408a      	lsls	r2, r1
  402b8a:	ea23 0302 	bic.w	r3, r3, r2
  402b8e:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402b90:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402b92:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402b94:	f1c0 0305 	rsb	r3, r0, #5
  402b98:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  402b9a:	4a0d      	ldr	r2, [pc, #52]	; (402bd0 <xTaskPriorityDisinherit+0xb4>)
  402b9c:	6811      	ldr	r1, [r2, #0]
  402b9e:	2401      	movs	r4, #1
  402ba0:	fa04 f300 	lsl.w	r3, r4, r0
  402ba4:	430b      	orrs	r3, r1
  402ba6:	6013      	str	r3, [r2, #0]
  402ba8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402bac:	4629      	mov	r1, r5
  402bae:	4b07      	ldr	r3, [pc, #28]	; (402bcc <xTaskPriorityDisinherit+0xb0>)
  402bb0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402bb4:	4b07      	ldr	r3, [pc, #28]	; (402bd4 <xTaskPriorityDisinherit+0xb8>)
  402bb6:	4798      	blx	r3
					xReturn = pdTRUE;
  402bb8:	4620      	mov	r0, r4
  402bba:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  402bbc:	2000      	movs	r0, #0
  402bbe:	4770      	bx	lr
  402bc0:	2000      	movs	r0, #0
	}
  402bc2:	bd38      	pop	{r3, r4, r5, pc}
  402bc4:	20400a60 	.word	0x20400a60
  402bc8:	00400fad 	.word	0x00400fad
  402bcc:	20400a6c 	.word	0x20400a6c
  402bd0:	20400ae4 	.word	0x20400ae4
  402bd4:	00400f61 	.word	0x00400f61

00402bd8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
  402bd8:	2800      	cmp	r0, #0
  402bda:	d058      	beq.n	402c8e <vTaskPriorityDisinheritAfterTimeout+0xb6>
	{
  402bdc:	b538      	push	{r3, r4, r5, lr}
  402bde:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
  402be0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
  402be2:	b950      	cbnz	r0, 402bfa <vTaskPriorityDisinheritAfterTimeout+0x22>
  402be4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402be8:	b672      	cpsid	i
  402bea:	f383 8811 	msr	BASEPRI, r3
  402bee:	f3bf 8f6f 	isb	sy
  402bf2:	f3bf 8f4f 	dsb	sy
  402bf6:	b662      	cpsie	i
  402bf8:	e7fe      	b.n	402bf8 <vTaskPriorityDisinheritAfterTimeout+0x20>
  402bfa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
  402bfc:	428a      	cmp	r2, r1
  402bfe:	bf38      	it	cc
  402c00:	460a      	movcc	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
  402c02:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
  402c04:	2801      	cmp	r0, #1
  402c06:	d141      	bne.n	402c8c <vTaskPriorityDisinheritAfterTimeout+0xb4>
  402c08:	4291      	cmp	r1, r2
  402c0a:	d03f      	beq.n	402c8c <vTaskPriorityDisinheritAfterTimeout+0xb4>
					configASSERT( pxTCB != pxCurrentTCB );
  402c0c:	4820      	ldr	r0, [pc, #128]	; (402c90 <vTaskPriorityDisinheritAfterTimeout+0xb8>)
  402c0e:	6800      	ldr	r0, [r0, #0]
  402c10:	4284      	cmp	r4, r0
  402c12:	d10a      	bne.n	402c2a <vTaskPriorityDisinheritAfterTimeout+0x52>
  402c14:	f04f 0380 	mov.w	r3, #128	; 0x80
  402c18:	b672      	cpsid	i
  402c1a:	f383 8811 	msr	BASEPRI, r3
  402c1e:	f3bf 8f6f 	isb	sy
  402c22:	f3bf 8f4f 	dsb	sy
  402c26:	b662      	cpsie	i
  402c28:	e7fe      	b.n	402c28 <vTaskPriorityDisinheritAfterTimeout+0x50>
					pxTCB->uxPriority = uxPriorityToUse;
  402c2a:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  402c2c:	69a0      	ldr	r0, [r4, #24]
  402c2e:	2800      	cmp	r0, #0
  402c30:	db02      	blt.n	402c38 <vTaskPriorityDisinheritAfterTimeout+0x60>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402c32:	f1c2 0205 	rsb	r2, r2, #5
  402c36:	61a2      	str	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
  402c38:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  402c3c:	4a15      	ldr	r2, [pc, #84]	; (402c94 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  402c3e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  402c42:	6962      	ldr	r2, [r4, #20]
  402c44:	428a      	cmp	r2, r1
  402c46:	d121      	bne.n	402c8c <vTaskPriorityDisinheritAfterTimeout+0xb4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
  402c48:	1d25      	adds	r5, r4, #4
  402c4a:	4628      	mov	r0, r5
  402c4c:	4b12      	ldr	r3, [pc, #72]	; (402c98 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
  402c4e:	4798      	blx	r3
  402c50:	b968      	cbnz	r0, 402c6e <vTaskPriorityDisinheritAfterTimeout+0x96>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402c52:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  402c54:	eb01 0381 	add.w	r3, r1, r1, lsl #2
  402c58:	009b      	lsls	r3, r3, #2
  402c5a:	4a0e      	ldr	r2, [pc, #56]	; (402c94 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  402c5c:	58d3      	ldr	r3, [r2, r3]
  402c5e:	b933      	cbnz	r3, 402c6e <vTaskPriorityDisinheritAfterTimeout+0x96>
  402c60:	480e      	ldr	r0, [pc, #56]	; (402c9c <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  402c62:	6803      	ldr	r3, [r0, #0]
  402c64:	2201      	movs	r2, #1
  402c66:	408a      	lsls	r2, r1
  402c68:	ea23 0302 	bic.w	r3, r3, r2
  402c6c:	6003      	str	r3, [r0, #0]
						prvAddTaskToReadyList( pxTCB );
  402c6e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402c70:	4a0a      	ldr	r2, [pc, #40]	; (402c9c <vTaskPriorityDisinheritAfterTimeout+0xc4>)
  402c72:	6811      	ldr	r1, [r2, #0]
  402c74:	2301      	movs	r3, #1
  402c76:	4083      	lsls	r3, r0
  402c78:	430b      	orrs	r3, r1
  402c7a:	6013      	str	r3, [r2, #0]
  402c7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402c80:	4629      	mov	r1, r5
  402c82:	4b04      	ldr	r3, [pc, #16]	; (402c94 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
  402c84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402c88:	4b05      	ldr	r3, [pc, #20]	; (402ca0 <vTaskPriorityDisinheritAfterTimeout+0xc8>)
  402c8a:	4798      	blx	r3
  402c8c:	bd38      	pop	{r3, r4, r5, pc}
  402c8e:	4770      	bx	lr
  402c90:	20400a60 	.word	0x20400a60
  402c94:	20400a6c 	.word	0x20400a6c
  402c98:	00400fad 	.word	0x00400fad
  402c9c:	20400ae4 	.word	0x20400ae4
  402ca0:	00400f61 	.word	0x00400f61

00402ca4 <vTaskList>:
	{
  402ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402ca8:	b084      	sub	sp, #16
  402caa:	4604      	mov	r4, r0
		*pcWriteBuffer = 0x00;
  402cac:	2300      	movs	r3, #0
  402cae:	7003      	strb	r3, [r0, #0]
		uxArraySize = uxCurrentNumberOfTasks;
  402cb0:	4b3e      	ldr	r3, [pc, #248]	; (402dac <vTaskList+0x108>)
  402cb2:	681a      	ldr	r2, [r3, #0]
  402cb4:	9203      	str	r2, [sp, #12]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
  402cb6:	6818      	ldr	r0, [r3, #0]
  402cb8:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
  402cbc:	0080      	lsls	r0, r0, #2
  402cbe:	4b3c      	ldr	r3, [pc, #240]	; (402db0 <vTaskList+0x10c>)
  402cc0:	4798      	blx	r3
		if( pxTaskStatusArray != NULL )
  402cc2:	2800      	cmp	r0, #0
  402cc4:	d06f      	beq.n	402da6 <vTaskList+0x102>
  402cc6:	4605      	mov	r5, r0
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
  402cc8:	9903      	ldr	r1, [sp, #12]
  402cca:	2200      	movs	r2, #0
  402ccc:	4b39      	ldr	r3, [pc, #228]	; (402db4 <vTaskList+0x110>)
  402cce:	4798      	blx	r3
  402cd0:	9003      	str	r0, [sp, #12]
			for( x = 0; x < uxArraySize; x++ )
  402cd2:	2300      	movs	r3, #0
  402cd4:	9302      	str	r3, [sp, #8]
  402cd6:	9a02      	ldr	r2, [sp, #8]
  402cd8:	9b03      	ldr	r3, [sp, #12]
  402cda:	429a      	cmp	r2, r3
  402cdc:	d260      	bcs.n	402da0 <vTaskList+0xfc>
										cStatus = 0x00;
  402cde:	f04f 0800 	mov.w	r8, #0
		strcpy( pcBuffer, pcTaskName );
  402ce2:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 402dc8 <vTaskList+0x124>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  402ce6:	4e34      	ldr	r6, [pc, #208]	; (402db8 <vTaskList+0x114>)
  402ce8:	e045      	b.n	402d76 <vTaskList+0xd2>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
  402cea:	2742      	movs	r7, #66	; 0x42
  402cec:	e006      	b.n	402cfc <vTaskList+0x58>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
  402cee:	2753      	movs	r7, #83	; 0x53
										break;
  402cf0:	e004      	b.n	402cfc <vTaskList+0x58>
					case eDeleted:		cStatus = tskDELETED_CHAR;
  402cf2:	2744      	movs	r7, #68	; 0x44
										break;
  402cf4:	e002      	b.n	402cfc <vTaskList+0x58>
										cStatus = 0x00;
  402cf6:	4647      	mov	r7, r8
										break;
  402cf8:	e000      	b.n	402cfc <vTaskList+0x58>
					case eReady:		cStatus = tskREADY_CHAR;
  402cfa:	2752      	movs	r7, #82	; 0x52
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
  402cfc:	9b02      	ldr	r3, [sp, #8]
  402cfe:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  402d02:	eb05 0383 	add.w	r3, r5, r3, lsl #2
		strcpy( pcBuffer, pcTaskName );
  402d06:	6859      	ldr	r1, [r3, #4]
  402d08:	4620      	mov	r0, r4
  402d0a:	47c8      	blx	r9
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  402d0c:	4620      	mov	r0, r4
  402d0e:	47b0      	blx	r6
  402d10:	2808      	cmp	r0, #8
  402d12:	d808      	bhi.n	402d26 <vTaskList+0x82>
  402d14:	4420      	add	r0, r4
  402d16:	f104 0209 	add.w	r2, r4, #9
			pcBuffer[ x ] = ' ';
  402d1a:	2320      	movs	r3, #32
  402d1c:	f800 3b01 	strb.w	r3, [r0], #1
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
  402d20:	4282      	cmp	r2, r0
  402d22:	d1fb      	bne.n	402d1c <vTaskList+0x78>
  402d24:	2009      	movs	r0, #9
		pcBuffer[ x ] = 0x00;
  402d26:	eb04 0a00 	add.w	sl, r4, r0
  402d2a:	f804 8000 	strb.w	r8, [r4, r0]
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
  402d2e:	9b02      	ldr	r3, [sp, #8]
  402d30:	9a02      	ldr	r2, [sp, #8]
  402d32:	9902      	ldr	r1, [sp, #8]
  402d34:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  402d38:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  402d3c:	691b      	ldr	r3, [r3, #16]
  402d3e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
  402d42:	eb05 0181 	add.w	r1, r5, r1, lsl #2
  402d46:	6889      	ldr	r1, [r1, #8]
  402d48:	9101      	str	r1, [sp, #4]
  402d4a:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
  402d4e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  402d52:	8c12      	ldrh	r2, [r2, #32]
  402d54:	9200      	str	r2, [sp, #0]
  402d56:	463a      	mov	r2, r7
  402d58:	4918      	ldr	r1, [pc, #96]	; (402dbc <vTaskList+0x118>)
  402d5a:	4650      	mov	r0, sl
  402d5c:	4c18      	ldr	r4, [pc, #96]	; (402dc0 <vTaskList+0x11c>)
  402d5e:	47a0      	blx	r4
				pcWriteBuffer += strlen( pcWriteBuffer );
  402d60:	4650      	mov	r0, sl
  402d62:	47b0      	blx	r6
  402d64:	eb0a 0400 	add.w	r4, sl, r0
			for( x = 0; x < uxArraySize; x++ )
  402d68:	9b02      	ldr	r3, [sp, #8]
  402d6a:	3301      	adds	r3, #1
  402d6c:	9302      	str	r3, [sp, #8]
  402d6e:	9a02      	ldr	r2, [sp, #8]
  402d70:	9b03      	ldr	r3, [sp, #12]
  402d72:	429a      	cmp	r2, r3
  402d74:	d214      	bcs.n	402da0 <vTaskList+0xfc>
				switch( pxTaskStatusArray[ x ].eCurrentState )
  402d76:	9b02      	ldr	r3, [sp, #8]
  402d78:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
  402d7c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  402d80:	7b1b      	ldrb	r3, [r3, #12]
  402d82:	3b01      	subs	r3, #1
  402d84:	2b03      	cmp	r3, #3
  402d86:	d8b6      	bhi.n	402cf6 <vTaskList+0x52>
  402d88:	a201      	add	r2, pc, #4	; (adr r2, 402d90 <vTaskList+0xec>)
  402d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402d8e:	bf00      	nop
  402d90:	00402cfb 	.word	0x00402cfb
  402d94:	00402ceb 	.word	0x00402ceb
  402d98:	00402cef 	.word	0x00402cef
  402d9c:	00402cf3 	.word	0x00402cf3
			vPortFree( pxTaskStatusArray );
  402da0:	4628      	mov	r0, r5
  402da2:	4b08      	ldr	r3, [pc, #32]	; (402dc4 <vTaskList+0x120>)
  402da4:	4798      	blx	r3
	}
  402da6:	b004      	add	sp, #16
  402da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402dac:	20400ad0 	.word	0x20400ad0
  402db0:	00401341 	.word	0x00401341
  402db4:	0040297d 	.word	0x0040297d
  402db8:	00404601 	.word	0x00404601
  402dbc:	0040a048 	.word	0x0040a048
  402dc0:	004044ed 	.word	0x004044ed
  402dc4:	00401371 	.word	0x00401371
  402dc8:	00404539 	.word	0x00404539

00402dcc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
  402dcc:	4b05      	ldr	r3, [pc, #20]	; (402de4 <pvTaskIncrementMutexHeldCount+0x18>)
  402dce:	681b      	ldr	r3, [r3, #0]
  402dd0:	b123      	cbz	r3, 402ddc <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
  402dd2:	4b04      	ldr	r3, [pc, #16]	; (402de4 <pvTaskIncrementMutexHeldCount+0x18>)
  402dd4:	681a      	ldr	r2, [r3, #0]
  402dd6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402dd8:	3301      	adds	r3, #1
  402dda:	64d3      	str	r3, [r2, #76]	; 0x4c
		return pxCurrentTCB;
  402ddc:	4b01      	ldr	r3, [pc, #4]	; (402de4 <pvTaskIncrementMutexHeldCount+0x18>)
  402dde:	6818      	ldr	r0, [r3, #0]
	}
  402de0:	4770      	bx	lr
  402de2:	bf00      	nop
  402de4:	20400a60 	.word	0x20400a60

00402de8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402de8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402dea:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402dec:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  402dee:	4291      	cmp	r1, r2
  402df0:	d80c      	bhi.n	402e0c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402df2:	1ad2      	subs	r2, r2, r3
  402df4:	6983      	ldr	r3, [r0, #24]
  402df6:	429a      	cmp	r2, r3
  402df8:	d301      	bcc.n	402dfe <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402dfa:	2001      	movs	r0, #1
  402dfc:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  402dfe:	1d01      	adds	r1, r0, #4
  402e00:	4b09      	ldr	r3, [pc, #36]	; (402e28 <prvInsertTimerInActiveList+0x40>)
  402e02:	6818      	ldr	r0, [r3, #0]
  402e04:	4b09      	ldr	r3, [pc, #36]	; (402e2c <prvInsertTimerInActiveList+0x44>)
  402e06:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402e08:	2000      	movs	r0, #0
  402e0a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402e0c:	429a      	cmp	r2, r3
  402e0e:	d203      	bcs.n	402e18 <prvInsertTimerInActiveList+0x30>
  402e10:	4299      	cmp	r1, r3
  402e12:	d301      	bcc.n	402e18 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402e14:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402e16:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402e18:	1d01      	adds	r1, r0, #4
  402e1a:	4b05      	ldr	r3, [pc, #20]	; (402e30 <prvInsertTimerInActiveList+0x48>)
  402e1c:	6818      	ldr	r0, [r3, #0]
  402e1e:	4b03      	ldr	r3, [pc, #12]	; (402e2c <prvInsertTimerInActiveList+0x44>)
  402e20:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402e22:	2000      	movs	r0, #0
  402e24:	bd08      	pop	{r3, pc}
  402e26:	bf00      	nop
  402e28:	20400b68 	.word	0x20400b68
  402e2c:	00400f79 	.word	0x00400f79
  402e30:	20400b64 	.word	0x20400b64

00402e34 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  402e34:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  402e36:	4b10      	ldr	r3, [pc, #64]	; (402e78 <prvCheckForValidListAndQueue+0x44>)
  402e38:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  402e3a:	4b10      	ldr	r3, [pc, #64]	; (402e7c <prvCheckForValidListAndQueue+0x48>)
  402e3c:	681b      	ldr	r3, [r3, #0]
  402e3e:	b113      	cbz	r3, 402e46 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  402e40:	4b0f      	ldr	r3, [pc, #60]	; (402e80 <prvCheckForValidListAndQueue+0x4c>)
  402e42:	4798      	blx	r3
  402e44:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  402e46:	4d0f      	ldr	r5, [pc, #60]	; (402e84 <prvCheckForValidListAndQueue+0x50>)
  402e48:	4628      	mov	r0, r5
  402e4a:	4e0f      	ldr	r6, [pc, #60]	; (402e88 <prvCheckForValidListAndQueue+0x54>)
  402e4c:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  402e4e:	4c0f      	ldr	r4, [pc, #60]	; (402e8c <prvCheckForValidListAndQueue+0x58>)
  402e50:	4620      	mov	r0, r4
  402e52:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  402e54:	4b0e      	ldr	r3, [pc, #56]	; (402e90 <prvCheckForValidListAndQueue+0x5c>)
  402e56:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  402e58:	4b0e      	ldr	r3, [pc, #56]	; (402e94 <prvCheckForValidListAndQueue+0x60>)
  402e5a:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  402e5c:	2200      	movs	r2, #0
  402e5e:	2110      	movs	r1, #16
  402e60:	2005      	movs	r0, #5
  402e62:	4b0d      	ldr	r3, [pc, #52]	; (402e98 <prvCheckForValidListAndQueue+0x64>)
  402e64:	4798      	blx	r3
  402e66:	4b05      	ldr	r3, [pc, #20]	; (402e7c <prvCheckForValidListAndQueue+0x48>)
  402e68:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
  402e6a:	2800      	cmp	r0, #0
  402e6c:	d0e8      	beq.n	402e40 <prvCheckForValidListAndQueue+0xc>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  402e6e:	490b      	ldr	r1, [pc, #44]	; (402e9c <prvCheckForValidListAndQueue+0x68>)
  402e70:	4b0b      	ldr	r3, [pc, #44]	; (402ea0 <prvCheckForValidListAndQueue+0x6c>)
  402e72:	4798      	blx	r3
  402e74:	e7e4      	b.n	402e40 <prvCheckForValidListAndQueue+0xc>
  402e76:	bf00      	nop
  402e78:	004010b5 	.word	0x004010b5
  402e7c:	20400b98 	.word	0x20400b98
  402e80:	00401101 	.word	0x00401101
  402e84:	20400b6c 	.word	0x20400b6c
  402e88:	00400f45 	.word	0x00400f45
  402e8c:	20400b80 	.word	0x20400b80
  402e90:	20400b64 	.word	0x20400b64
  402e94:	20400b68 	.word	0x20400b68
  402e98:	00401621 	.word	0x00401621
  402e9c:	0040a060 	.word	0x0040a060
  402ea0:	00401df1 	.word	0x00401df1

00402ea4 <xTimerCreateTimerTask>:
{
  402ea4:	b510      	push	{r4, lr}
  402ea6:	b082      	sub	sp, #8
	prvCheckForValidListAndQueue();
  402ea8:	4b0e      	ldr	r3, [pc, #56]	; (402ee4 <xTimerCreateTimerTask+0x40>)
  402eaa:	4798      	blx	r3
	if( xTimerQueue != NULL )
  402eac:	4b0e      	ldr	r3, [pc, #56]	; (402ee8 <xTimerCreateTimerTask+0x44>)
  402eae:	681b      	ldr	r3, [r3, #0]
  402eb0:	b16b      	cbz	r3, 402ece <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate(	prvTimerTask,
  402eb2:	4b0e      	ldr	r3, [pc, #56]	; (402eec <xTimerCreateTimerTask+0x48>)
  402eb4:	9301      	str	r3, [sp, #4]
  402eb6:	2304      	movs	r3, #4
  402eb8:	9300      	str	r3, [sp, #0]
  402eba:	2300      	movs	r3, #0
  402ebc:	f44f 7282 	mov.w	r2, #260	; 0x104
  402ec0:	490b      	ldr	r1, [pc, #44]	; (402ef0 <xTimerCreateTimerTask+0x4c>)
  402ec2:	480c      	ldr	r0, [pc, #48]	; (402ef4 <xTimerCreateTimerTask+0x50>)
  402ec4:	4c0c      	ldr	r4, [pc, #48]	; (402ef8 <xTimerCreateTimerTask+0x54>)
  402ec6:	47a0      	blx	r4
	configASSERT( xReturn );
  402ec8:	b108      	cbz	r0, 402ece <xTimerCreateTimerTask+0x2a>
}
  402eca:	b002      	add	sp, #8
  402ecc:	bd10      	pop	{r4, pc}
  402ece:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ed2:	b672      	cpsid	i
  402ed4:	f383 8811 	msr	BASEPRI, r3
  402ed8:	f3bf 8f6f 	isb	sy
  402edc:	f3bf 8f4f 	dsb	sy
  402ee0:	b662      	cpsie	i
  402ee2:	e7fe      	b.n	402ee2 <xTimerCreateTimerTask+0x3e>
  402ee4:	00402e35 	.word	0x00402e35
  402ee8:	20400b98 	.word	0x20400b98
  402eec:	20400b9c 	.word	0x20400b9c
  402ef0:	0040a068 	.word	0x0040a068
  402ef4:	00403025 	.word	0x00403025
  402ef8:	00401fe1 	.word	0x00401fe1

00402efc <xTimerGenericCommand>:
	configASSERT( xTimer );
  402efc:	b1d8      	cbz	r0, 402f36 <xTimerGenericCommand+0x3a>
{
  402efe:	b530      	push	{r4, r5, lr}
  402f00:	b085      	sub	sp, #20
  402f02:	4615      	mov	r5, r2
  402f04:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402f06:	4a15      	ldr	r2, [pc, #84]	; (402f5c <xTimerGenericCommand+0x60>)
  402f08:	6810      	ldr	r0, [r2, #0]
  402f0a:	b320      	cbz	r0, 402f56 <xTimerGenericCommand+0x5a>
  402f0c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  402f0e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  402f10:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  402f12:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  402f14:	2905      	cmp	r1, #5
  402f16:	dc19      	bgt.n	402f4c <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  402f18:	4b11      	ldr	r3, [pc, #68]	; (402f60 <xTimerGenericCommand+0x64>)
  402f1a:	4798      	blx	r3
  402f1c:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  402f1e:	f04f 0300 	mov.w	r3, #0
  402f22:	bf0c      	ite	eq
  402f24:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  402f26:	461a      	movne	r2, r3
  402f28:	4669      	mov	r1, sp
  402f2a:	480c      	ldr	r0, [pc, #48]	; (402f5c <xTimerGenericCommand+0x60>)
  402f2c:	6800      	ldr	r0, [r0, #0]
  402f2e:	4c0d      	ldr	r4, [pc, #52]	; (402f64 <xTimerGenericCommand+0x68>)
  402f30:	47a0      	blx	r4
}
  402f32:	b005      	add	sp, #20
  402f34:	bd30      	pop	{r4, r5, pc}
  402f36:	f04f 0380 	mov.w	r3, #128	; 0x80
  402f3a:	b672      	cpsid	i
  402f3c:	f383 8811 	msr	BASEPRI, r3
  402f40:	f3bf 8f6f 	isb	sy
  402f44:	f3bf 8f4f 	dsb	sy
  402f48:	b662      	cpsie	i
  402f4a:	e7fe      	b.n	402f4a <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  402f4c:	2300      	movs	r3, #0
  402f4e:	4669      	mov	r1, sp
  402f50:	4c05      	ldr	r4, [pc, #20]	; (402f68 <xTimerGenericCommand+0x6c>)
  402f52:	47a0      	blx	r4
  402f54:	e7ed      	b.n	402f32 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  402f56:	2000      	movs	r0, #0
	return xReturn;
  402f58:	e7eb      	b.n	402f32 <xTimerGenericCommand+0x36>
  402f5a:	bf00      	nop
  402f5c:	20400b98 	.word	0x20400b98
  402f60:	00402a3d 	.word	0x00402a3d
  402f64:	0040167d 	.word	0x0040167d
  402f68:	0040186d 	.word	0x0040186d

00402f6c <prvSampleTimeNow>:
{
  402f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402f70:	b082      	sub	sp, #8
  402f72:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402f74:	4b24      	ldr	r3, [pc, #144]	; (403008 <prvSampleTimeNow+0x9c>)
  402f76:	4798      	blx	r3
  402f78:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  402f7a:	4b24      	ldr	r3, [pc, #144]	; (40300c <prvSampleTimeNow+0xa0>)
  402f7c:	681b      	ldr	r3, [r3, #0]
  402f7e:	4298      	cmp	r0, r3
  402f80:	d31b      	bcc.n	402fba <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402f82:	2300      	movs	r3, #0
  402f84:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402f88:	4b20      	ldr	r3, [pc, #128]	; (40300c <prvSampleTimeNow+0xa0>)
  402f8a:	601f      	str	r7, [r3, #0]
}
  402f8c:	4638      	mov	r0, r7
  402f8e:	b002      	add	sp, #8
  402f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402f94:	2100      	movs	r1, #0
  402f96:	9100      	str	r1, [sp, #0]
  402f98:	460b      	mov	r3, r1
  402f9a:	4652      	mov	r2, sl
  402f9c:	4620      	mov	r0, r4
  402f9e:	4c1c      	ldr	r4, [pc, #112]	; (403010 <prvSampleTimeNow+0xa4>)
  402fa0:	47a0      	blx	r4
				configASSERT( xResult );
  402fa2:	b960      	cbnz	r0, 402fbe <prvSampleTimeNow+0x52>
  402fa4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402fa8:	b672      	cpsid	i
  402faa:	f383 8811 	msr	BASEPRI, r3
  402fae:	f3bf 8f6f 	isb	sy
  402fb2:	f3bf 8f4f 	dsb	sy
  402fb6:	b662      	cpsie	i
  402fb8:	e7fe      	b.n	402fb8 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402fba:	4d16      	ldr	r5, [pc, #88]	; (403014 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402fbc:	4e16      	ldr	r6, [pc, #88]	; (403018 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  402fbe:	682b      	ldr	r3, [r5, #0]
  402fc0:	681a      	ldr	r2, [r3, #0]
  402fc2:	b1c2      	cbz	r2, 402ff6 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402fc4:	68db      	ldr	r3, [r3, #12]
  402fc6:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402fca:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  402fcc:	f104 0904 	add.w	r9, r4, #4
  402fd0:	4648      	mov	r0, r9
  402fd2:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402fd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402fd6:	4620      	mov	r0, r4
  402fd8:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402fda:	69e3      	ldr	r3, [r4, #28]
  402fdc:	2b01      	cmp	r3, #1
  402fde:	d1ee      	bne.n	402fbe <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402fe0:	69a3      	ldr	r3, [r4, #24]
  402fe2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402fe4:	459a      	cmp	sl, r3
  402fe6:	d2d5      	bcs.n	402f94 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402fe8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402fea:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402fec:	4649      	mov	r1, r9
  402fee:	6828      	ldr	r0, [r5, #0]
  402ff0:	4b0a      	ldr	r3, [pc, #40]	; (40301c <prvSampleTimeNow+0xb0>)
  402ff2:	4798      	blx	r3
  402ff4:	e7e3      	b.n	402fbe <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402ff6:	4a0a      	ldr	r2, [pc, #40]	; (403020 <prvSampleTimeNow+0xb4>)
  402ff8:	6810      	ldr	r0, [r2, #0]
  402ffa:	4906      	ldr	r1, [pc, #24]	; (403014 <prvSampleTimeNow+0xa8>)
  402ffc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  402ffe:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  403000:	2301      	movs	r3, #1
  403002:	f8c8 3000 	str.w	r3, [r8]
  403006:	e7bf      	b.n	402f88 <prvSampleTimeNow+0x1c>
  403008:	00402301 	.word	0x00402301
  40300c:	20400b94 	.word	0x20400b94
  403010:	00402efd 	.word	0x00402efd
  403014:	20400b64 	.word	0x20400b64
  403018:	00400fad 	.word	0x00400fad
  40301c:	00400f79 	.word	0x00400f79
  403020:	20400b68 	.word	0x20400b68

00403024 <prvTimerTask>:
{
  403024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403028:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40302a:	4e75      	ldr	r6, [pc, #468]	; (403200 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  40302c:	4f75      	ldr	r7, [pc, #468]	; (403204 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  40302e:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 40322c <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403032:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403230 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  403036:	6833      	ldr	r3, [r6, #0]
  403038:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
  40303a:	2a00      	cmp	r2, #0
  40303c:	f000 80ce 	beq.w	4031dc <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403040:	68db      	ldr	r3, [r3, #12]
  403042:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  403044:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403046:	a804      	add	r0, sp, #16
  403048:	4b6f      	ldr	r3, [pc, #444]	; (403208 <prvTimerTask+0x1e4>)
  40304a:	4798      	blx	r3
  40304c:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  40304e:	9b04      	ldr	r3, [sp, #16]
  403050:	2b00      	cmp	r3, #0
  403052:	d144      	bne.n	4030de <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  403054:	42a0      	cmp	r0, r4
  403056:	d212      	bcs.n	40307e <prvTimerTask+0x5a>
  403058:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40305a:	1b61      	subs	r1, r4, r5
  40305c:	4b6b      	ldr	r3, [pc, #428]	; (40320c <prvTimerTask+0x1e8>)
  40305e:	6818      	ldr	r0, [r3, #0]
  403060:	4b6b      	ldr	r3, [pc, #428]	; (403210 <prvTimerTask+0x1ec>)
  403062:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403064:	4b6b      	ldr	r3, [pc, #428]	; (403214 <prvTimerTask+0x1f0>)
  403066:	4798      	blx	r3
  403068:	2800      	cmp	r0, #0
  40306a:	d13a      	bne.n	4030e2 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  40306c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403070:	f8c9 3000 	str.w	r3, [r9]
  403074:	f3bf 8f4f 	dsb	sy
  403078:	f3bf 8f6f 	isb	sy
  40307c:	e031      	b.n	4030e2 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  40307e:	4b65      	ldr	r3, [pc, #404]	; (403214 <prvTimerTask+0x1f0>)
  403080:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403082:	6833      	ldr	r3, [r6, #0]
  403084:	68db      	ldr	r3, [r3, #12]
  403086:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40308a:	f10a 0004 	add.w	r0, sl, #4
  40308e:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403090:	f8da 301c 	ldr.w	r3, [sl, #28]
  403094:	2b01      	cmp	r3, #1
  403096:	d004      	beq.n	4030a2 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  403098:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40309c:	4650      	mov	r0, sl
  40309e:	4798      	blx	r3
  4030a0:	e01f      	b.n	4030e2 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
  4030a2:	f8da 1018 	ldr.w	r1, [sl, #24]
  4030a6:	4623      	mov	r3, r4
  4030a8:	462a      	mov	r2, r5
  4030aa:	4421      	add	r1, r4
  4030ac:	4650      	mov	r0, sl
  4030ae:	4d5a      	ldr	r5, [pc, #360]	; (403218 <prvTimerTask+0x1f4>)
  4030b0:	47a8      	blx	r5
  4030b2:	2800      	cmp	r0, #0
  4030b4:	d0f0      	beq.n	403098 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4030b6:	2100      	movs	r1, #0
  4030b8:	9100      	str	r1, [sp, #0]
  4030ba:	460b      	mov	r3, r1
  4030bc:	4622      	mov	r2, r4
  4030be:	4650      	mov	r0, sl
  4030c0:	4c56      	ldr	r4, [pc, #344]	; (40321c <prvTimerTask+0x1f8>)
  4030c2:	47a0      	blx	r4
			configASSERT( xResult );
  4030c4:	2800      	cmp	r0, #0
  4030c6:	d1e7      	bne.n	403098 <prvTimerTask+0x74>
  4030c8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4030cc:	b672      	cpsid	i
  4030ce:	f383 8811 	msr	BASEPRI, r3
  4030d2:	f3bf 8f6f 	isb	sy
  4030d6:	f3bf 8f4f 	dsb	sy
  4030da:	b662      	cpsie	i
  4030dc:	e7fe      	b.n	4030dc <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  4030de:	4b4d      	ldr	r3, [pc, #308]	; (403214 <prvTimerTask+0x1f0>)
  4030e0:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4030e2:	4d4a      	ldr	r5, [pc, #296]	; (40320c <prvTimerTask+0x1e8>)
  4030e4:	4c4e      	ldr	r4, [pc, #312]	; (403220 <prvTimerTask+0x1fc>)
  4030e6:	e006      	b.n	4030f6 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4030e8:	9907      	ldr	r1, [sp, #28]
  4030ea:	9806      	ldr	r0, [sp, #24]
  4030ec:	9b05      	ldr	r3, [sp, #20]
  4030ee:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  4030f0:	9b04      	ldr	r3, [sp, #16]
  4030f2:	2b00      	cmp	r3, #0
  4030f4:	da08      	bge.n	403108 <prvTimerTask+0xe4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4030f6:	2200      	movs	r2, #0
  4030f8:	a904      	add	r1, sp, #16
  4030fa:	6828      	ldr	r0, [r5, #0]
  4030fc:	47a0      	blx	r4
  4030fe:	2800      	cmp	r0, #0
  403100:	d099      	beq.n	403036 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403102:	9b04      	ldr	r3, [sp, #16]
  403104:	2b00      	cmp	r3, #0
  403106:	dbef      	blt.n	4030e8 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  403108:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
  40310c:	f8da 3014 	ldr.w	r3, [sl, #20]
  403110:	b113      	cbz	r3, 403118 <prvTimerTask+0xf4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403112:	f10a 0004 	add.w	r0, sl, #4
  403116:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  403118:	a803      	add	r0, sp, #12
  40311a:	4b3b      	ldr	r3, [pc, #236]	; (403208 <prvTimerTask+0x1e4>)
  40311c:	4798      	blx	r3
			switch( xMessage.xMessageID )
  40311e:	9b04      	ldr	r3, [sp, #16]
  403120:	2b09      	cmp	r3, #9
  403122:	d8e8      	bhi.n	4030f6 <prvTimerTask+0xd2>
  403124:	a201      	add	r2, pc, #4	; (adr r2, 40312c <prvTimerTask+0x108>)
  403126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40312a:	bf00      	nop
  40312c:	00403155 	.word	0x00403155
  403130:	00403155 	.word	0x00403155
  403134:	00403155 	.word	0x00403155
  403138:	004030f7 	.word	0x004030f7
  40313c:	004031a9 	.word	0x004031a9
  403140:	004031d5 	.word	0x004031d5
  403144:	00403155 	.word	0x00403155
  403148:	00403155 	.word	0x00403155
  40314c:	004030f7 	.word	0x004030f7
  403150:	004031a9 	.word	0x004031a9
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
  403154:	9c05      	ldr	r4, [sp, #20]
  403156:	f8da 1018 	ldr.w	r1, [sl, #24]
  40315a:	4623      	mov	r3, r4
  40315c:	4602      	mov	r2, r0
  40315e:	4421      	add	r1, r4
  403160:	4650      	mov	r0, sl
  403162:	4c2d      	ldr	r4, [pc, #180]	; (403218 <prvTimerTask+0x1f4>)
  403164:	47a0      	blx	r4
  403166:	2800      	cmp	r0, #0
  403168:	d0bc      	beq.n	4030e4 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40316a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40316e:	4650      	mov	r0, sl
  403170:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403172:	f8da 301c 	ldr.w	r3, [sl, #28]
  403176:	2b01      	cmp	r3, #1
  403178:	d1b4      	bne.n	4030e4 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40317a:	f8da 2018 	ldr.w	r2, [sl, #24]
  40317e:	2100      	movs	r1, #0
  403180:	9100      	str	r1, [sp, #0]
  403182:	460b      	mov	r3, r1
  403184:	9805      	ldr	r0, [sp, #20]
  403186:	4402      	add	r2, r0
  403188:	4650      	mov	r0, sl
  40318a:	4c24      	ldr	r4, [pc, #144]	; (40321c <prvTimerTask+0x1f8>)
  40318c:	47a0      	blx	r4
							configASSERT( xResult );
  40318e:	2800      	cmp	r0, #0
  403190:	d1a8      	bne.n	4030e4 <prvTimerTask+0xc0>
  403192:	f04f 0380 	mov.w	r3, #128	; 0x80
  403196:	b672      	cpsid	i
  403198:	f383 8811 	msr	BASEPRI, r3
  40319c:	f3bf 8f6f 	isb	sy
  4031a0:	f3bf 8f4f 	dsb	sy
  4031a4:	b662      	cpsie	i
  4031a6:	e7fe      	b.n	4031a6 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4031a8:	9905      	ldr	r1, [sp, #20]
  4031aa:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4031ae:	b131      	cbz	r1, 4031be <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4031b0:	4603      	mov	r3, r0
  4031b2:	4602      	mov	r2, r0
  4031b4:	4401      	add	r1, r0
  4031b6:	4650      	mov	r0, sl
  4031b8:	4c17      	ldr	r4, [pc, #92]	; (403218 <prvTimerTask+0x1f4>)
  4031ba:	47a0      	blx	r4
  4031bc:	e792      	b.n	4030e4 <prvTimerTask+0xc0>
  4031be:	f04f 0380 	mov.w	r3, #128	; 0x80
  4031c2:	b672      	cpsid	i
  4031c4:	f383 8811 	msr	BASEPRI, r3
  4031c8:	f3bf 8f6f 	isb	sy
  4031cc:	f3bf 8f4f 	dsb	sy
  4031d0:	b662      	cpsie	i
  4031d2:	e7fe      	b.n	4031d2 <prvTimerTask+0x1ae>
						vPortFree( pxTimer );
  4031d4:	4650      	mov	r0, sl
  4031d6:	4b13      	ldr	r3, [pc, #76]	; (403224 <prvTimerTask+0x200>)
  4031d8:	4798      	blx	r3
  4031da:	e783      	b.n	4030e4 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  4031dc:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4031de:	a804      	add	r0, sp, #16
  4031e0:	4b09      	ldr	r3, [pc, #36]	; (403208 <prvTimerTask+0x1e4>)
  4031e2:	4798      	blx	r3
  4031e4:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4031e6:	9b04      	ldr	r3, [sp, #16]
  4031e8:	2b00      	cmp	r3, #0
  4031ea:	f47f af78 	bne.w	4030de <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  4031ee:	4b0e      	ldr	r3, [pc, #56]	; (403228 <prvTimerTask+0x204>)
  4031f0:	681b      	ldr	r3, [r3, #0]
  4031f2:	681a      	ldr	r2, [r3, #0]
  4031f4:	fab2 f282 	clz	r2, r2
  4031f8:	0952      	lsrs	r2, r2, #5
  4031fa:	2400      	movs	r4, #0
  4031fc:	e72d      	b.n	40305a <prvTimerTask+0x36>
  4031fe:	bf00      	nop
  403200:	20400b64 	.word	0x20400b64
  403204:	004022f1 	.word	0x004022f1
  403208:	00402f6d 	.word	0x00402f6d
  40320c:	20400b98 	.word	0x20400b98
  403210:	00401e25 	.word	0x00401e25
  403214:	00402461 	.word	0x00402461
  403218:	00402de9 	.word	0x00402de9
  40321c:	00402efd 	.word	0x00402efd
  403220:	00401a65 	.word	0x00401a65
  403224:	00401371 	.word	0x00401371
  403228:	20400b68 	.word	0x20400b68
  40322c:	e000ed04 	.word	0xe000ed04
  403230:	00400fad 	.word	0x00400fad

00403234 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403234:	b5f0      	push	{r4, r5, r6, r7, lr}
  403236:	b083      	sub	sp, #12
  403238:	4605      	mov	r5, r0
  40323a:	460c      	mov	r4, r1
	uint32_t val = 0;
  40323c:	2300      	movs	r3, #0
  40323e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403240:	4b2a      	ldr	r3, [pc, #168]	; (4032ec <usart_serial_getchar+0xb8>)
  403242:	4298      	cmp	r0, r3
  403244:	d013      	beq.n	40326e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403246:	4b2a      	ldr	r3, [pc, #168]	; (4032f0 <usart_serial_getchar+0xbc>)
  403248:	4298      	cmp	r0, r3
  40324a:	d018      	beq.n	40327e <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  40324c:	4b29      	ldr	r3, [pc, #164]	; (4032f4 <usart_serial_getchar+0xc0>)
  40324e:	4298      	cmp	r0, r3
  403250:	d01d      	beq.n	40328e <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403252:	4b29      	ldr	r3, [pc, #164]	; (4032f8 <usart_serial_getchar+0xc4>)
  403254:	429d      	cmp	r5, r3
  403256:	d022      	beq.n	40329e <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403258:	4b28      	ldr	r3, [pc, #160]	; (4032fc <usart_serial_getchar+0xc8>)
  40325a:	429d      	cmp	r5, r3
  40325c:	d027      	beq.n	4032ae <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  40325e:	4b28      	ldr	r3, [pc, #160]	; (403300 <usart_serial_getchar+0xcc>)
  403260:	429d      	cmp	r5, r3
  403262:	d02e      	beq.n	4032c2 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403264:	4b27      	ldr	r3, [pc, #156]	; (403304 <usart_serial_getchar+0xd0>)
  403266:	429d      	cmp	r5, r3
  403268:	d035      	beq.n	4032d6 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  40326a:	b003      	add	sp, #12
  40326c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  40326e:	461f      	mov	r7, r3
  403270:	4e25      	ldr	r6, [pc, #148]	; (403308 <usart_serial_getchar+0xd4>)
  403272:	4621      	mov	r1, r4
  403274:	4638      	mov	r0, r7
  403276:	47b0      	blx	r6
  403278:	2800      	cmp	r0, #0
  40327a:	d1fa      	bne.n	403272 <usart_serial_getchar+0x3e>
  40327c:	e7e9      	b.n	403252 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  40327e:	461f      	mov	r7, r3
  403280:	4e21      	ldr	r6, [pc, #132]	; (403308 <usart_serial_getchar+0xd4>)
  403282:	4621      	mov	r1, r4
  403284:	4638      	mov	r0, r7
  403286:	47b0      	blx	r6
  403288:	2800      	cmp	r0, #0
  40328a:	d1fa      	bne.n	403282 <usart_serial_getchar+0x4e>
  40328c:	e7e4      	b.n	403258 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  40328e:	461f      	mov	r7, r3
  403290:	4e1d      	ldr	r6, [pc, #116]	; (403308 <usart_serial_getchar+0xd4>)
  403292:	4621      	mov	r1, r4
  403294:	4638      	mov	r0, r7
  403296:	47b0      	blx	r6
  403298:	2800      	cmp	r0, #0
  40329a:	d1fa      	bne.n	403292 <usart_serial_getchar+0x5e>
  40329c:	e7df      	b.n	40325e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  40329e:	461f      	mov	r7, r3
  4032a0:	4e19      	ldr	r6, [pc, #100]	; (403308 <usart_serial_getchar+0xd4>)
  4032a2:	4621      	mov	r1, r4
  4032a4:	4638      	mov	r0, r7
  4032a6:	47b0      	blx	r6
  4032a8:	2800      	cmp	r0, #0
  4032aa:	d1fa      	bne.n	4032a2 <usart_serial_getchar+0x6e>
  4032ac:	e7da      	b.n	403264 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  4032ae:	461e      	mov	r6, r3
  4032b0:	4d16      	ldr	r5, [pc, #88]	; (40330c <usart_serial_getchar+0xd8>)
  4032b2:	a901      	add	r1, sp, #4
  4032b4:	4630      	mov	r0, r6
  4032b6:	47a8      	blx	r5
  4032b8:	2800      	cmp	r0, #0
  4032ba:	d1fa      	bne.n	4032b2 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  4032bc:	9b01      	ldr	r3, [sp, #4]
  4032be:	7023      	strb	r3, [r4, #0]
  4032c0:	e7d3      	b.n	40326a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4032c2:	461e      	mov	r6, r3
  4032c4:	4d11      	ldr	r5, [pc, #68]	; (40330c <usart_serial_getchar+0xd8>)
  4032c6:	a901      	add	r1, sp, #4
  4032c8:	4630      	mov	r0, r6
  4032ca:	47a8      	blx	r5
  4032cc:	2800      	cmp	r0, #0
  4032ce:	d1fa      	bne.n	4032c6 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  4032d0:	9b01      	ldr	r3, [sp, #4]
  4032d2:	7023      	strb	r3, [r4, #0]
  4032d4:	e7c9      	b.n	40326a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  4032d6:	461e      	mov	r6, r3
  4032d8:	4d0c      	ldr	r5, [pc, #48]	; (40330c <usart_serial_getchar+0xd8>)
  4032da:	a901      	add	r1, sp, #4
  4032dc:	4630      	mov	r0, r6
  4032de:	47a8      	blx	r5
  4032e0:	2800      	cmp	r0, #0
  4032e2:	d1fa      	bne.n	4032da <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  4032e4:	9b01      	ldr	r3, [sp, #4]
  4032e6:	7023      	strb	r3, [r4, #0]
}
  4032e8:	e7bf      	b.n	40326a <usart_serial_getchar+0x36>
  4032ea:	bf00      	nop
  4032ec:	400e0800 	.word	0x400e0800
  4032f0:	400e0a00 	.word	0x400e0a00
  4032f4:	400e1a00 	.word	0x400e1a00
  4032f8:	400e1c00 	.word	0x400e1c00
  4032fc:	40024000 	.word	0x40024000
  403300:	40028000 	.word	0x40028000
  403304:	4002c000 	.word	0x4002c000
  403308:	00400b67 	.word	0x00400b67
  40330c:	00400c7b 	.word	0x00400c7b

00403310 <usart_serial_putchar>:
{
  403310:	b570      	push	{r4, r5, r6, lr}
  403312:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403314:	4b2a      	ldr	r3, [pc, #168]	; (4033c0 <usart_serial_putchar+0xb0>)
  403316:	4298      	cmp	r0, r3
  403318:	d013      	beq.n	403342 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  40331a:	4b2a      	ldr	r3, [pc, #168]	; (4033c4 <usart_serial_putchar+0xb4>)
  40331c:	4298      	cmp	r0, r3
  40331e:	d019      	beq.n	403354 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403320:	4b29      	ldr	r3, [pc, #164]	; (4033c8 <usart_serial_putchar+0xb8>)
  403322:	4298      	cmp	r0, r3
  403324:	d01f      	beq.n	403366 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403326:	4b29      	ldr	r3, [pc, #164]	; (4033cc <usart_serial_putchar+0xbc>)
  403328:	4298      	cmp	r0, r3
  40332a:	d025      	beq.n	403378 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  40332c:	4b28      	ldr	r3, [pc, #160]	; (4033d0 <usart_serial_putchar+0xc0>)
  40332e:	4298      	cmp	r0, r3
  403330:	d02b      	beq.n	40338a <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403332:	4b28      	ldr	r3, [pc, #160]	; (4033d4 <usart_serial_putchar+0xc4>)
  403334:	4298      	cmp	r0, r3
  403336:	d031      	beq.n	40339c <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403338:	4b27      	ldr	r3, [pc, #156]	; (4033d8 <usart_serial_putchar+0xc8>)
  40333a:	4298      	cmp	r0, r3
  40333c:	d037      	beq.n	4033ae <usart_serial_putchar+0x9e>
	return 0;
  40333e:	2000      	movs	r0, #0
}
  403340:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403342:	461e      	mov	r6, r3
  403344:	4d25      	ldr	r5, [pc, #148]	; (4033dc <usart_serial_putchar+0xcc>)
  403346:	4621      	mov	r1, r4
  403348:	4630      	mov	r0, r6
  40334a:	47a8      	blx	r5
  40334c:	2800      	cmp	r0, #0
  40334e:	d1fa      	bne.n	403346 <usart_serial_putchar+0x36>
		return 1;
  403350:	2001      	movs	r0, #1
  403352:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403354:	461e      	mov	r6, r3
  403356:	4d21      	ldr	r5, [pc, #132]	; (4033dc <usart_serial_putchar+0xcc>)
  403358:	4621      	mov	r1, r4
  40335a:	4630      	mov	r0, r6
  40335c:	47a8      	blx	r5
  40335e:	2800      	cmp	r0, #0
  403360:	d1fa      	bne.n	403358 <usart_serial_putchar+0x48>
		return 1;
  403362:	2001      	movs	r0, #1
  403364:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403366:	461e      	mov	r6, r3
  403368:	4d1c      	ldr	r5, [pc, #112]	; (4033dc <usart_serial_putchar+0xcc>)
  40336a:	4621      	mov	r1, r4
  40336c:	4630      	mov	r0, r6
  40336e:	47a8      	blx	r5
  403370:	2800      	cmp	r0, #0
  403372:	d1fa      	bne.n	40336a <usart_serial_putchar+0x5a>
		return 1;
  403374:	2001      	movs	r0, #1
  403376:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403378:	461e      	mov	r6, r3
  40337a:	4d18      	ldr	r5, [pc, #96]	; (4033dc <usart_serial_putchar+0xcc>)
  40337c:	4621      	mov	r1, r4
  40337e:	4630      	mov	r0, r6
  403380:	47a8      	blx	r5
  403382:	2800      	cmp	r0, #0
  403384:	d1fa      	bne.n	40337c <usart_serial_putchar+0x6c>
		return 1;
  403386:	2001      	movs	r0, #1
  403388:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40338a:	461e      	mov	r6, r3
  40338c:	4d14      	ldr	r5, [pc, #80]	; (4033e0 <usart_serial_putchar+0xd0>)
  40338e:	4621      	mov	r1, r4
  403390:	4630      	mov	r0, r6
  403392:	47a8      	blx	r5
  403394:	2800      	cmp	r0, #0
  403396:	d1fa      	bne.n	40338e <usart_serial_putchar+0x7e>
		return 1;
  403398:	2001      	movs	r0, #1
  40339a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  40339c:	461e      	mov	r6, r3
  40339e:	4d10      	ldr	r5, [pc, #64]	; (4033e0 <usart_serial_putchar+0xd0>)
  4033a0:	4621      	mov	r1, r4
  4033a2:	4630      	mov	r0, r6
  4033a4:	47a8      	blx	r5
  4033a6:	2800      	cmp	r0, #0
  4033a8:	d1fa      	bne.n	4033a0 <usart_serial_putchar+0x90>
		return 1;
  4033aa:	2001      	movs	r0, #1
  4033ac:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  4033ae:	461e      	mov	r6, r3
  4033b0:	4d0b      	ldr	r5, [pc, #44]	; (4033e0 <usart_serial_putchar+0xd0>)
  4033b2:	4621      	mov	r1, r4
  4033b4:	4630      	mov	r0, r6
  4033b6:	47a8      	blx	r5
  4033b8:	2800      	cmp	r0, #0
  4033ba:	d1fa      	bne.n	4033b2 <usart_serial_putchar+0xa2>
		return 1;
  4033bc:	2001      	movs	r0, #1
  4033be:	bd70      	pop	{r4, r5, r6, pc}
  4033c0:	400e0800 	.word	0x400e0800
  4033c4:	400e0a00 	.word	0x400e0a00
  4033c8:	400e1a00 	.word	0x400e1a00
  4033cc:	400e1c00 	.word	0x400e1c00
  4033d0:	40024000 	.word	0x40024000
  4033d4:	40028000 	.word	0x40028000
  4033d8:	4002c000 	.word	0x4002c000
  4033dc:	00400b55 	.word	0x00400b55
  4033e0:	00400c65 	.word	0x00400c65

004033e4 <but1_callback>:
    while(*(pstring + i))
        if(uart_is_tx_empty(USART1))
            usart_serial_putchar(USART1, *(pstring+i++));
}

void but1_callback() {
  4033e4:	b508      	push	{r3, lr}
	xSemaphoreGiveFromISR(xSemaphore1, 4);
  4033e6:	2104      	movs	r1, #4
  4033e8:	4b02      	ldr	r3, [pc, #8]	; (4033f4 <but1_callback+0x10>)
  4033ea:	6818      	ldr	r0, [r3, #0]
  4033ec:	4b02      	ldr	r3, [pc, #8]	; (4033f8 <but1_callback+0x14>)
  4033ee:	4798      	blx	r3
  4033f0:	bd08      	pop	{r3, pc}
  4033f2:	bf00      	nop
  4033f4:	20400d24 	.word	0x20400d24
  4033f8:	00401981 	.word	0x00401981

004033fc <but2_callback>:
}
void but2_callback() {
  4033fc:	b508      	push	{r3, lr}
	xSemaphoreGiveFromISR(xSemaphore2, 4);
  4033fe:	2104      	movs	r1, #4
  403400:	4b02      	ldr	r3, [pc, #8]	; (40340c <but2_callback+0x10>)
  403402:	6818      	ldr	r0, [r3, #0]
  403404:	4b02      	ldr	r3, [pc, #8]	; (403410 <but2_callback+0x14>)
  403406:	4798      	blx	r3
  403408:	bd08      	pop	{r3, pc}
  40340a:	bf00      	nop
  40340c:	20400d2c 	.word	0x20400d2c
  403410:	00401981 	.word	0x00401981

00403414 <but3_callback>:
}
void but3_callback() {
  403414:	b508      	push	{r3, lr}
	xSemaphoreGiveFromISR(xSemaphore3, 4);
  403416:	2104      	movs	r1, #4
  403418:	4b02      	ldr	r3, [pc, #8]	; (403424 <but3_callback+0x10>)
  40341a:	6818      	ldr	r0, [r3, #0]
  40341c:	4b02      	ldr	r3, [pc, #8]	; (403428 <but3_callback+0x14>)
  40341e:	4798      	blx	r3
  403420:	bd08      	pop	{r3, pc}
  403422:	bf00      	nop
  403424:	20400d20 	.word	0x20400d20
  403428:	00401981 	.word	0x00401981

0040342c <task_led3>:
		  vTaskDelay(xDelay);
	}
  }
}

static void task_led3(void *pvParameters){
  40342c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403430:	b082      	sub	sp, #8
	pmc_enable_periph_clk(LED3_OLED_PIO_ID);
  403432:	200b      	movs	r0, #11
  403434:	4c2b      	ldr	r4, [pc, #172]	; (4034e4 <task_led3+0xb8>)
  403436:	47a0      	blx	r4
	pio_configure(LED3_OLED_PIO, PIO_OUTPUT_0, LED3_OLED_IDX_MASK, PIO_DEFAULT);
  403438:	2300      	movs	r3, #0
  40343a:	2204      	movs	r2, #4
  40343c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  403440:	4829      	ldr	r0, [pc, #164]	; (4034e8 <task_led3+0xbc>)
  403442:	4e2a      	ldr	r6, [pc, #168]	; (4034ec <task_led3+0xc0>)
  403444:	47b0      	blx	r6

	const TickType_t xDelay = 3000 / portTICK_PERIOD_MS;
	const TickType_t xDelayLed = 100 / portTICK_PERIOD_MS;
  
    xSemaphore3 = xSemaphoreCreateBinary();
  403446:	2203      	movs	r2, #3
  403448:	2100      	movs	r1, #0
  40344a:	2001      	movs	r0, #1
  40344c:	4b28      	ldr	r3, [pc, #160]	; (4034f0 <task_led3+0xc4>)
  40344e:	4798      	blx	r3
  403450:	4d28      	ldr	r5, [pc, #160]	; (4034f4 <task_led3+0xc8>)
  403452:	6028      	str	r0, [r5, #0]

	/* devemos iniciar a interrupcao no pino somente apos termos alocado
	os recursos (no caso semaforo), nessa funcao inicializamos 
	o botao e seu callback*/
	/* init bot�o */
	pmc_enable_periph_clk(BUT3_OLED_PIO_ID);
  403454:	200a      	movs	r0, #10
  403456:	47a0      	blx	r4
	pio_configure(BUT3_OLED_PIO, PIO_INPUT, BUT3_OLED_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403458:	4c27      	ldr	r4, [pc, #156]	; (4034f8 <task_led3+0xcc>)
  40345a:	2309      	movs	r3, #9
  40345c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403460:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403464:	4620      	mov	r0, r4
  403466:	47b0      	blx	r6
	pio_handler_set(BUT3_OLED_PIO, BUT3_OLED_PIO_ID, BUT3_OLED_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but3_callback);
  403468:	4b24      	ldr	r3, [pc, #144]	; (4034fc <task_led3+0xd0>)
  40346a:	9300      	str	r3, [sp, #0]
  40346c:	2350      	movs	r3, #80	; 0x50
  40346e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  403472:	210a      	movs	r1, #10
  403474:	4620      	mov	r0, r4
  403476:	4e22      	ldr	r6, [pc, #136]	; (403500 <task_led3+0xd4>)
  403478:	47b0      	blx	r6
	pio_enable_interrupt(BUT3_OLED_PIO, BUT3_OLED_PIO_IDX_MASK);
  40347a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40347e:	4620      	mov	r0, r4
  403480:	4b20      	ldr	r3, [pc, #128]	; (403504 <task_led3+0xd8>)
  403482:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  403484:	4b20      	ldr	r3, [pc, #128]	; (403508 <task_led3+0xdc>)
  403486:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40348a:	601a      	str	r2, [r3, #0]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  40348c:	2280      	movs	r2, #128	; 0x80
  40348e:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	NVIC_EnableIRQ(BUT3_OLED_PIO_ID);
	NVIC_SetPriority(BUT3_OLED_PIO_ID, 4); // Prioridade 4
	
	if (xSemaphore3 == NULL)
  403492:	682b      	ldr	r3, [r5, #0]
  403494:	b913      	cbnz	r3, 40349c <task_led3+0x70>
	  printf("falha em criar o semaforo \n");
  403496:	481d      	ldr	r0, [pc, #116]	; (40350c <task_led3+0xe0>)
  403498:	4b1d      	ldr	r3, [pc, #116]	; (403510 <task_led3+0xe4>)
  40349a:	4798      	blx	r3

  while (1) {
	 if( xSemaphoreTake(xSemaphore3, ( TickType_t ) 500) == pdTRUE ){
  40349c:	4e15      	ldr	r6, [pc, #84]	; (4034f4 <task_led3+0xc8>)
  40349e:	4d1d      	ldr	r5, [pc, #116]	; (403514 <task_led3+0xe8>)
		for (uint i=0; i<5; i++){
		  pio_clear(LED3_OLED_PIO, LED3_OLED_IDX_MASK);
		  vTaskDelay(xDelayLed);
  4034a0:	4f1d      	ldr	r7, [pc, #116]	; (403518 <task_led3+0xec>)
  4034a2:	e002      	b.n	4034aa <task_led3+0x7e>
		  pio_set(LED3_OLED_PIO, LED3_OLED_IDX_MASK);
		  vTaskDelay(xDelayLed);
		}
		  vTaskDelay(xDelay);
  4034a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4034a8:	47b8      	blx	r7
	 if( xSemaphoreTake(xSemaphore3, ( TickType_t ) 500) == pdTRUE ){
  4034aa:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
  4034ae:	4621      	mov	r1, r4
  4034b0:	6830      	ldr	r0, [r6, #0]
  4034b2:	47a8      	blx	r5
  4034b4:	2801      	cmp	r0, #1
  4034b6:	d1fa      	bne.n	4034ae <task_led3+0x82>
  4034b8:	2405      	movs	r4, #5
		  pio_clear(LED3_OLED_PIO, LED3_OLED_IDX_MASK);
  4034ba:	f8df 902c 	ldr.w	r9, [pc, #44]	; 4034e8 <task_led3+0xbc>
  4034be:	f04f 0804 	mov.w	r8, #4
  4034c2:	f8df a05c 	ldr.w	sl, [pc, #92]	; 403520 <task_led3+0xf4>
  4034c6:	4641      	mov	r1, r8
  4034c8:	4648      	mov	r0, r9
  4034ca:	47d0      	blx	sl
		  vTaskDelay(xDelayLed);
  4034cc:	2064      	movs	r0, #100	; 0x64
  4034ce:	47b8      	blx	r7
		  pio_set(LED3_OLED_PIO, LED3_OLED_IDX_MASK);
  4034d0:	4641      	mov	r1, r8
  4034d2:	4648      	mov	r0, r9
  4034d4:	4b11      	ldr	r3, [pc, #68]	; (40351c <task_led3+0xf0>)
  4034d6:	4798      	blx	r3
		  vTaskDelay(xDelayLed);
  4034d8:	2064      	movs	r0, #100	; 0x64
  4034da:	47b8      	blx	r7
		for (uint i=0; i<5; i++){
  4034dc:	3c01      	subs	r4, #1
  4034de:	d1f2      	bne.n	4034c6 <task_led3+0x9a>
  4034e0:	e7e0      	b.n	4034a4 <task_led3+0x78>
  4034e2:	bf00      	nop
  4034e4:	00400871 	.word	0x00400871
  4034e8:	400e1000 	.word	0x400e1000
  4034ec:	0040055d 	.word	0x0040055d
  4034f0:	00401621 	.word	0x00401621
  4034f4:	20400d20 	.word	0x20400d20
  4034f8:	400e0e00 	.word	0x400e0e00
  4034fc:	00403415 	.word	0x00403415
  403500:	0040067d 	.word	0x0040067d
  403504:	0040061f 	.word	0x0040061f
  403508:	e000e100 	.word	0xe000e100
  40350c:	0040a158 	.word	0x0040a158
  403510:	00403b99 	.word	0x00403b99
  403514:	00401bfd 	.word	0x00401bfd
  403518:	00402579 	.word	0x00402579
  40351c:	00400465 	.word	0x00400465
  403520:	00400469 	.word	0x00400469

00403524 <task_led2>:
static void task_led2(void *pvParameters){
  403524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  403528:	b083      	sub	sp, #12
	pmc_enable_periph_clk(LED2_OLED_PIO_ID);
  40352a:	200c      	movs	r0, #12
  40352c:	4f2b      	ldr	r7, [pc, #172]	; (4035dc <task_led2+0xb8>)
  40352e:	47b8      	blx	r7
	pio_configure(LED2_OLED_PIO, PIO_OUTPUT_0, LED2_OLED_IDX_MASK, PIO_DEFAULT);
  403530:	4c2b      	ldr	r4, [pc, #172]	; (4035e0 <task_led2+0xbc>)
  403532:	2300      	movs	r3, #0
  403534:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  403538:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40353c:	4620      	mov	r0, r4
  40353e:	4e29      	ldr	r6, [pc, #164]	; (4035e4 <task_led2+0xc0>)
  403540:	47b0      	blx	r6
    xSemaphore2 = xSemaphoreCreateBinary();
  403542:	2203      	movs	r2, #3
  403544:	2100      	movs	r1, #0
  403546:	2001      	movs	r0, #1
  403548:	4b27      	ldr	r3, [pc, #156]	; (4035e8 <task_led2+0xc4>)
  40354a:	4798      	blx	r3
  40354c:	4d27      	ldr	r5, [pc, #156]	; (4035ec <task_led2+0xc8>)
  40354e:	6028      	str	r0, [r5, #0]
	pmc_enable_periph_clk(BUT2_OLED_PIO_ID);
  403550:	200c      	movs	r0, #12
  403552:	47b8      	blx	r7
	pio_configure(BUT2_OLED_PIO, PIO_INPUT, BUT2_OLED_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403554:	2309      	movs	r3, #9
  403556:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40355a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  40355e:	4620      	mov	r0, r4
  403560:	47b0      	blx	r6
	pio_handler_set(BUT2_OLED_PIO, BUT2_OLED_PIO_ID, BUT2_OLED_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but2_callback);
  403562:	4b23      	ldr	r3, [pc, #140]	; (4035f0 <task_led2+0xcc>)
  403564:	9300      	str	r3, [sp, #0]
  403566:	2350      	movs	r3, #80	; 0x50
  403568:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  40356c:	210c      	movs	r1, #12
  40356e:	4620      	mov	r0, r4
  403570:	4e20      	ldr	r6, [pc, #128]	; (4035f4 <task_led2+0xd0>)
  403572:	47b0      	blx	r6
	pio_enable_interrupt(BUT2_OLED_PIO, BUT2_OLED_PIO_IDX_MASK);
  403574:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
  403578:	4620      	mov	r0, r4
  40357a:	4b1f      	ldr	r3, [pc, #124]	; (4035f8 <task_led2+0xd4>)
  40357c:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  40357e:	4b1f      	ldr	r3, [pc, #124]	; (4035fc <task_led2+0xd8>)
  403580:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  403584:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  403586:	2280      	movs	r2, #128	; 0x80
  403588:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	if (xSemaphore2 == NULL)
  40358c:	682b      	ldr	r3, [r5, #0]
  40358e:	b913      	cbnz	r3, 403596 <task_led2+0x72>
	  printf("falha em criar o semaforo \n");
  403590:	481b      	ldr	r0, [pc, #108]	; (403600 <task_led2+0xdc>)
  403592:	4b1c      	ldr	r3, [pc, #112]	; (403604 <task_led2+0xe0>)
  403594:	4798      	blx	r3
	 if( xSemaphoreTake(xSemaphore2, ( TickType_t ) 500) == pdTRUE ){
  403596:	4e15      	ldr	r6, [pc, #84]	; (4035ec <task_led2+0xc8>)
		  pio_clear(LED2_OLED_PIO, LED2_OLED_IDX_MASK);
  403598:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4035e0 <task_led2+0xbc>
		  vTaskDelay(xDelayLed);
  40359c:	4f1a      	ldr	r7, [pc, #104]	; (403608 <task_led2+0xe4>)
  40359e:	e002      	b.n	4035a6 <task_led2+0x82>
		  vTaskDelay(xDelay);
  4035a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
  4035a4:	47b8      	blx	r7
	 if( xSemaphoreTake(xSemaphore2, ( TickType_t ) 500) == pdTRUE ){
  4035a6:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
  4035aa:	4c18      	ldr	r4, [pc, #96]	; (40360c <task_led2+0xe8>)
  4035ac:	4629      	mov	r1, r5
  4035ae:	6830      	ldr	r0, [r6, #0]
  4035b0:	47a0      	blx	r4
  4035b2:	2801      	cmp	r0, #1
  4035b4:	d1fa      	bne.n	4035ac <task_led2+0x88>
  4035b6:	2405      	movs	r4, #5
		  pio_clear(LED2_OLED_PIO, LED2_OLED_IDX_MASK);
  4035b8:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  4035bc:	f8df 9054 	ldr.w	r9, [pc, #84]	; 403614 <task_led2+0xf0>
  4035c0:	4629      	mov	r1, r5
  4035c2:	4640      	mov	r0, r8
  4035c4:	47c8      	blx	r9
		  vTaskDelay(xDelayLed);
  4035c6:	2064      	movs	r0, #100	; 0x64
  4035c8:	47b8      	blx	r7
		  pio_set(LED2_OLED_PIO, LED2_OLED_IDX_MASK);
  4035ca:	4629      	mov	r1, r5
  4035cc:	4640      	mov	r0, r8
  4035ce:	4b10      	ldr	r3, [pc, #64]	; (403610 <task_led2+0xec>)
  4035d0:	4798      	blx	r3
		  vTaskDelay(xDelayLed);
  4035d2:	2064      	movs	r0, #100	; 0x64
  4035d4:	47b8      	blx	r7
		for (uint i=0; i<5; i++){
  4035d6:	3c01      	subs	r4, #1
  4035d8:	d1f2      	bne.n	4035c0 <task_led2+0x9c>
  4035da:	e7e1      	b.n	4035a0 <task_led2+0x7c>
  4035dc:	00400871 	.word	0x00400871
  4035e0:	400e1200 	.word	0x400e1200
  4035e4:	0040055d 	.word	0x0040055d
  4035e8:	00401621 	.word	0x00401621
  4035ec:	20400d2c 	.word	0x20400d2c
  4035f0:	004033fd 	.word	0x004033fd
  4035f4:	0040067d 	.word	0x0040067d
  4035f8:	0040061f 	.word	0x0040061f
  4035fc:	e000e100 	.word	0xe000e100
  403600:	0040a158 	.word	0x0040a158
  403604:	00403b99 	.word	0x00403b99
  403608:	00402579 	.word	0x00402579
  40360c:	00401bfd 	.word	0x00401bfd
  403610:	00400465 	.word	0x00400465
  403614:	00400469 	.word	0x00400469

00403618 <task_led1>:
static void task_led1(void *pvParameters){
  403618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40361c:	b083      	sub	sp, #12
	pmc_enable_periph_clk(LED1_OLED_PIO_ID);
  40361e:	200a      	movs	r0, #10
  403620:	4c2a      	ldr	r4, [pc, #168]	; (4036cc <task_led1+0xb4>)
  403622:	47a0      	blx	r4
	pio_configure(LED1_OLED_PIO, PIO_OUTPUT_0, LED1_OLED_IDX_MASK, PIO_DEFAULT);
  403624:	2300      	movs	r3, #0
  403626:	2201      	movs	r2, #1
  403628:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  40362c:	4828      	ldr	r0, [pc, #160]	; (4036d0 <task_led1+0xb8>)
  40362e:	4e29      	ldr	r6, [pc, #164]	; (4036d4 <task_led1+0xbc>)
  403630:	47b0      	blx	r6
    xSemaphore1 = xSemaphoreCreateBinary();
  403632:	2203      	movs	r2, #3
  403634:	2100      	movs	r1, #0
  403636:	2001      	movs	r0, #1
  403638:	4b27      	ldr	r3, [pc, #156]	; (4036d8 <task_led1+0xc0>)
  40363a:	4798      	blx	r3
  40363c:	4d27      	ldr	r5, [pc, #156]	; (4036dc <task_led1+0xc4>)
  40363e:	6028      	str	r0, [r5, #0]
	pmc_enable_periph_clk(BUT1_OLED_PIO_ID);
  403640:	2010      	movs	r0, #16
  403642:	47a0      	blx	r4
	pio_configure(BUT1_OLED_PIO, PIO_INPUT, BUT1_OLED_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  403644:	4c26      	ldr	r4, [pc, #152]	; (4036e0 <task_led1+0xc8>)
  403646:	2309      	movs	r3, #9
  403648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40364c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  403650:	4620      	mov	r0, r4
  403652:	47b0      	blx	r6
	pio_handler_set(BUT1_OLED_PIO, BUT1_OLED_PIO_ID, BUT1_OLED_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but1_callback);
  403654:	4b23      	ldr	r3, [pc, #140]	; (4036e4 <task_led1+0xcc>)
  403656:	9300      	str	r3, [sp, #0]
  403658:	2350      	movs	r3, #80	; 0x50
  40365a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40365e:	2110      	movs	r1, #16
  403660:	4620      	mov	r0, r4
  403662:	4e21      	ldr	r6, [pc, #132]	; (4036e8 <task_led1+0xd0>)
  403664:	47b0      	blx	r6
	pio_enable_interrupt(BUT1_OLED_PIO, BUT1_OLED_PIO_IDX_MASK);
  403666:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40366a:	4620      	mov	r0, r4
  40366c:	4b1f      	ldr	r3, [pc, #124]	; (4036ec <task_led1+0xd4>)
  40366e:	4798      	blx	r3
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  403670:	4b1f      	ldr	r3, [pc, #124]	; (4036f0 <task_led1+0xd8>)
  403672:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  403676:	601a      	str	r2, [r3, #0]
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  403678:	2280      	movs	r2, #128	; 0x80
  40367a:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	if (xSemaphore1 == NULL)
  40367e:	682b      	ldr	r3, [r5, #0]
  403680:	b913      	cbnz	r3, 403688 <task_led1+0x70>
	  printf("falha em criar o semaforo \n");
  403682:	481c      	ldr	r0, [pc, #112]	; (4036f4 <task_led1+0xdc>)
  403684:	4b1c      	ldr	r3, [pc, #112]	; (4036f8 <task_led1+0xe0>)
  403686:	4798      	blx	r3
	 if( xSemaphoreTake(xSemaphore1, ( TickType_t ) 500) == pdTRUE ){
  403688:	4e14      	ldr	r6, [pc, #80]	; (4036dc <task_led1+0xc4>)
		  pio_clear(LED1_OLED_PIO, LED1_OLED_IDX_MASK);
  40368a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 4036d0 <task_led1+0xb8>
		  vTaskDelay(xDelayLed);
  40368e:	4f1b      	ldr	r7, [pc, #108]	; (4036fc <task_led1+0xe4>)
  403690:	e002      	b.n	403698 <task_led1+0x80>
		  vTaskDelay(xDelay);
  403692:	f640 30b8 	movw	r0, #3000	; 0xbb8
  403696:	47b8      	blx	r7
	 if( xSemaphoreTake(xSemaphore1, ( TickType_t ) 500) == pdTRUE ){
  403698:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
  40369c:	4c18      	ldr	r4, [pc, #96]	; (403700 <task_led1+0xe8>)
  40369e:	4629      	mov	r1, r5
  4036a0:	6830      	ldr	r0, [r6, #0]
  4036a2:	47a0      	blx	r4
  4036a4:	2801      	cmp	r0, #1
  4036a6:	d1fa      	bne.n	40369e <task_led1+0x86>
  4036a8:	2405      	movs	r4, #5
		  pio_clear(LED1_OLED_PIO, LED1_OLED_IDX_MASK);
  4036aa:	2501      	movs	r5, #1
  4036ac:	f8df 9058 	ldr.w	r9, [pc, #88]	; 403708 <task_led1+0xf0>
  4036b0:	4629      	mov	r1, r5
  4036b2:	4640      	mov	r0, r8
  4036b4:	47c8      	blx	r9
		  vTaskDelay(xDelayLed);
  4036b6:	2064      	movs	r0, #100	; 0x64
  4036b8:	47b8      	blx	r7
		  pio_set(LED1_OLED_PIO, LED1_OLED_IDX_MASK);
  4036ba:	4629      	mov	r1, r5
  4036bc:	4640      	mov	r0, r8
  4036be:	4b11      	ldr	r3, [pc, #68]	; (403704 <task_led1+0xec>)
  4036c0:	4798      	blx	r3
		  vTaskDelay(xDelayLed);
  4036c2:	2064      	movs	r0, #100	; 0x64
  4036c4:	47b8      	blx	r7
		for (uint i=0; i<5; i++){
  4036c6:	3c01      	subs	r4, #1
  4036c8:	d1f2      	bne.n	4036b0 <task_led1+0x98>
  4036ca:	e7e2      	b.n	403692 <task_led1+0x7a>
  4036cc:	00400871 	.word	0x00400871
  4036d0:	400e0e00 	.word	0x400e0e00
  4036d4:	0040055d 	.word	0x0040055d
  4036d8:	00401621 	.word	0x00401621
  4036dc:	20400d24 	.word	0x20400d24
  4036e0:	400e1400 	.word	0x400e1400
  4036e4:	004033e5 	.word	0x004033e5
  4036e8:	0040067d 	.word	0x0040067d
  4036ec:	0040061f 	.word	0x0040061f
  4036f0:	e000e100 	.word	0xe000e100
  4036f4:	0040a158 	.word	0x0040a158
  4036f8:	00403b99 	.word	0x00403b99
  4036fc:	00402579 	.word	0x00402579
  403700:	00401bfd 	.word	0x00401bfd
  403704:	00400465 	.word	0x00400465
  403708:	00400469 	.word	0x00400469

0040370c <task_execute>:
			}
		}
	}
}

static void task_execute(void *pvParameters){	
  40370c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403710:	b084      	sub	sp, #16
  	char buffer[15];

	while (1)
	{
		if (xQueueReceive( xQueueCommand, &(buffer), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  403712:	f8df 8084 	ldr.w	r8, [pc, #132]	; 403798 <task_execute+0x8c>
  403716:	4f18      	ldr	r7, [pc, #96]	; (403778 <task_execute+0x6c>)
			printf("Buffer: '");
  403718:	4d18      	ldr	r5, [pc, #96]	; (40377c <task_execute+0x70>)
  40371a:	e006      	b.n	40372a <task_execute+0x1e>
			for (int i = 0; buffer[i] != NULL; i++)
				printf("%c,", buffer[i]);
			printf("'\n");
			if (buffer[4] == '1')
				xSemaphoreGive(xSemaphore1);
  40371c:	2300      	movs	r3, #0
  40371e:	461a      	mov	r2, r3
  403720:	4619      	mov	r1, r3
  403722:	4817      	ldr	r0, [pc, #92]	; (403780 <task_execute+0x74>)
  403724:	6800      	ldr	r0, [r0, #0]
  403726:	4c17      	ldr	r4, [pc, #92]	; (403784 <task_execute+0x78>)
  403728:	47a0      	blx	r4
		if (xQueueReceive( xQueueCommand, &(buffer), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  40372a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  40372e:	4669      	mov	r1, sp
  403730:	f8d8 0000 	ldr.w	r0, [r8]
  403734:	47b8      	blx	r7
  403736:	2800      	cmp	r0, #0
  403738:	d0f7      	beq.n	40372a <task_execute+0x1e>
			printf("Buffer: '");
  40373a:	4813      	ldr	r0, [pc, #76]	; (403788 <task_execute+0x7c>)
  40373c:	47a8      	blx	r5
			for (int i = 0; buffer[i] != NULL; i++)
  40373e:	f89d 1000 	ldrb.w	r1, [sp]
  403742:	b149      	cbz	r1, 403758 <task_execute+0x4c>
  403744:	f10d 0401 	add.w	r4, sp, #1
				printf("%c,", buffer[i]);
  403748:	4e10      	ldr	r6, [pc, #64]	; (40378c <task_execute+0x80>)
  40374a:	4630      	mov	r0, r6
  40374c:	47a8      	blx	r5
			for (int i = 0; buffer[i] != NULL; i++)
  40374e:	f814 3b01 	ldrb.w	r3, [r4], #1
  403752:	4619      	mov	r1, r3
  403754:	2b00      	cmp	r3, #0
  403756:	d1f8      	bne.n	40374a <task_execute+0x3e>
			printf("'\n");
  403758:	480d      	ldr	r0, [pc, #52]	; (403790 <task_execute+0x84>)
  40375a:	47a8      	blx	r5
			if (buffer[4] == '1')
  40375c:	f89d 3004 	ldrb.w	r3, [sp, #4]
  403760:	2b31      	cmp	r3, #49	; 0x31
  403762:	d0db      	beq.n	40371c <task_execute+0x10>
			else if (buffer[4] == '3')
  403764:	2b33      	cmp	r3, #51	; 0x33
  403766:	d1e0      	bne.n	40372a <task_execute+0x1e>
				xSemaphoreGive(xSemaphore3);
  403768:	2300      	movs	r3, #0
  40376a:	461a      	mov	r2, r3
  40376c:	4619      	mov	r1, r3
  40376e:	4809      	ldr	r0, [pc, #36]	; (403794 <task_execute+0x88>)
  403770:	6800      	ldr	r0, [r0, #0]
  403772:	4c04      	ldr	r4, [pc, #16]	; (403784 <task_execute+0x78>)
  403774:	47a0      	blx	r4
  403776:	e7d8      	b.n	40372a <task_execute+0x1e>
  403778:	00401a65 	.word	0x00401a65
  40377c:	00403b99 	.word	0x00403b99
  403780:	20400d24 	.word	0x20400d24
  403784:	0040167d 	.word	0x0040167d
  403788:	0040a144 	.word	0x0040a144
  40378c:	0040a150 	.word	0x0040a150
  403790:	0040a154 	.word	0x0040a154
  403794:	20400d20 	.word	0x20400d20
  403798:	20400d30 	.word	0x20400d30

0040379c <task_uartRX>:
static void task_uartRX(void *pvParameters){
  40379c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4037a0:	b086      	sub	sp, #24
	int index = 0;
  4037a2:	2600      	movs	r6, #0
		if (xQueueReceive( xQueueChar, &(c), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  4037a4:	4d13      	ldr	r5, [pc, #76]	; (4037f4 <task_uartRX+0x58>)
  4037a6:	4c14      	ldr	r4, [pc, #80]	; (4037f8 <task_uartRX+0x5c>)
				printf("C: %c\n", c);
  4037a8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 403808 <task_uartRX+0x6c>
  4037ac:	e00b      	b.n	4037c6 <task_uartRX+0x2a>
				buffer[index] = NULL;
  4037ae:	ab06      	add	r3, sp, #24
  4037b0:	4433      	add	r3, r6
  4037b2:	2600      	movs	r6, #0
  4037b4:	f803 6c10 	strb.w	r6, [r3, #-16]
      			xQueueSend(xQueueCommand, &buffer, 0);        /* send mesage to queue */
  4037b8:	4633      	mov	r3, r6
  4037ba:	4632      	mov	r2, r6
  4037bc:	a902      	add	r1, sp, #8
  4037be:	480f      	ldr	r0, [pc, #60]	; (4037fc <task_uartRX+0x60>)
  4037c0:	6800      	ldr	r0, [r0, #0]
  4037c2:	4f0f      	ldr	r7, [pc, #60]	; (403800 <task_uartRX+0x64>)
  4037c4:	47b8      	blx	r7
		if (xQueueReceive( xQueueChar, &(c), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  4037c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  4037ca:	f10d 0107 	add.w	r1, sp, #7
  4037ce:	6828      	ldr	r0, [r5, #0]
  4037d0:	47a0      	blx	r4
  4037d2:	2800      	cmp	r0, #0
  4037d4:	d0f7      	beq.n	4037c6 <task_uartRX+0x2a>
			if(c == '\n'){
  4037d6:	f89d 1007 	ldrb.w	r1, [sp, #7]
  4037da:	290a      	cmp	r1, #10
  4037dc:	d0e7      	beq.n	4037ae <task_uartRX+0x12>
				printf("C: %c\n", c);
  4037de:	4640      	mov	r0, r8
  4037e0:	4b08      	ldr	r3, [pc, #32]	; (403804 <task_uartRX+0x68>)
  4037e2:	4798      	blx	r3
				buffer[index] = c;
  4037e4:	ab06      	add	r3, sp, #24
  4037e6:	4433      	add	r3, r6
  4037e8:	f89d 2007 	ldrb.w	r2, [sp, #7]
  4037ec:	f803 2c10 	strb.w	r2, [r3, #-16]
				index++;
  4037f0:	3601      	adds	r6, #1
  4037f2:	e7e8      	b.n	4037c6 <task_uartRX+0x2a>
  4037f4:	20400d28 	.word	0x20400d28
  4037f8:	00401a65 	.word	0x00401a65
  4037fc:	20400d30 	.word	0x20400d30
  403800:	0040167d 	.word	0x0040167d
  403804:	00403b99 	.word	0x00403b99
  403808:	0040a184 	.word	0x0040a184

0040380c <task_monitor>:
{
  40380c:	b580      	push	{r7, lr}
    printf("--- task ## %u", (unsigned int)uxTaskGetNumberOfTasks());
  40380e:	4f09      	ldr	r7, [pc, #36]	; (403834 <task_monitor+0x28>)
  403810:	4e09      	ldr	r6, [pc, #36]	; (403838 <task_monitor+0x2c>)
  403812:	4d0a      	ldr	r5, [pc, #40]	; (40383c <task_monitor+0x30>)
  403814:	47b8      	blx	r7
  403816:	4601      	mov	r1, r0
  403818:	4630      	mov	r0, r6
  40381a:	47a8      	blx	r5
    vTaskList((signed portCHAR *)szList);
  40381c:	4c08      	ldr	r4, [pc, #32]	; (403840 <task_monitor+0x34>)
  40381e:	4620      	mov	r0, r4
  403820:	4b08      	ldr	r3, [pc, #32]	; (403844 <task_monitor+0x38>)
  403822:	4798      	blx	r3
    printf(szList);
  403824:	4620      	mov	r0, r4
  403826:	47a8      	blx	r5
    vTaskDelay(1000);
  403828:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  40382c:	4b06      	ldr	r3, [pc, #24]	; (403848 <task_monitor+0x3c>)
  40382e:	4798      	blx	r3
  403830:	e7f0      	b.n	403814 <task_monitor+0x8>
  403832:	bf00      	nop
  403834:	0040230d 	.word	0x0040230d
  403838:	0040a174 	.word	0x0040a174
  40383c:	00403b99 	.word	0x00403b99
  403840:	20400ba0 	.word	0x20400ba0
  403844:	00402ca5 	.word	0x00402ca5
  403848:	00402579 	.word	0x00402579

0040384c <USART1_Handler>:
void USART1_Handler(void){
  40384c:	b570      	push	{r4, r5, r6, lr}
  40384e:	b082      	sub	sp, #8
  uint32_t ret = usart_get_status(USART1);
  403850:	480e      	ldr	r0, [pc, #56]	; (40388c <USART1_Handler+0x40>)
  403852:	4b0f      	ldr	r3, [pc, #60]	; (403890 <USART1_Handler+0x44>)
  403854:	4798      	blx	r3
  if(ret & US_IER_RXRDY){
  403856:	f010 0f01 	tst.w	r0, #1
  40385a:	d101      	bne.n	403860 <USART1_Handler+0x14>
}
  40385c:	b002      	add	sp, #8
  40385e:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t val = 0;
  403860:	ac02      	add	r4, sp, #8
  403862:	2300      	movs	r3, #0
  403864:	f844 3d08 	str.w	r3, [r4, #-8]!
		while (usart_read(p_usart, &val));
  403868:	4e08      	ldr	r6, [pc, #32]	; (40388c <USART1_Handler+0x40>)
  40386a:	4d0a      	ldr	r5, [pc, #40]	; (403894 <USART1_Handler+0x48>)
  40386c:	4621      	mov	r1, r4
  40386e:	4630      	mov	r0, r6
  403870:	47a8      	blx	r5
  403872:	2800      	cmp	r0, #0
  403874:	d1fa      	bne.n	40386c <USART1_Handler+0x20>
		*data = (uint8_t)(val & 0xFF);
  403876:	a902      	add	r1, sp, #8
  403878:	9b00      	ldr	r3, [sp, #0]
  40387a:	f801 3d01 	strb.w	r3, [r1, #-1]!
      xQueueSendFromISR(xQueueChar, &c, 4);           /* send mesage to queue */
  40387e:	2300      	movs	r3, #0
  403880:	2204      	movs	r2, #4
  403882:	4805      	ldr	r0, [pc, #20]	; (403898 <USART1_Handler+0x4c>)
  403884:	6800      	ldr	r0, [r0, #0]
  403886:	4c05      	ldr	r4, [pc, #20]	; (40389c <USART1_Handler+0x50>)
  403888:	47a0      	blx	r4
}
  40388a:	e7e7      	b.n	40385c <USART1_Handler+0x10>
  40388c:	40028000 	.word	0x40028000
  403890:	00400c61 	.word	0x00400c61
  403894:	00400c7b 	.word	0x00400c7b
  403898:	20400d28 	.word	0x20400d28
  40389c:	0040186d 	.word	0x0040186d

004038a0 <vApplicationStackOverflowHook>:
{
  4038a0:	b508      	push	{r3, lr}
  printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  4038a2:	460a      	mov	r2, r1
  4038a4:	4601      	mov	r1, r0
  4038a6:	4802      	ldr	r0, [pc, #8]	; (4038b0 <vApplicationStackOverflowHook+0x10>)
  4038a8:	4b02      	ldr	r3, [pc, #8]	; (4038b4 <vApplicationStackOverflowHook+0x14>)
  4038aa:	4798      	blx	r3
  4038ac:	e7fe      	b.n	4038ac <vApplicationStackOverflowHook+0xc>
  4038ae:	bf00      	nop
  4038b0:	0040a18c 	.word	0x0040a18c
  4038b4:	00403b99 	.word	0x00403b99

004038b8 <vApplicationIdleHook>:
{
  4038b8:	b508      	push	{r3, lr}
	pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  4038ba:	2002      	movs	r0, #2
  4038bc:	4b01      	ldr	r3, [pc, #4]	; (4038c4 <vApplicationIdleHook+0xc>)
  4038be:	4798      	blx	r3
  4038c0:	bd08      	pop	{r3, pc}
  4038c2:	bf00      	nop
  4038c4:	004008e1 	.word	0x004008e1

004038c8 <vApplicationTickHook>:
{
  4038c8:	4770      	bx	lr

004038ca <vApplicationMallocFailedHook>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  4038ca:	f04f 0380 	mov.w	r3, #128	; 0x80
  4038ce:	b672      	cpsid	i
  4038d0:	f383 8811 	msr	BASEPRI, r3
  4038d4:	f3bf 8f6f 	isb	sy
  4038d8:	f3bf 8f4f 	dsb	sy
  4038dc:	b662      	cpsie	i
  4038de:	e7fe      	b.n	4038de <vApplicationMallocFailedHook+0x14>

004038e0 <main>:
*  \brief FreeRTOS Real Time Kernel example entry point.
*
*  \return Unused (ANSI-C compatibility).
*/
int main(void)
{
  4038e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4038e4:	b089      	sub	sp, #36	; 0x24
  /* Initialize the SAM system */
  sysclk_init();
  4038e6:	4b69      	ldr	r3, [pc, #420]	; (403a8c <main+0x1ac>)
  4038e8:	4798      	blx	r3
  board_init();
  4038ea:	4b69      	ldr	r3, [pc, #420]	; (403a90 <main+0x1b0>)
  4038ec:	4798      	blx	r3

  xQueueChar = xQueueCreate( 15, sizeof( char ) );
  4038ee:	2200      	movs	r2, #0
  4038f0:	2101      	movs	r1, #1
  4038f2:	200f      	movs	r0, #15
  4038f4:	4c67      	ldr	r4, [pc, #412]	; (403a94 <main+0x1b4>)
  4038f6:	47a0      	blx	r4
  4038f8:	4b67      	ldr	r3, [pc, #412]	; (403a98 <main+0x1b8>)
  4038fa:	6018      	str	r0, [r3, #0]
  xQueueCommand = xQueueCreate( 15, sizeof( char[15] ) );
  4038fc:	2200      	movs	r2, #0
  4038fe:	210f      	movs	r1, #15
  403900:	4608      	mov	r0, r1
  403902:	47a0      	blx	r4
  403904:	4b65      	ldr	r3, [pc, #404]	; (403a9c <main+0x1bc>)
  403906:	6018      	str	r0, [r3, #0]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  403908:	200b      	movs	r0, #11
  40390a:	f8df 8228 	ldr.w	r8, [pc, #552]	; 403b34 <main+0x254>
  40390e:	47c0      	blx	r8
  403910:	200a      	movs	r0, #10
  403912:	47c0      	blx	r8
  pio_set_peripheral(PIOB, PIO_PERIPH_D, PIO_PB4); // RX
  403914:	2210      	movs	r2, #16
  403916:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  40391a:	4861      	ldr	r0, [pc, #388]	; (403aa0 <main+0x1c0>)
  40391c:	4c61      	ldr	r4, [pc, #388]	; (403aa4 <main+0x1c4>)
  40391e:	47a0      	blx	r4
  pio_set_peripheral(PIOA, PIO_PERIPH_A, PIO_PA21); // TX
  403920:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  403924:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  403928:	485f      	ldr	r0, [pc, #380]	; (403aa8 <main+0x1c8>)
  40392a:	47a0      	blx	r4
  MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  40392c:	4a5f      	ldr	r2, [pc, #380]	; (403aac <main+0x1cc>)
  40392e:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  403932:	f043 0310 	orr.w	r3, r3, #16
  403936:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  40393a:	200e      	movs	r0, #14
  40393c:	47c0      	blx	r8
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  40393e:	4b5c      	ldr	r3, [pc, #368]	; (403ab0 <main+0x1d0>)
  403940:	4a5c      	ldr	r2, [pc, #368]	; (403ab4 <main+0x1d4>)
  403942:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403944:	4e5c      	ldr	r6, [pc, #368]	; (403ab8 <main+0x1d8>)
  403946:	4f5d      	ldr	r7, [pc, #372]	; (403abc <main+0x1dc>)
  403948:	6037      	str	r7, [r6, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  40394a:	4d5d      	ldr	r5, [pc, #372]	; (403ac0 <main+0x1e0>)
  40394c:	4b5d      	ldr	r3, [pc, #372]	; (403ac4 <main+0x1e4>)
  40394e:	602b      	str	r3, [r5, #0]
	usart_settings.baudrate = opt->baudrate;
  403950:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403954:	9302      	str	r3, [sp, #8]
	usart_settings.char_length = opt->charlength;
  403956:	23c0      	movs	r3, #192	; 0xc0
  403958:	9303      	str	r3, [sp, #12]
	usart_settings.parity_type = opt->paritytype;
  40395a:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40395e:	9304      	str	r3, [sp, #16]
	usart_settings.stop_bits= opt->stopbits;
  403960:	2400      	movs	r4, #0
  403962:	9405      	str	r4, [sp, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  403964:	9406      	str	r4, [sp, #24]
  403966:	200e      	movs	r0, #14
  403968:	47c0      	blx	r8
		usart_init_rs232(p_usart, &usart_settings,
  40396a:	4a57      	ldr	r2, [pc, #348]	; (403ac8 <main+0x1e8>)
  40396c:	a902      	add	r1, sp, #8
  40396e:	4851      	ldr	r0, [pc, #324]	; (403ab4 <main+0x1d4>)
  403970:	4b56      	ldr	r3, [pc, #344]	; (403acc <main+0x1ec>)
  403972:	4798      	blx	r3
		usart_enable_tx(p_usart);
  403974:	484f      	ldr	r0, [pc, #316]	; (403ab4 <main+0x1d4>)
  403976:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 403b38 <main+0x258>
  40397a:	47c8      	blx	r9
		usart_enable_rx(p_usart);
  40397c:	484d      	ldr	r0, [pc, #308]	; (403ab4 <main+0x1d4>)
  40397e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 403b3c <main+0x25c>
  403982:	47c0      	blx	r8
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403984:	f8df b1b8 	ldr.w	fp, [pc, #440]	; 403b40 <main+0x260>
  403988:	f8db 3000 	ldr.w	r3, [fp]
  40398c:	4621      	mov	r1, r4
  40398e:	6898      	ldr	r0, [r3, #8]
  403990:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 403b44 <main+0x264>
  403994:	47d0      	blx	sl
	setbuf(stdin, NULL);
  403996:	f8db 3000 	ldr.w	r3, [fp]
  40399a:	4621      	mov	r1, r4
  40399c:	6858      	ldr	r0, [r3, #4]
  40399e:	47d0      	blx	sl
  usart_enable_tx(USART1);
  4039a0:	4844      	ldr	r0, [pc, #272]	; (403ab4 <main+0x1d4>)
  4039a2:	47c8      	blx	r9
  usart_enable_rx(USART1);
  4039a4:	4843      	ldr	r0, [pc, #268]	; (403ab4 <main+0x1d4>)
  4039a6:	47c0      	blx	r8
  ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  4039a8:	6037      	str	r7, [r6, #0]
  ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  4039aa:	4b46      	ldr	r3, [pc, #280]	; (403ac4 <main+0x1e4>)
  4039ac:	602b      	str	r3, [r5, #0]
  usart_enable_interrupt(USART1, US_IER_RXRDY);
  4039ae:	2101      	movs	r1, #1
  4039b0:	4840      	ldr	r0, [pc, #256]	; (403ab4 <main+0x1d4>)
  4039b2:	4b47      	ldr	r3, [pc, #284]	; (403ad0 <main+0x1f0>)
  4039b4:	4798      	blx	r3
  4039b6:	4b47      	ldr	r3, [pc, #284]	; (403ad4 <main+0x1f4>)
  4039b8:	2280      	movs	r2, #128	; 0x80
  4039ba:	f883 230e 	strb.w	r2, [r3, #782]	; 0x30e
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  4039be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  4039c2:	601a      	str	r2, [r3, #0]

  /* Initialize the console uart */
  USART1_init();

  /* Output demo information. */
  printf("-- Freertos Example --\n\r");
  4039c4:	4844      	ldr	r0, [pc, #272]	; (403ad8 <main+0x1f8>)
  4039c6:	4d45      	ldr	r5, [pc, #276]	; (403adc <main+0x1fc>)
  4039c8:	47a8      	blx	r5
  printf("-- %s\n\r", BOARD_NAME);
  4039ca:	4945      	ldr	r1, [pc, #276]	; (403ae0 <main+0x200>)
  4039cc:	4845      	ldr	r0, [pc, #276]	; (403ae4 <main+0x204>)
  4039ce:	47a8      	blx	r5
  printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
  4039d0:	4a45      	ldr	r2, [pc, #276]	; (403ae8 <main+0x208>)
  4039d2:	4946      	ldr	r1, [pc, #280]	; (403aec <main+0x20c>)
  4039d4:	4846      	ldr	r0, [pc, #280]	; (403af0 <main+0x210>)
  4039d6:	47a8      	blx	r5


  /* Create task to monitor processor activity */
  if (xTaskCreate(task_monitor, "Monitor", TASK_MONITOR_STACK_SIZE, NULL, TASK_MONITOR_STACK_PRIORITY, NULL) != pdPASS)
  4039d8:	9401      	str	r4, [sp, #4]
  4039da:	9400      	str	r4, [sp, #0]
  4039dc:	4623      	mov	r3, r4
  4039de:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4039e2:	4944      	ldr	r1, [pc, #272]	; (403af4 <main+0x214>)
  4039e4:	4844      	ldr	r0, [pc, #272]	; (403af8 <main+0x218>)
  4039e6:	4c45      	ldr	r4, [pc, #276]	; (403afc <main+0x21c>)
  4039e8:	47a0      	blx	r4
  4039ea:	2801      	cmp	r0, #1
  4039ec:	d001      	beq.n	4039f2 <main+0x112>
    printf("Failed to create Monitor task\r\n");
  4039ee:	4844      	ldr	r0, [pc, #272]	; (403b00 <main+0x220>)
  4039f0:	47a8      	blx	r5

  /* Create task to monitor processor activity */
  if (xTaskCreate(task_uartRX, "UART", TASK_UARTRX_STACK_SIZE, NULL, TASK_UARTRX_STACK_PRIORITY, NULL) != pdPASS)
  4039f2:	2300      	movs	r3, #0
  4039f4:	9301      	str	r3, [sp, #4]
  4039f6:	9300      	str	r3, [sp, #0]
  4039f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  4039fc:	4941      	ldr	r1, [pc, #260]	; (403b04 <main+0x224>)
  4039fe:	4842      	ldr	r0, [pc, #264]	; (403b08 <main+0x228>)
  403a00:	4c3e      	ldr	r4, [pc, #248]	; (403afc <main+0x21c>)
  403a02:	47a0      	blx	r4
  403a04:	2801      	cmp	r0, #1
  403a06:	d002      	beq.n	403a0e <main+0x12e>
    printf("Failed to create Monitor task\r\n");
  403a08:	483d      	ldr	r0, [pc, #244]	; (403b00 <main+0x220>)
  403a0a:	4b34      	ldr	r3, [pc, #208]	; (403adc <main+0x1fc>)
  403a0c:	4798      	blx	r3

	  /* Create task to monitor processor activity */
  if (xTaskCreate(task_execute, "Execute", TASK_EXECUTE_STACK_SIZE, NULL, TASK_EXECUTE_STACK_PRIORITY, NULL) != pdPASS)
  403a0e:	2300      	movs	r3, #0
  403a10:	9301      	str	r3, [sp, #4]
  403a12:	9300      	str	r3, [sp, #0]
  403a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
  403a18:	493c      	ldr	r1, [pc, #240]	; (403b0c <main+0x22c>)
  403a1a:	483d      	ldr	r0, [pc, #244]	; (403b10 <main+0x230>)
  403a1c:	4c37      	ldr	r4, [pc, #220]	; (403afc <main+0x21c>)
  403a1e:	47a0      	blx	r4
  403a20:	2801      	cmp	r0, #1
  403a22:	d002      	beq.n	403a2a <main+0x14a>
    printf("Failed to create Monitor task\r\n");
  403a24:	4836      	ldr	r0, [pc, #216]	; (403b00 <main+0x220>)
  403a26:	4b2d      	ldr	r3, [pc, #180]	; (403adc <main+0x1fc>)
  403a28:	4798      	blx	r3

  /* Create task to make led blink */
  if (xTaskCreate(task_led1, "Led1", TASK_LED1_STACK_SIZE, NULL,  TASK_LED1_STACK_PRIORITY, NULL) != pdPASS)
  403a2a:	2300      	movs	r3, #0
  403a2c:	9301      	str	r3, [sp, #4]
  403a2e:	9300      	str	r3, [sp, #0]
  403a30:	f44f 7200 	mov.w	r2, #512	; 0x200
  403a34:	4937      	ldr	r1, [pc, #220]	; (403b14 <main+0x234>)
  403a36:	4838      	ldr	r0, [pc, #224]	; (403b18 <main+0x238>)
  403a38:	4c30      	ldr	r4, [pc, #192]	; (403afc <main+0x21c>)
  403a3a:	47a0      	blx	r4
  403a3c:	2801      	cmp	r0, #1
  403a3e:	d002      	beq.n	403a46 <main+0x166>
    printf("Failed to create test led task\r\n");
  403a40:	4836      	ldr	r0, [pc, #216]	; (403b1c <main+0x23c>)
  403a42:	4b26      	ldr	r3, [pc, #152]	; (403adc <main+0x1fc>)
  403a44:	4798      	blx	r3
 
  /* Create task to make led blink */
  if (xTaskCreate(task_led2, "Led2", TASK_LED2_STACK_SIZE, NULL, TASK_LED2_STACK_PRIORITY, NULL) != pdPASS)
  403a46:	2300      	movs	r3, #0
  403a48:	9301      	str	r3, [sp, #4]
  403a4a:	9300      	str	r3, [sp, #0]
  403a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
  403a50:	4933      	ldr	r1, [pc, #204]	; (403b20 <main+0x240>)
  403a52:	4834      	ldr	r0, [pc, #208]	; (403b24 <main+0x244>)
  403a54:	4c29      	ldr	r4, [pc, #164]	; (403afc <main+0x21c>)
  403a56:	47a0      	blx	r4
  403a58:	2801      	cmp	r0, #1
  403a5a:	d002      	beq.n	403a62 <main+0x182>
	  printf("Failed to create test led task\r\n");
  403a5c:	482f      	ldr	r0, [pc, #188]	; (403b1c <main+0x23c>)
  403a5e:	4b1f      	ldr	r3, [pc, #124]	; (403adc <main+0x1fc>)
  403a60:	4798      	blx	r3
  
  /* Create task to make led blink */
  if (xTaskCreate(task_led3, "Led3", TASK_LED3_STACK_SIZE, NULL, TASK_LED3_STACK_PRIORITY, NULL) != pdPASS)
  403a62:	2300      	movs	r3, #0
  403a64:	9301      	str	r3, [sp, #4]
  403a66:	9300      	str	r3, [sp, #0]
  403a68:	f44f 7200 	mov.w	r2, #512	; 0x200
  403a6c:	492e      	ldr	r1, [pc, #184]	; (403b28 <main+0x248>)
  403a6e:	482f      	ldr	r0, [pc, #188]	; (403b2c <main+0x24c>)
  403a70:	4c22      	ldr	r4, [pc, #136]	; (403afc <main+0x21c>)
  403a72:	47a0      	blx	r4
  403a74:	2801      	cmp	r0, #1
  403a76:	d002      	beq.n	403a7e <main+0x19e>
	printf("Failed to create test led task\r\n");
  403a78:	4828      	ldr	r0, [pc, #160]	; (403b1c <main+0x23c>)
  403a7a:	4b18      	ldr	r3, [pc, #96]	; (403adc <main+0x1fc>)
  403a7c:	4798      	blx	r3
 
  /* Start the scheduler. */
  vTaskStartScheduler();
  403a7e:	4b2c      	ldr	r3, [pc, #176]	; (403b30 <main+0x250>)
  403a80:	4798      	blx	r3

  /* Will only get here if there was insufficient memory to create the idle task. */
  return 0;
}
  403a82:	2000      	movs	r0, #0
  403a84:	b009      	add	sp, #36	; 0x24
  403a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a8a:	bf00      	nop
  403a8c:	004001d5 	.word	0x004001d5
  403a90:	004002d1 	.word	0x004002d1
  403a94:	00401621 	.word	0x00401621
  403a98:	20400d28 	.word	0x20400d28
  403a9c:	20400d30 	.word	0x20400d30
  403aa0:	400e1000 	.word	0x400e1000
  403aa4:	0040046d 	.word	0x0040046d
  403aa8:	400e0e00 	.word	0x400e0e00
  403aac:	40088000 	.word	0x40088000
  403ab0:	20400cdc 	.word	0x20400cdc
  403ab4:	40028000 	.word	0x40028000
  403ab8:	20400cd8 	.word	0x20400cd8
  403abc:	00403311 	.word	0x00403311
  403ac0:	20400cd4 	.word	0x20400cd4
  403ac4:	00403235 	.word	0x00403235
  403ac8:	08f0d180 	.word	0x08f0d180
  403acc:	00400bfd 	.word	0x00400bfd
  403ad0:	00400c5d 	.word	0x00400c5d
  403ad4:	e000e100 	.word	0xe000e100
  403ad8:	0040a070 	.word	0x0040a070
  403adc:	00403b99 	.word	0x00403b99
  403ae0:	0040a08c 	.word	0x0040a08c
  403ae4:	0040a098 	.word	0x0040a098
  403ae8:	0040a0a0 	.word	0x0040a0a0
  403aec:	0040a0ac 	.word	0x0040a0ac
  403af0:	0040a0b8 	.word	0x0040a0b8
  403af4:	0040a0d0 	.word	0x0040a0d0
  403af8:	0040380d 	.word	0x0040380d
  403afc:	00401fe1 	.word	0x00401fe1
  403b00:	0040a0d8 	.word	0x0040a0d8
  403b04:	0040a0f8 	.word	0x0040a0f8
  403b08:	0040379d 	.word	0x0040379d
  403b0c:	0040a100 	.word	0x0040a100
  403b10:	0040370d 	.word	0x0040370d
  403b14:	0040a108 	.word	0x0040a108
  403b18:	00403619 	.word	0x00403619
  403b1c:	0040a110 	.word	0x0040a110
  403b20:	0040a134 	.word	0x0040a134
  403b24:	00403525 	.word	0x00403525
  403b28:	0040a13c 	.word	0x0040a13c
  403b2c:	0040342d 	.word	0x0040342d
  403b30:	0040225d 	.word	0x0040225d
  403b34:	00400871 	.word	0x00400871
  403b38:	00400c51 	.word	0x00400c51
  403b3c:	00400c57 	.word	0x00400c57
  403b40:	2040000c 	.word	0x2040000c
  403b44:	0040434d 	.word	0x0040434d

00403b48 <__libc_init_array>:
  403b48:	b570      	push	{r4, r5, r6, lr}
  403b4a:	4e0f      	ldr	r6, [pc, #60]	; (403b88 <__libc_init_array+0x40>)
  403b4c:	4d0f      	ldr	r5, [pc, #60]	; (403b8c <__libc_init_array+0x44>)
  403b4e:	1b76      	subs	r6, r6, r5
  403b50:	10b6      	asrs	r6, r6, #2
  403b52:	bf18      	it	ne
  403b54:	2400      	movne	r4, #0
  403b56:	d005      	beq.n	403b64 <__libc_init_array+0x1c>
  403b58:	3401      	adds	r4, #1
  403b5a:	f855 3b04 	ldr.w	r3, [r5], #4
  403b5e:	4798      	blx	r3
  403b60:	42a6      	cmp	r6, r4
  403b62:	d1f9      	bne.n	403b58 <__libc_init_array+0x10>
  403b64:	4e0a      	ldr	r6, [pc, #40]	; (403b90 <__libc_init_array+0x48>)
  403b66:	4d0b      	ldr	r5, [pc, #44]	; (403b94 <__libc_init_array+0x4c>)
  403b68:	1b76      	subs	r6, r6, r5
  403b6a:	f006 fc71 	bl	40a450 <_init>
  403b6e:	10b6      	asrs	r6, r6, #2
  403b70:	bf18      	it	ne
  403b72:	2400      	movne	r4, #0
  403b74:	d006      	beq.n	403b84 <__libc_init_array+0x3c>
  403b76:	3401      	adds	r4, #1
  403b78:	f855 3b04 	ldr.w	r3, [r5], #4
  403b7c:	4798      	blx	r3
  403b7e:	42a6      	cmp	r6, r4
  403b80:	d1f9      	bne.n	403b76 <__libc_init_array+0x2e>
  403b82:	bd70      	pop	{r4, r5, r6, pc}
  403b84:	bd70      	pop	{r4, r5, r6, pc}
  403b86:	bf00      	nop
  403b88:	0040a45c 	.word	0x0040a45c
  403b8c:	0040a45c 	.word	0x0040a45c
  403b90:	0040a464 	.word	0x0040a464
  403b94:	0040a45c 	.word	0x0040a45c

00403b98 <iprintf>:
  403b98:	b40f      	push	{r0, r1, r2, r3}
  403b9a:	b500      	push	{lr}
  403b9c:	4907      	ldr	r1, [pc, #28]	; (403bbc <iprintf+0x24>)
  403b9e:	b083      	sub	sp, #12
  403ba0:	ab04      	add	r3, sp, #16
  403ba2:	6808      	ldr	r0, [r1, #0]
  403ba4:	f853 2b04 	ldr.w	r2, [r3], #4
  403ba8:	6881      	ldr	r1, [r0, #8]
  403baa:	9301      	str	r3, [sp, #4]
  403bac:	f002 f804 	bl	405bb8 <_vfiprintf_r>
  403bb0:	b003      	add	sp, #12
  403bb2:	f85d eb04 	ldr.w	lr, [sp], #4
  403bb6:	b004      	add	sp, #16
  403bb8:	4770      	bx	lr
  403bba:	bf00      	nop
  403bbc:	2040000c 	.word	0x2040000c

00403bc0 <malloc>:
  403bc0:	4b02      	ldr	r3, [pc, #8]	; (403bcc <malloc+0xc>)
  403bc2:	4601      	mov	r1, r0
  403bc4:	6818      	ldr	r0, [r3, #0]
  403bc6:	f000 b80b 	b.w	403be0 <_malloc_r>
  403bca:	bf00      	nop
  403bcc:	2040000c 	.word	0x2040000c

00403bd0 <free>:
  403bd0:	4b02      	ldr	r3, [pc, #8]	; (403bdc <free+0xc>)
  403bd2:	4601      	mov	r1, r0
  403bd4:	6818      	ldr	r0, [r3, #0]
  403bd6:	f004 b8cb 	b.w	407d70 <_free_r>
  403bda:	bf00      	nop
  403bdc:	2040000c 	.word	0x2040000c

00403be0 <_malloc_r>:
  403be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403be4:	f101 060b 	add.w	r6, r1, #11
  403be8:	2e16      	cmp	r6, #22
  403bea:	b083      	sub	sp, #12
  403bec:	4605      	mov	r5, r0
  403bee:	f240 809e 	bls.w	403d2e <_malloc_r+0x14e>
  403bf2:	f036 0607 	bics.w	r6, r6, #7
  403bf6:	f100 80bd 	bmi.w	403d74 <_malloc_r+0x194>
  403bfa:	42b1      	cmp	r1, r6
  403bfc:	f200 80ba 	bhi.w	403d74 <_malloc_r+0x194>
  403c00:	f000 fb86 	bl	404310 <__malloc_lock>
  403c04:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403c08:	f0c0 8293 	bcc.w	404132 <_malloc_r+0x552>
  403c0c:	0a73      	lsrs	r3, r6, #9
  403c0e:	f000 80b8 	beq.w	403d82 <_malloc_r+0x1a2>
  403c12:	2b04      	cmp	r3, #4
  403c14:	f200 8179 	bhi.w	403f0a <_malloc_r+0x32a>
  403c18:	09b3      	lsrs	r3, r6, #6
  403c1a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403c1e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403c22:	00c3      	lsls	r3, r0, #3
  403c24:	4fbf      	ldr	r7, [pc, #764]	; (403f24 <_malloc_r+0x344>)
  403c26:	443b      	add	r3, r7
  403c28:	f1a3 0108 	sub.w	r1, r3, #8
  403c2c:	685c      	ldr	r4, [r3, #4]
  403c2e:	42a1      	cmp	r1, r4
  403c30:	d106      	bne.n	403c40 <_malloc_r+0x60>
  403c32:	e00c      	b.n	403c4e <_malloc_r+0x6e>
  403c34:	2a00      	cmp	r2, #0
  403c36:	f280 80aa 	bge.w	403d8e <_malloc_r+0x1ae>
  403c3a:	68e4      	ldr	r4, [r4, #12]
  403c3c:	42a1      	cmp	r1, r4
  403c3e:	d006      	beq.n	403c4e <_malloc_r+0x6e>
  403c40:	6863      	ldr	r3, [r4, #4]
  403c42:	f023 0303 	bic.w	r3, r3, #3
  403c46:	1b9a      	subs	r2, r3, r6
  403c48:	2a0f      	cmp	r2, #15
  403c4a:	ddf3      	ble.n	403c34 <_malloc_r+0x54>
  403c4c:	4670      	mov	r0, lr
  403c4e:	693c      	ldr	r4, [r7, #16]
  403c50:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403f38 <_malloc_r+0x358>
  403c54:	4574      	cmp	r4, lr
  403c56:	f000 81ab 	beq.w	403fb0 <_malloc_r+0x3d0>
  403c5a:	6863      	ldr	r3, [r4, #4]
  403c5c:	f023 0303 	bic.w	r3, r3, #3
  403c60:	1b9a      	subs	r2, r3, r6
  403c62:	2a0f      	cmp	r2, #15
  403c64:	f300 8190 	bgt.w	403f88 <_malloc_r+0x3a8>
  403c68:	2a00      	cmp	r2, #0
  403c6a:	f8c7 e014 	str.w	lr, [r7, #20]
  403c6e:	f8c7 e010 	str.w	lr, [r7, #16]
  403c72:	f280 809d 	bge.w	403db0 <_malloc_r+0x1d0>
  403c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403c7a:	f080 8161 	bcs.w	403f40 <_malloc_r+0x360>
  403c7e:	08db      	lsrs	r3, r3, #3
  403c80:	f103 0c01 	add.w	ip, r3, #1
  403c84:	1099      	asrs	r1, r3, #2
  403c86:	687a      	ldr	r2, [r7, #4]
  403c88:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403c8c:	f8c4 8008 	str.w	r8, [r4, #8]
  403c90:	2301      	movs	r3, #1
  403c92:	408b      	lsls	r3, r1
  403c94:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403c98:	4313      	orrs	r3, r2
  403c9a:	3908      	subs	r1, #8
  403c9c:	60e1      	str	r1, [r4, #12]
  403c9e:	607b      	str	r3, [r7, #4]
  403ca0:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403ca4:	f8c8 400c 	str.w	r4, [r8, #12]
  403ca8:	1082      	asrs	r2, r0, #2
  403caa:	2401      	movs	r4, #1
  403cac:	4094      	lsls	r4, r2
  403cae:	429c      	cmp	r4, r3
  403cb0:	f200 808b 	bhi.w	403dca <_malloc_r+0x1ea>
  403cb4:	421c      	tst	r4, r3
  403cb6:	d106      	bne.n	403cc6 <_malloc_r+0xe6>
  403cb8:	f020 0003 	bic.w	r0, r0, #3
  403cbc:	0064      	lsls	r4, r4, #1
  403cbe:	421c      	tst	r4, r3
  403cc0:	f100 0004 	add.w	r0, r0, #4
  403cc4:	d0fa      	beq.n	403cbc <_malloc_r+0xdc>
  403cc6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403cca:	46cc      	mov	ip, r9
  403ccc:	4680      	mov	r8, r0
  403cce:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403cd2:	459c      	cmp	ip, r3
  403cd4:	d107      	bne.n	403ce6 <_malloc_r+0x106>
  403cd6:	e16d      	b.n	403fb4 <_malloc_r+0x3d4>
  403cd8:	2a00      	cmp	r2, #0
  403cda:	f280 817b 	bge.w	403fd4 <_malloc_r+0x3f4>
  403cde:	68db      	ldr	r3, [r3, #12]
  403ce0:	459c      	cmp	ip, r3
  403ce2:	f000 8167 	beq.w	403fb4 <_malloc_r+0x3d4>
  403ce6:	6859      	ldr	r1, [r3, #4]
  403ce8:	f021 0103 	bic.w	r1, r1, #3
  403cec:	1b8a      	subs	r2, r1, r6
  403cee:	2a0f      	cmp	r2, #15
  403cf0:	ddf2      	ble.n	403cd8 <_malloc_r+0xf8>
  403cf2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403cf6:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403cfa:	9300      	str	r3, [sp, #0]
  403cfc:	199c      	adds	r4, r3, r6
  403cfe:	4628      	mov	r0, r5
  403d00:	f046 0601 	orr.w	r6, r6, #1
  403d04:	f042 0501 	orr.w	r5, r2, #1
  403d08:	605e      	str	r6, [r3, #4]
  403d0a:	f8c8 c00c 	str.w	ip, [r8, #12]
  403d0e:	f8cc 8008 	str.w	r8, [ip, #8]
  403d12:	617c      	str	r4, [r7, #20]
  403d14:	613c      	str	r4, [r7, #16]
  403d16:	f8c4 e00c 	str.w	lr, [r4, #12]
  403d1a:	f8c4 e008 	str.w	lr, [r4, #8]
  403d1e:	6065      	str	r5, [r4, #4]
  403d20:	505a      	str	r2, [r3, r1]
  403d22:	f000 fafb 	bl	40431c <__malloc_unlock>
  403d26:	9b00      	ldr	r3, [sp, #0]
  403d28:	f103 0408 	add.w	r4, r3, #8
  403d2c:	e01e      	b.n	403d6c <_malloc_r+0x18c>
  403d2e:	2910      	cmp	r1, #16
  403d30:	d820      	bhi.n	403d74 <_malloc_r+0x194>
  403d32:	f000 faed 	bl	404310 <__malloc_lock>
  403d36:	2610      	movs	r6, #16
  403d38:	2318      	movs	r3, #24
  403d3a:	2002      	movs	r0, #2
  403d3c:	4f79      	ldr	r7, [pc, #484]	; (403f24 <_malloc_r+0x344>)
  403d3e:	443b      	add	r3, r7
  403d40:	f1a3 0208 	sub.w	r2, r3, #8
  403d44:	685c      	ldr	r4, [r3, #4]
  403d46:	4294      	cmp	r4, r2
  403d48:	f000 813d 	beq.w	403fc6 <_malloc_r+0x3e6>
  403d4c:	6863      	ldr	r3, [r4, #4]
  403d4e:	68e1      	ldr	r1, [r4, #12]
  403d50:	68a6      	ldr	r6, [r4, #8]
  403d52:	f023 0303 	bic.w	r3, r3, #3
  403d56:	4423      	add	r3, r4
  403d58:	4628      	mov	r0, r5
  403d5a:	685a      	ldr	r2, [r3, #4]
  403d5c:	60f1      	str	r1, [r6, #12]
  403d5e:	f042 0201 	orr.w	r2, r2, #1
  403d62:	608e      	str	r6, [r1, #8]
  403d64:	605a      	str	r2, [r3, #4]
  403d66:	f000 fad9 	bl	40431c <__malloc_unlock>
  403d6a:	3408      	adds	r4, #8
  403d6c:	4620      	mov	r0, r4
  403d6e:	b003      	add	sp, #12
  403d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d74:	2400      	movs	r4, #0
  403d76:	230c      	movs	r3, #12
  403d78:	4620      	mov	r0, r4
  403d7a:	602b      	str	r3, [r5, #0]
  403d7c:	b003      	add	sp, #12
  403d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d82:	2040      	movs	r0, #64	; 0x40
  403d84:	f44f 7300 	mov.w	r3, #512	; 0x200
  403d88:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403d8c:	e74a      	b.n	403c24 <_malloc_r+0x44>
  403d8e:	4423      	add	r3, r4
  403d90:	68e1      	ldr	r1, [r4, #12]
  403d92:	685a      	ldr	r2, [r3, #4]
  403d94:	68a6      	ldr	r6, [r4, #8]
  403d96:	f042 0201 	orr.w	r2, r2, #1
  403d9a:	60f1      	str	r1, [r6, #12]
  403d9c:	4628      	mov	r0, r5
  403d9e:	608e      	str	r6, [r1, #8]
  403da0:	605a      	str	r2, [r3, #4]
  403da2:	f000 fabb 	bl	40431c <__malloc_unlock>
  403da6:	3408      	adds	r4, #8
  403da8:	4620      	mov	r0, r4
  403daa:	b003      	add	sp, #12
  403dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403db0:	4423      	add	r3, r4
  403db2:	4628      	mov	r0, r5
  403db4:	685a      	ldr	r2, [r3, #4]
  403db6:	f042 0201 	orr.w	r2, r2, #1
  403dba:	605a      	str	r2, [r3, #4]
  403dbc:	f000 faae 	bl	40431c <__malloc_unlock>
  403dc0:	3408      	adds	r4, #8
  403dc2:	4620      	mov	r0, r4
  403dc4:	b003      	add	sp, #12
  403dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403dca:	68bc      	ldr	r4, [r7, #8]
  403dcc:	6863      	ldr	r3, [r4, #4]
  403dce:	f023 0803 	bic.w	r8, r3, #3
  403dd2:	45b0      	cmp	r8, r6
  403dd4:	d304      	bcc.n	403de0 <_malloc_r+0x200>
  403dd6:	eba8 0306 	sub.w	r3, r8, r6
  403dda:	2b0f      	cmp	r3, #15
  403ddc:	f300 8085 	bgt.w	403eea <_malloc_r+0x30a>
  403de0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403f3c <_malloc_r+0x35c>
  403de4:	4b50      	ldr	r3, [pc, #320]	; (403f28 <_malloc_r+0x348>)
  403de6:	f8d9 2000 	ldr.w	r2, [r9]
  403dea:	681b      	ldr	r3, [r3, #0]
  403dec:	3201      	adds	r2, #1
  403dee:	4433      	add	r3, r6
  403df0:	eb04 0a08 	add.w	sl, r4, r8
  403df4:	f000 8155 	beq.w	4040a2 <_malloc_r+0x4c2>
  403df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403dfc:	330f      	adds	r3, #15
  403dfe:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403e02:	f02b 0b0f 	bic.w	fp, fp, #15
  403e06:	4659      	mov	r1, fp
  403e08:	4628      	mov	r0, r5
  403e0a:	f000 fa8d 	bl	404328 <_sbrk_r>
  403e0e:	1c41      	adds	r1, r0, #1
  403e10:	4602      	mov	r2, r0
  403e12:	f000 80fc 	beq.w	40400e <_malloc_r+0x42e>
  403e16:	4582      	cmp	sl, r0
  403e18:	f200 80f7 	bhi.w	40400a <_malloc_r+0x42a>
  403e1c:	4b43      	ldr	r3, [pc, #268]	; (403f2c <_malloc_r+0x34c>)
  403e1e:	6819      	ldr	r1, [r3, #0]
  403e20:	4459      	add	r1, fp
  403e22:	6019      	str	r1, [r3, #0]
  403e24:	f000 814d 	beq.w	4040c2 <_malloc_r+0x4e2>
  403e28:	f8d9 0000 	ldr.w	r0, [r9]
  403e2c:	3001      	adds	r0, #1
  403e2e:	bf1b      	ittet	ne
  403e30:	eba2 0a0a 	subne.w	sl, r2, sl
  403e34:	4451      	addne	r1, sl
  403e36:	f8c9 2000 	streq.w	r2, [r9]
  403e3a:	6019      	strne	r1, [r3, #0]
  403e3c:	f012 0107 	ands.w	r1, r2, #7
  403e40:	f000 8115 	beq.w	40406e <_malloc_r+0x48e>
  403e44:	f1c1 0008 	rsb	r0, r1, #8
  403e48:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403e4c:	4402      	add	r2, r0
  403e4e:	3108      	adds	r1, #8
  403e50:	eb02 090b 	add.w	r9, r2, fp
  403e54:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403e58:	eba1 0909 	sub.w	r9, r1, r9
  403e5c:	4649      	mov	r1, r9
  403e5e:	4628      	mov	r0, r5
  403e60:	9301      	str	r3, [sp, #4]
  403e62:	9200      	str	r2, [sp, #0]
  403e64:	f000 fa60 	bl	404328 <_sbrk_r>
  403e68:	1c43      	adds	r3, r0, #1
  403e6a:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403e6e:	f000 8143 	beq.w	4040f8 <_malloc_r+0x518>
  403e72:	1a80      	subs	r0, r0, r2
  403e74:	4448      	add	r0, r9
  403e76:	f040 0001 	orr.w	r0, r0, #1
  403e7a:	6819      	ldr	r1, [r3, #0]
  403e7c:	60ba      	str	r2, [r7, #8]
  403e7e:	4449      	add	r1, r9
  403e80:	42bc      	cmp	r4, r7
  403e82:	6050      	str	r0, [r2, #4]
  403e84:	6019      	str	r1, [r3, #0]
  403e86:	d017      	beq.n	403eb8 <_malloc_r+0x2d8>
  403e88:	f1b8 0f0f 	cmp.w	r8, #15
  403e8c:	f240 80fb 	bls.w	404086 <_malloc_r+0x4a6>
  403e90:	6860      	ldr	r0, [r4, #4]
  403e92:	f1a8 020c 	sub.w	r2, r8, #12
  403e96:	f022 0207 	bic.w	r2, r2, #7
  403e9a:	eb04 0e02 	add.w	lr, r4, r2
  403e9e:	f000 0001 	and.w	r0, r0, #1
  403ea2:	f04f 0c05 	mov.w	ip, #5
  403ea6:	4310      	orrs	r0, r2
  403ea8:	2a0f      	cmp	r2, #15
  403eaa:	6060      	str	r0, [r4, #4]
  403eac:	f8ce c004 	str.w	ip, [lr, #4]
  403eb0:	f8ce c008 	str.w	ip, [lr, #8]
  403eb4:	f200 8117 	bhi.w	4040e6 <_malloc_r+0x506>
  403eb8:	4b1d      	ldr	r3, [pc, #116]	; (403f30 <_malloc_r+0x350>)
  403eba:	68bc      	ldr	r4, [r7, #8]
  403ebc:	681a      	ldr	r2, [r3, #0]
  403ebe:	4291      	cmp	r1, r2
  403ec0:	bf88      	it	hi
  403ec2:	6019      	strhi	r1, [r3, #0]
  403ec4:	4b1b      	ldr	r3, [pc, #108]	; (403f34 <_malloc_r+0x354>)
  403ec6:	681a      	ldr	r2, [r3, #0]
  403ec8:	4291      	cmp	r1, r2
  403eca:	6862      	ldr	r2, [r4, #4]
  403ecc:	bf88      	it	hi
  403ece:	6019      	strhi	r1, [r3, #0]
  403ed0:	f022 0203 	bic.w	r2, r2, #3
  403ed4:	4296      	cmp	r6, r2
  403ed6:	eba2 0306 	sub.w	r3, r2, r6
  403eda:	d801      	bhi.n	403ee0 <_malloc_r+0x300>
  403edc:	2b0f      	cmp	r3, #15
  403ede:	dc04      	bgt.n	403eea <_malloc_r+0x30a>
  403ee0:	4628      	mov	r0, r5
  403ee2:	f000 fa1b 	bl	40431c <__malloc_unlock>
  403ee6:	2400      	movs	r4, #0
  403ee8:	e740      	b.n	403d6c <_malloc_r+0x18c>
  403eea:	19a2      	adds	r2, r4, r6
  403eec:	f043 0301 	orr.w	r3, r3, #1
  403ef0:	f046 0601 	orr.w	r6, r6, #1
  403ef4:	6066      	str	r6, [r4, #4]
  403ef6:	4628      	mov	r0, r5
  403ef8:	60ba      	str	r2, [r7, #8]
  403efa:	6053      	str	r3, [r2, #4]
  403efc:	f000 fa0e 	bl	40431c <__malloc_unlock>
  403f00:	3408      	adds	r4, #8
  403f02:	4620      	mov	r0, r4
  403f04:	b003      	add	sp, #12
  403f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f0a:	2b14      	cmp	r3, #20
  403f0c:	d971      	bls.n	403ff2 <_malloc_r+0x412>
  403f0e:	2b54      	cmp	r3, #84	; 0x54
  403f10:	f200 80a3 	bhi.w	40405a <_malloc_r+0x47a>
  403f14:	0b33      	lsrs	r3, r6, #12
  403f16:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403f1a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403f1e:	00c3      	lsls	r3, r0, #3
  403f20:	e680      	b.n	403c24 <_malloc_r+0x44>
  403f22:	bf00      	nop
  403f24:	20400438 	.word	0x20400438
  403f28:	20400cd0 	.word	0x20400cd0
  403f2c:	20400ca0 	.word	0x20400ca0
  403f30:	20400cc8 	.word	0x20400cc8
  403f34:	20400ccc 	.word	0x20400ccc
  403f38:	20400440 	.word	0x20400440
  403f3c:	20400840 	.word	0x20400840
  403f40:	0a5a      	lsrs	r2, r3, #9
  403f42:	2a04      	cmp	r2, #4
  403f44:	d95b      	bls.n	403ffe <_malloc_r+0x41e>
  403f46:	2a14      	cmp	r2, #20
  403f48:	f200 80ae 	bhi.w	4040a8 <_malloc_r+0x4c8>
  403f4c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403f50:	00c9      	lsls	r1, r1, #3
  403f52:	325b      	adds	r2, #91	; 0x5b
  403f54:	eb07 0c01 	add.w	ip, r7, r1
  403f58:	5879      	ldr	r1, [r7, r1]
  403f5a:	f1ac 0c08 	sub.w	ip, ip, #8
  403f5e:	458c      	cmp	ip, r1
  403f60:	f000 8088 	beq.w	404074 <_malloc_r+0x494>
  403f64:	684a      	ldr	r2, [r1, #4]
  403f66:	f022 0203 	bic.w	r2, r2, #3
  403f6a:	4293      	cmp	r3, r2
  403f6c:	d273      	bcs.n	404056 <_malloc_r+0x476>
  403f6e:	6889      	ldr	r1, [r1, #8]
  403f70:	458c      	cmp	ip, r1
  403f72:	d1f7      	bne.n	403f64 <_malloc_r+0x384>
  403f74:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403f78:	687b      	ldr	r3, [r7, #4]
  403f7a:	60e2      	str	r2, [r4, #12]
  403f7c:	f8c4 c008 	str.w	ip, [r4, #8]
  403f80:	6094      	str	r4, [r2, #8]
  403f82:	f8cc 400c 	str.w	r4, [ip, #12]
  403f86:	e68f      	b.n	403ca8 <_malloc_r+0xc8>
  403f88:	19a1      	adds	r1, r4, r6
  403f8a:	f046 0c01 	orr.w	ip, r6, #1
  403f8e:	f042 0601 	orr.w	r6, r2, #1
  403f92:	f8c4 c004 	str.w	ip, [r4, #4]
  403f96:	4628      	mov	r0, r5
  403f98:	6179      	str	r1, [r7, #20]
  403f9a:	6139      	str	r1, [r7, #16]
  403f9c:	f8c1 e00c 	str.w	lr, [r1, #12]
  403fa0:	f8c1 e008 	str.w	lr, [r1, #8]
  403fa4:	604e      	str	r6, [r1, #4]
  403fa6:	50e2      	str	r2, [r4, r3]
  403fa8:	f000 f9b8 	bl	40431c <__malloc_unlock>
  403fac:	3408      	adds	r4, #8
  403fae:	e6dd      	b.n	403d6c <_malloc_r+0x18c>
  403fb0:	687b      	ldr	r3, [r7, #4]
  403fb2:	e679      	b.n	403ca8 <_malloc_r+0xc8>
  403fb4:	f108 0801 	add.w	r8, r8, #1
  403fb8:	f018 0f03 	tst.w	r8, #3
  403fbc:	f10c 0c08 	add.w	ip, ip, #8
  403fc0:	f47f ae85 	bne.w	403cce <_malloc_r+0xee>
  403fc4:	e02d      	b.n	404022 <_malloc_r+0x442>
  403fc6:	68dc      	ldr	r4, [r3, #12]
  403fc8:	42a3      	cmp	r3, r4
  403fca:	bf08      	it	eq
  403fcc:	3002      	addeq	r0, #2
  403fce:	f43f ae3e 	beq.w	403c4e <_malloc_r+0x6e>
  403fd2:	e6bb      	b.n	403d4c <_malloc_r+0x16c>
  403fd4:	4419      	add	r1, r3
  403fd6:	461c      	mov	r4, r3
  403fd8:	684a      	ldr	r2, [r1, #4]
  403fda:	68db      	ldr	r3, [r3, #12]
  403fdc:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403fe0:	f042 0201 	orr.w	r2, r2, #1
  403fe4:	604a      	str	r2, [r1, #4]
  403fe6:	4628      	mov	r0, r5
  403fe8:	60f3      	str	r3, [r6, #12]
  403fea:	609e      	str	r6, [r3, #8]
  403fec:	f000 f996 	bl	40431c <__malloc_unlock>
  403ff0:	e6bc      	b.n	403d6c <_malloc_r+0x18c>
  403ff2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403ff6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403ffa:	00c3      	lsls	r3, r0, #3
  403ffc:	e612      	b.n	403c24 <_malloc_r+0x44>
  403ffe:	099a      	lsrs	r2, r3, #6
  404000:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404004:	00c9      	lsls	r1, r1, #3
  404006:	3238      	adds	r2, #56	; 0x38
  404008:	e7a4      	b.n	403f54 <_malloc_r+0x374>
  40400a:	42bc      	cmp	r4, r7
  40400c:	d054      	beq.n	4040b8 <_malloc_r+0x4d8>
  40400e:	68bc      	ldr	r4, [r7, #8]
  404010:	6862      	ldr	r2, [r4, #4]
  404012:	f022 0203 	bic.w	r2, r2, #3
  404016:	e75d      	b.n	403ed4 <_malloc_r+0x2f4>
  404018:	f859 3908 	ldr.w	r3, [r9], #-8
  40401c:	4599      	cmp	r9, r3
  40401e:	f040 8086 	bne.w	40412e <_malloc_r+0x54e>
  404022:	f010 0f03 	tst.w	r0, #3
  404026:	f100 30ff 	add.w	r0, r0, #4294967295
  40402a:	d1f5      	bne.n	404018 <_malloc_r+0x438>
  40402c:	687b      	ldr	r3, [r7, #4]
  40402e:	ea23 0304 	bic.w	r3, r3, r4
  404032:	607b      	str	r3, [r7, #4]
  404034:	0064      	lsls	r4, r4, #1
  404036:	429c      	cmp	r4, r3
  404038:	f63f aec7 	bhi.w	403dca <_malloc_r+0x1ea>
  40403c:	2c00      	cmp	r4, #0
  40403e:	f43f aec4 	beq.w	403dca <_malloc_r+0x1ea>
  404042:	421c      	tst	r4, r3
  404044:	4640      	mov	r0, r8
  404046:	f47f ae3e 	bne.w	403cc6 <_malloc_r+0xe6>
  40404a:	0064      	lsls	r4, r4, #1
  40404c:	421c      	tst	r4, r3
  40404e:	f100 0004 	add.w	r0, r0, #4
  404052:	d0fa      	beq.n	40404a <_malloc_r+0x46a>
  404054:	e637      	b.n	403cc6 <_malloc_r+0xe6>
  404056:	468c      	mov	ip, r1
  404058:	e78c      	b.n	403f74 <_malloc_r+0x394>
  40405a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  40405e:	d815      	bhi.n	40408c <_malloc_r+0x4ac>
  404060:	0bf3      	lsrs	r3, r6, #15
  404062:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404066:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40406a:	00c3      	lsls	r3, r0, #3
  40406c:	e5da      	b.n	403c24 <_malloc_r+0x44>
  40406e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404072:	e6ed      	b.n	403e50 <_malloc_r+0x270>
  404074:	687b      	ldr	r3, [r7, #4]
  404076:	1092      	asrs	r2, r2, #2
  404078:	2101      	movs	r1, #1
  40407a:	fa01 f202 	lsl.w	r2, r1, r2
  40407e:	4313      	orrs	r3, r2
  404080:	607b      	str	r3, [r7, #4]
  404082:	4662      	mov	r2, ip
  404084:	e779      	b.n	403f7a <_malloc_r+0x39a>
  404086:	2301      	movs	r3, #1
  404088:	6053      	str	r3, [r2, #4]
  40408a:	e729      	b.n	403ee0 <_malloc_r+0x300>
  40408c:	f240 5254 	movw	r2, #1364	; 0x554
  404090:	4293      	cmp	r3, r2
  404092:	d822      	bhi.n	4040da <_malloc_r+0x4fa>
  404094:	0cb3      	lsrs	r3, r6, #18
  404096:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40409a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40409e:	00c3      	lsls	r3, r0, #3
  4040a0:	e5c0      	b.n	403c24 <_malloc_r+0x44>
  4040a2:	f103 0b10 	add.w	fp, r3, #16
  4040a6:	e6ae      	b.n	403e06 <_malloc_r+0x226>
  4040a8:	2a54      	cmp	r2, #84	; 0x54
  4040aa:	d829      	bhi.n	404100 <_malloc_r+0x520>
  4040ac:	0b1a      	lsrs	r2, r3, #12
  4040ae:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  4040b2:	00c9      	lsls	r1, r1, #3
  4040b4:	326e      	adds	r2, #110	; 0x6e
  4040b6:	e74d      	b.n	403f54 <_malloc_r+0x374>
  4040b8:	4b20      	ldr	r3, [pc, #128]	; (40413c <_malloc_r+0x55c>)
  4040ba:	6819      	ldr	r1, [r3, #0]
  4040bc:	4459      	add	r1, fp
  4040be:	6019      	str	r1, [r3, #0]
  4040c0:	e6b2      	b.n	403e28 <_malloc_r+0x248>
  4040c2:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4040c6:	2800      	cmp	r0, #0
  4040c8:	f47f aeae 	bne.w	403e28 <_malloc_r+0x248>
  4040cc:	eb08 030b 	add.w	r3, r8, fp
  4040d0:	68ba      	ldr	r2, [r7, #8]
  4040d2:	f043 0301 	orr.w	r3, r3, #1
  4040d6:	6053      	str	r3, [r2, #4]
  4040d8:	e6ee      	b.n	403eb8 <_malloc_r+0x2d8>
  4040da:	207f      	movs	r0, #127	; 0x7f
  4040dc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4040e0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4040e4:	e59e      	b.n	403c24 <_malloc_r+0x44>
  4040e6:	f104 0108 	add.w	r1, r4, #8
  4040ea:	4628      	mov	r0, r5
  4040ec:	9300      	str	r3, [sp, #0]
  4040ee:	f003 fe3f 	bl	407d70 <_free_r>
  4040f2:	9b00      	ldr	r3, [sp, #0]
  4040f4:	6819      	ldr	r1, [r3, #0]
  4040f6:	e6df      	b.n	403eb8 <_malloc_r+0x2d8>
  4040f8:	2001      	movs	r0, #1
  4040fa:	f04f 0900 	mov.w	r9, #0
  4040fe:	e6bc      	b.n	403e7a <_malloc_r+0x29a>
  404100:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404104:	d805      	bhi.n	404112 <_malloc_r+0x532>
  404106:	0bda      	lsrs	r2, r3, #15
  404108:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40410c:	00c9      	lsls	r1, r1, #3
  40410e:	3277      	adds	r2, #119	; 0x77
  404110:	e720      	b.n	403f54 <_malloc_r+0x374>
  404112:	f240 5154 	movw	r1, #1364	; 0x554
  404116:	428a      	cmp	r2, r1
  404118:	d805      	bhi.n	404126 <_malloc_r+0x546>
  40411a:	0c9a      	lsrs	r2, r3, #18
  40411c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404120:	00c9      	lsls	r1, r1, #3
  404122:	327c      	adds	r2, #124	; 0x7c
  404124:	e716      	b.n	403f54 <_malloc_r+0x374>
  404126:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40412a:	227e      	movs	r2, #126	; 0x7e
  40412c:	e712      	b.n	403f54 <_malloc_r+0x374>
  40412e:	687b      	ldr	r3, [r7, #4]
  404130:	e780      	b.n	404034 <_malloc_r+0x454>
  404132:	08f0      	lsrs	r0, r6, #3
  404134:	f106 0308 	add.w	r3, r6, #8
  404138:	e600      	b.n	403d3c <_malloc_r+0x15c>
  40413a:	bf00      	nop
  40413c:	20400ca0 	.word	0x20400ca0

00404140 <memcpy>:
  404140:	4684      	mov	ip, r0
  404142:	ea41 0300 	orr.w	r3, r1, r0
  404146:	f013 0303 	ands.w	r3, r3, #3
  40414a:	d16d      	bne.n	404228 <memcpy+0xe8>
  40414c:	3a40      	subs	r2, #64	; 0x40
  40414e:	d341      	bcc.n	4041d4 <memcpy+0x94>
  404150:	f851 3b04 	ldr.w	r3, [r1], #4
  404154:	f840 3b04 	str.w	r3, [r0], #4
  404158:	f851 3b04 	ldr.w	r3, [r1], #4
  40415c:	f840 3b04 	str.w	r3, [r0], #4
  404160:	f851 3b04 	ldr.w	r3, [r1], #4
  404164:	f840 3b04 	str.w	r3, [r0], #4
  404168:	f851 3b04 	ldr.w	r3, [r1], #4
  40416c:	f840 3b04 	str.w	r3, [r0], #4
  404170:	f851 3b04 	ldr.w	r3, [r1], #4
  404174:	f840 3b04 	str.w	r3, [r0], #4
  404178:	f851 3b04 	ldr.w	r3, [r1], #4
  40417c:	f840 3b04 	str.w	r3, [r0], #4
  404180:	f851 3b04 	ldr.w	r3, [r1], #4
  404184:	f840 3b04 	str.w	r3, [r0], #4
  404188:	f851 3b04 	ldr.w	r3, [r1], #4
  40418c:	f840 3b04 	str.w	r3, [r0], #4
  404190:	f851 3b04 	ldr.w	r3, [r1], #4
  404194:	f840 3b04 	str.w	r3, [r0], #4
  404198:	f851 3b04 	ldr.w	r3, [r1], #4
  40419c:	f840 3b04 	str.w	r3, [r0], #4
  4041a0:	f851 3b04 	ldr.w	r3, [r1], #4
  4041a4:	f840 3b04 	str.w	r3, [r0], #4
  4041a8:	f851 3b04 	ldr.w	r3, [r1], #4
  4041ac:	f840 3b04 	str.w	r3, [r0], #4
  4041b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4041b4:	f840 3b04 	str.w	r3, [r0], #4
  4041b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4041bc:	f840 3b04 	str.w	r3, [r0], #4
  4041c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4041c4:	f840 3b04 	str.w	r3, [r0], #4
  4041c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4041cc:	f840 3b04 	str.w	r3, [r0], #4
  4041d0:	3a40      	subs	r2, #64	; 0x40
  4041d2:	d2bd      	bcs.n	404150 <memcpy+0x10>
  4041d4:	3230      	adds	r2, #48	; 0x30
  4041d6:	d311      	bcc.n	4041fc <memcpy+0xbc>
  4041d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4041dc:	f840 3b04 	str.w	r3, [r0], #4
  4041e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4041e4:	f840 3b04 	str.w	r3, [r0], #4
  4041e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4041ec:	f840 3b04 	str.w	r3, [r0], #4
  4041f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4041f4:	f840 3b04 	str.w	r3, [r0], #4
  4041f8:	3a10      	subs	r2, #16
  4041fa:	d2ed      	bcs.n	4041d8 <memcpy+0x98>
  4041fc:	320c      	adds	r2, #12
  4041fe:	d305      	bcc.n	40420c <memcpy+0xcc>
  404200:	f851 3b04 	ldr.w	r3, [r1], #4
  404204:	f840 3b04 	str.w	r3, [r0], #4
  404208:	3a04      	subs	r2, #4
  40420a:	d2f9      	bcs.n	404200 <memcpy+0xc0>
  40420c:	3204      	adds	r2, #4
  40420e:	d008      	beq.n	404222 <memcpy+0xe2>
  404210:	07d2      	lsls	r2, r2, #31
  404212:	bf1c      	itt	ne
  404214:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404218:	f800 3b01 	strbne.w	r3, [r0], #1
  40421c:	d301      	bcc.n	404222 <memcpy+0xe2>
  40421e:	880b      	ldrh	r3, [r1, #0]
  404220:	8003      	strh	r3, [r0, #0]
  404222:	4660      	mov	r0, ip
  404224:	4770      	bx	lr
  404226:	bf00      	nop
  404228:	2a08      	cmp	r2, #8
  40422a:	d313      	bcc.n	404254 <memcpy+0x114>
  40422c:	078b      	lsls	r3, r1, #30
  40422e:	d08d      	beq.n	40414c <memcpy+0xc>
  404230:	f010 0303 	ands.w	r3, r0, #3
  404234:	d08a      	beq.n	40414c <memcpy+0xc>
  404236:	f1c3 0304 	rsb	r3, r3, #4
  40423a:	1ad2      	subs	r2, r2, r3
  40423c:	07db      	lsls	r3, r3, #31
  40423e:	bf1c      	itt	ne
  404240:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404244:	f800 3b01 	strbne.w	r3, [r0], #1
  404248:	d380      	bcc.n	40414c <memcpy+0xc>
  40424a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40424e:	f820 3b02 	strh.w	r3, [r0], #2
  404252:	e77b      	b.n	40414c <memcpy+0xc>
  404254:	3a04      	subs	r2, #4
  404256:	d3d9      	bcc.n	40420c <memcpy+0xcc>
  404258:	3a01      	subs	r2, #1
  40425a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40425e:	f800 3b01 	strb.w	r3, [r0], #1
  404262:	d2f9      	bcs.n	404258 <memcpy+0x118>
  404264:	780b      	ldrb	r3, [r1, #0]
  404266:	7003      	strb	r3, [r0, #0]
  404268:	784b      	ldrb	r3, [r1, #1]
  40426a:	7043      	strb	r3, [r0, #1]
  40426c:	788b      	ldrb	r3, [r1, #2]
  40426e:	7083      	strb	r3, [r0, #2]
  404270:	4660      	mov	r0, ip
  404272:	4770      	bx	lr

00404274 <memset>:
  404274:	b470      	push	{r4, r5, r6}
  404276:	0786      	lsls	r6, r0, #30
  404278:	d046      	beq.n	404308 <memset+0x94>
  40427a:	1e54      	subs	r4, r2, #1
  40427c:	2a00      	cmp	r2, #0
  40427e:	d041      	beq.n	404304 <memset+0x90>
  404280:	b2ca      	uxtb	r2, r1
  404282:	4603      	mov	r3, r0
  404284:	e002      	b.n	40428c <memset+0x18>
  404286:	f114 34ff 	adds.w	r4, r4, #4294967295
  40428a:	d33b      	bcc.n	404304 <memset+0x90>
  40428c:	f803 2b01 	strb.w	r2, [r3], #1
  404290:	079d      	lsls	r5, r3, #30
  404292:	d1f8      	bne.n	404286 <memset+0x12>
  404294:	2c03      	cmp	r4, #3
  404296:	d92e      	bls.n	4042f6 <memset+0x82>
  404298:	b2cd      	uxtb	r5, r1
  40429a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40429e:	2c0f      	cmp	r4, #15
  4042a0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4042a4:	d919      	bls.n	4042da <memset+0x66>
  4042a6:	f103 0210 	add.w	r2, r3, #16
  4042aa:	4626      	mov	r6, r4
  4042ac:	3e10      	subs	r6, #16
  4042ae:	2e0f      	cmp	r6, #15
  4042b0:	f842 5c10 	str.w	r5, [r2, #-16]
  4042b4:	f842 5c0c 	str.w	r5, [r2, #-12]
  4042b8:	f842 5c08 	str.w	r5, [r2, #-8]
  4042bc:	f842 5c04 	str.w	r5, [r2, #-4]
  4042c0:	f102 0210 	add.w	r2, r2, #16
  4042c4:	d8f2      	bhi.n	4042ac <memset+0x38>
  4042c6:	f1a4 0210 	sub.w	r2, r4, #16
  4042ca:	f022 020f 	bic.w	r2, r2, #15
  4042ce:	f004 040f 	and.w	r4, r4, #15
  4042d2:	3210      	adds	r2, #16
  4042d4:	2c03      	cmp	r4, #3
  4042d6:	4413      	add	r3, r2
  4042d8:	d90d      	bls.n	4042f6 <memset+0x82>
  4042da:	461e      	mov	r6, r3
  4042dc:	4622      	mov	r2, r4
  4042de:	3a04      	subs	r2, #4
  4042e0:	2a03      	cmp	r2, #3
  4042e2:	f846 5b04 	str.w	r5, [r6], #4
  4042e6:	d8fa      	bhi.n	4042de <memset+0x6a>
  4042e8:	1f22      	subs	r2, r4, #4
  4042ea:	f022 0203 	bic.w	r2, r2, #3
  4042ee:	3204      	adds	r2, #4
  4042f0:	4413      	add	r3, r2
  4042f2:	f004 0403 	and.w	r4, r4, #3
  4042f6:	b12c      	cbz	r4, 404304 <memset+0x90>
  4042f8:	b2c9      	uxtb	r1, r1
  4042fa:	441c      	add	r4, r3
  4042fc:	f803 1b01 	strb.w	r1, [r3], #1
  404300:	429c      	cmp	r4, r3
  404302:	d1fb      	bne.n	4042fc <memset+0x88>
  404304:	bc70      	pop	{r4, r5, r6}
  404306:	4770      	bx	lr
  404308:	4614      	mov	r4, r2
  40430a:	4603      	mov	r3, r0
  40430c:	e7c2      	b.n	404294 <memset+0x20>
  40430e:	bf00      	nop

00404310 <__malloc_lock>:
  404310:	4801      	ldr	r0, [pc, #4]	; (404318 <__malloc_lock+0x8>)
  404312:	f003 bfd5 	b.w	4082c0 <__retarget_lock_acquire_recursive>
  404316:	bf00      	nop
  404318:	20400d44 	.word	0x20400d44

0040431c <__malloc_unlock>:
  40431c:	4801      	ldr	r0, [pc, #4]	; (404324 <__malloc_unlock+0x8>)
  40431e:	f003 bfd1 	b.w	4082c4 <__retarget_lock_release_recursive>
  404322:	bf00      	nop
  404324:	20400d44 	.word	0x20400d44

00404328 <_sbrk_r>:
  404328:	b538      	push	{r3, r4, r5, lr}
  40432a:	4c07      	ldr	r4, [pc, #28]	; (404348 <_sbrk_r+0x20>)
  40432c:	2300      	movs	r3, #0
  40432e:	4605      	mov	r5, r0
  404330:	4608      	mov	r0, r1
  404332:	6023      	str	r3, [r4, #0]
  404334:	f7fc fdde 	bl	400ef4 <_sbrk>
  404338:	1c43      	adds	r3, r0, #1
  40433a:	d000      	beq.n	40433e <_sbrk_r+0x16>
  40433c:	bd38      	pop	{r3, r4, r5, pc}
  40433e:	6823      	ldr	r3, [r4, #0]
  404340:	2b00      	cmp	r3, #0
  404342:	d0fb      	beq.n	40433c <_sbrk_r+0x14>
  404344:	602b      	str	r3, [r5, #0]
  404346:	bd38      	pop	{r3, r4, r5, pc}
  404348:	20400d58 	.word	0x20400d58

0040434c <setbuf>:
  40434c:	2900      	cmp	r1, #0
  40434e:	bf0c      	ite	eq
  404350:	2202      	moveq	r2, #2
  404352:	2200      	movne	r2, #0
  404354:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404358:	f000 b800 	b.w	40435c <setvbuf>

0040435c <setvbuf>:
  40435c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  404360:	4c61      	ldr	r4, [pc, #388]	; (4044e8 <setvbuf+0x18c>)
  404362:	6825      	ldr	r5, [r4, #0]
  404364:	b083      	sub	sp, #12
  404366:	4604      	mov	r4, r0
  404368:	460f      	mov	r7, r1
  40436a:	4690      	mov	r8, r2
  40436c:	461e      	mov	r6, r3
  40436e:	b115      	cbz	r5, 404376 <setvbuf+0x1a>
  404370:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404372:	2b00      	cmp	r3, #0
  404374:	d064      	beq.n	404440 <setvbuf+0xe4>
  404376:	f1b8 0f02 	cmp.w	r8, #2
  40437a:	d006      	beq.n	40438a <setvbuf+0x2e>
  40437c:	f1b8 0f01 	cmp.w	r8, #1
  404380:	f200 809f 	bhi.w	4044c2 <setvbuf+0x166>
  404384:	2e00      	cmp	r6, #0
  404386:	f2c0 809c 	blt.w	4044c2 <setvbuf+0x166>
  40438a:	6e63      	ldr	r3, [r4, #100]	; 0x64
  40438c:	07d8      	lsls	r0, r3, #31
  40438e:	d534      	bpl.n	4043fa <setvbuf+0x9e>
  404390:	4621      	mov	r1, r4
  404392:	4628      	mov	r0, r5
  404394:	f003 fb6e 	bl	407a74 <_fflush_r>
  404398:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40439a:	b141      	cbz	r1, 4043ae <setvbuf+0x52>
  40439c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4043a0:	4299      	cmp	r1, r3
  4043a2:	d002      	beq.n	4043aa <setvbuf+0x4e>
  4043a4:	4628      	mov	r0, r5
  4043a6:	f003 fce3 	bl	407d70 <_free_r>
  4043aa:	2300      	movs	r3, #0
  4043ac:	6323      	str	r3, [r4, #48]	; 0x30
  4043ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4043b2:	2200      	movs	r2, #0
  4043b4:	61a2      	str	r2, [r4, #24]
  4043b6:	6062      	str	r2, [r4, #4]
  4043b8:	061a      	lsls	r2, r3, #24
  4043ba:	d43a      	bmi.n	404432 <setvbuf+0xd6>
  4043bc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4043c0:	f023 0303 	bic.w	r3, r3, #3
  4043c4:	f1b8 0f02 	cmp.w	r8, #2
  4043c8:	81a3      	strh	r3, [r4, #12]
  4043ca:	d01d      	beq.n	404408 <setvbuf+0xac>
  4043cc:	ab01      	add	r3, sp, #4
  4043ce:	466a      	mov	r2, sp
  4043d0:	4621      	mov	r1, r4
  4043d2:	4628      	mov	r0, r5
  4043d4:	f003 ff78 	bl	4082c8 <__swhatbuf_r>
  4043d8:	89a3      	ldrh	r3, [r4, #12]
  4043da:	4318      	orrs	r0, r3
  4043dc:	81a0      	strh	r0, [r4, #12]
  4043de:	2e00      	cmp	r6, #0
  4043e0:	d132      	bne.n	404448 <setvbuf+0xec>
  4043e2:	9e00      	ldr	r6, [sp, #0]
  4043e4:	4630      	mov	r0, r6
  4043e6:	f7ff fbeb 	bl	403bc0 <malloc>
  4043ea:	4607      	mov	r7, r0
  4043ec:	2800      	cmp	r0, #0
  4043ee:	d06b      	beq.n	4044c8 <setvbuf+0x16c>
  4043f0:	89a3      	ldrh	r3, [r4, #12]
  4043f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4043f6:	81a3      	strh	r3, [r4, #12]
  4043f8:	e028      	b.n	40444c <setvbuf+0xf0>
  4043fa:	89a3      	ldrh	r3, [r4, #12]
  4043fc:	0599      	lsls	r1, r3, #22
  4043fe:	d4c7      	bmi.n	404390 <setvbuf+0x34>
  404400:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404402:	f003 ff5d 	bl	4082c0 <__retarget_lock_acquire_recursive>
  404406:	e7c3      	b.n	404390 <setvbuf+0x34>
  404408:	2500      	movs	r5, #0
  40440a:	6e61      	ldr	r1, [r4, #100]	; 0x64
  40440c:	2600      	movs	r6, #0
  40440e:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404412:	f043 0302 	orr.w	r3, r3, #2
  404416:	2001      	movs	r0, #1
  404418:	60a6      	str	r6, [r4, #8]
  40441a:	07ce      	lsls	r6, r1, #31
  40441c:	81a3      	strh	r3, [r4, #12]
  40441e:	6022      	str	r2, [r4, #0]
  404420:	6122      	str	r2, [r4, #16]
  404422:	6160      	str	r0, [r4, #20]
  404424:	d401      	bmi.n	40442a <setvbuf+0xce>
  404426:	0598      	lsls	r0, r3, #22
  404428:	d53e      	bpl.n	4044a8 <setvbuf+0x14c>
  40442a:	4628      	mov	r0, r5
  40442c:	b003      	add	sp, #12
  40442e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404432:	6921      	ldr	r1, [r4, #16]
  404434:	4628      	mov	r0, r5
  404436:	f003 fc9b 	bl	407d70 <_free_r>
  40443a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40443e:	e7bd      	b.n	4043bc <setvbuf+0x60>
  404440:	4628      	mov	r0, r5
  404442:	f003 fb6f 	bl	407b24 <__sinit>
  404446:	e796      	b.n	404376 <setvbuf+0x1a>
  404448:	2f00      	cmp	r7, #0
  40444a:	d0cb      	beq.n	4043e4 <setvbuf+0x88>
  40444c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40444e:	2b00      	cmp	r3, #0
  404450:	d033      	beq.n	4044ba <setvbuf+0x15e>
  404452:	9b00      	ldr	r3, [sp, #0]
  404454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404458:	6027      	str	r7, [r4, #0]
  40445a:	429e      	cmp	r6, r3
  40445c:	bf1c      	itt	ne
  40445e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  404462:	81a2      	strhne	r2, [r4, #12]
  404464:	f1b8 0f01 	cmp.w	r8, #1
  404468:	bf04      	itt	eq
  40446a:	f042 0201 	orreq.w	r2, r2, #1
  40446e:	81a2      	strheq	r2, [r4, #12]
  404470:	b292      	uxth	r2, r2
  404472:	f012 0308 	ands.w	r3, r2, #8
  404476:	6127      	str	r7, [r4, #16]
  404478:	6166      	str	r6, [r4, #20]
  40447a:	d00e      	beq.n	40449a <setvbuf+0x13e>
  40447c:	07d1      	lsls	r1, r2, #31
  40447e:	d51a      	bpl.n	4044b6 <setvbuf+0x15a>
  404480:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404482:	4276      	negs	r6, r6
  404484:	2300      	movs	r3, #0
  404486:	f015 0501 	ands.w	r5, r5, #1
  40448a:	61a6      	str	r6, [r4, #24]
  40448c:	60a3      	str	r3, [r4, #8]
  40448e:	d009      	beq.n	4044a4 <setvbuf+0x148>
  404490:	2500      	movs	r5, #0
  404492:	4628      	mov	r0, r5
  404494:	b003      	add	sp, #12
  404496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40449a:	60a3      	str	r3, [r4, #8]
  40449c:	6e65      	ldr	r5, [r4, #100]	; 0x64
  40449e:	f015 0501 	ands.w	r5, r5, #1
  4044a2:	d1f5      	bne.n	404490 <setvbuf+0x134>
  4044a4:	0593      	lsls	r3, r2, #22
  4044a6:	d4c0      	bmi.n	40442a <setvbuf+0xce>
  4044a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4044aa:	f003 ff0b 	bl	4082c4 <__retarget_lock_release_recursive>
  4044ae:	4628      	mov	r0, r5
  4044b0:	b003      	add	sp, #12
  4044b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4044b6:	60a6      	str	r6, [r4, #8]
  4044b8:	e7f0      	b.n	40449c <setvbuf+0x140>
  4044ba:	4628      	mov	r0, r5
  4044bc:	f003 fb32 	bl	407b24 <__sinit>
  4044c0:	e7c7      	b.n	404452 <setvbuf+0xf6>
  4044c2:	f04f 35ff 	mov.w	r5, #4294967295
  4044c6:	e7b0      	b.n	40442a <setvbuf+0xce>
  4044c8:	f8dd 9000 	ldr.w	r9, [sp]
  4044cc:	45b1      	cmp	r9, r6
  4044ce:	d004      	beq.n	4044da <setvbuf+0x17e>
  4044d0:	4648      	mov	r0, r9
  4044d2:	f7ff fb75 	bl	403bc0 <malloc>
  4044d6:	4607      	mov	r7, r0
  4044d8:	b920      	cbnz	r0, 4044e4 <setvbuf+0x188>
  4044da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4044de:	f04f 35ff 	mov.w	r5, #4294967295
  4044e2:	e792      	b.n	40440a <setvbuf+0xae>
  4044e4:	464e      	mov	r6, r9
  4044e6:	e783      	b.n	4043f0 <setvbuf+0x94>
  4044e8:	2040000c 	.word	0x2040000c

004044ec <sprintf>:
  4044ec:	b40e      	push	{r1, r2, r3}
  4044ee:	b5f0      	push	{r4, r5, r6, r7, lr}
  4044f0:	b09c      	sub	sp, #112	; 0x70
  4044f2:	ab21      	add	r3, sp, #132	; 0x84
  4044f4:	490f      	ldr	r1, [pc, #60]	; (404534 <sprintf+0x48>)
  4044f6:	f853 2b04 	ldr.w	r2, [r3], #4
  4044fa:	9301      	str	r3, [sp, #4]
  4044fc:	4605      	mov	r5, r0
  4044fe:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  404502:	6808      	ldr	r0, [r1, #0]
  404504:	9502      	str	r5, [sp, #8]
  404506:	f44f 7702 	mov.w	r7, #520	; 0x208
  40450a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40450e:	a902      	add	r1, sp, #8
  404510:	9506      	str	r5, [sp, #24]
  404512:	f8ad 7014 	strh.w	r7, [sp, #20]
  404516:	9404      	str	r4, [sp, #16]
  404518:	9407      	str	r4, [sp, #28]
  40451a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40451e:	f000 f8dd 	bl	4046dc <_svfprintf_r>
  404522:	9b02      	ldr	r3, [sp, #8]
  404524:	2200      	movs	r2, #0
  404526:	701a      	strb	r2, [r3, #0]
  404528:	b01c      	add	sp, #112	; 0x70
  40452a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40452e:	b003      	add	sp, #12
  404530:	4770      	bx	lr
  404532:	bf00      	nop
  404534:	2040000c 	.word	0x2040000c

00404538 <strcpy>:
  404538:	ea80 0201 	eor.w	r2, r0, r1
  40453c:	4684      	mov	ip, r0
  40453e:	f012 0f03 	tst.w	r2, #3
  404542:	d14f      	bne.n	4045e4 <strcpy+0xac>
  404544:	f011 0f03 	tst.w	r1, #3
  404548:	d132      	bne.n	4045b0 <strcpy+0x78>
  40454a:	f84d 4d04 	str.w	r4, [sp, #-4]!
  40454e:	f011 0f04 	tst.w	r1, #4
  404552:	f851 3b04 	ldr.w	r3, [r1], #4
  404556:	d00b      	beq.n	404570 <strcpy+0x38>
  404558:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  40455c:	439a      	bics	r2, r3
  40455e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  404562:	bf04      	itt	eq
  404564:	f84c 3b04 	streq.w	r3, [ip], #4
  404568:	f851 3b04 	ldreq.w	r3, [r1], #4
  40456c:	d116      	bne.n	40459c <strcpy+0x64>
  40456e:	bf00      	nop
  404570:	f851 4b04 	ldr.w	r4, [r1], #4
  404574:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
  404578:	439a      	bics	r2, r3
  40457a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40457e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
  404582:	d10b      	bne.n	40459c <strcpy+0x64>
  404584:	f84c 3b04 	str.w	r3, [ip], #4
  404588:	43a2      	bics	r2, r4
  40458a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
  40458e:	bf04      	itt	eq
  404590:	f851 3b04 	ldreq.w	r3, [r1], #4
  404594:	f84c 4b04 	streq.w	r4, [ip], #4
  404598:	d0ea      	beq.n	404570 <strcpy+0x38>
  40459a:	4623      	mov	r3, r4
  40459c:	f80c 3b01 	strb.w	r3, [ip], #1
  4045a0:	f013 0fff 	tst.w	r3, #255	; 0xff
  4045a4:	ea4f 2333 	mov.w	r3, r3, ror #8
  4045a8:	d1f8      	bne.n	40459c <strcpy+0x64>
  4045aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4045ae:	4770      	bx	lr
  4045b0:	f011 0f01 	tst.w	r1, #1
  4045b4:	d006      	beq.n	4045c4 <strcpy+0x8c>
  4045b6:	f811 2b01 	ldrb.w	r2, [r1], #1
  4045ba:	f80c 2b01 	strb.w	r2, [ip], #1
  4045be:	2a00      	cmp	r2, #0
  4045c0:	bf08      	it	eq
  4045c2:	4770      	bxeq	lr
  4045c4:	f011 0f02 	tst.w	r1, #2
  4045c8:	d0bf      	beq.n	40454a <strcpy+0x12>
  4045ca:	f831 2b02 	ldrh.w	r2, [r1], #2
  4045ce:	f012 0fff 	tst.w	r2, #255	; 0xff
  4045d2:	bf16      	itet	ne
  4045d4:	f82c 2b02 	strhne.w	r2, [ip], #2
  4045d8:	f88c 2000 	strbeq.w	r2, [ip]
  4045dc:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
  4045e0:	d1b3      	bne.n	40454a <strcpy+0x12>
  4045e2:	4770      	bx	lr
  4045e4:	f811 2b01 	ldrb.w	r2, [r1], #1
  4045e8:	f80c 2b01 	strb.w	r2, [ip], #1
  4045ec:	2a00      	cmp	r2, #0
  4045ee:	d1f9      	bne.n	4045e4 <strcpy+0xac>
  4045f0:	4770      	bx	lr
  4045f2:	bf00      	nop
	...

00404600 <strlen>:
  404600:	f890 f000 	pld	[r0]
  404604:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404608:	f020 0107 	bic.w	r1, r0, #7
  40460c:	f06f 0c00 	mvn.w	ip, #0
  404610:	f010 0407 	ands.w	r4, r0, #7
  404614:	f891 f020 	pld	[r1, #32]
  404618:	f040 8049 	bne.w	4046ae <strlen+0xae>
  40461c:	f04f 0400 	mov.w	r4, #0
  404620:	f06f 0007 	mvn.w	r0, #7
  404624:	e9d1 2300 	ldrd	r2, r3, [r1]
  404628:	f891 f040 	pld	[r1, #64]	; 0x40
  40462c:	f100 0008 	add.w	r0, r0, #8
  404630:	fa82 f24c 	uadd8	r2, r2, ip
  404634:	faa4 f28c 	sel	r2, r4, ip
  404638:	fa83 f34c 	uadd8	r3, r3, ip
  40463c:	faa2 f38c 	sel	r3, r2, ip
  404640:	bb4b      	cbnz	r3, 404696 <strlen+0x96>
  404642:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404646:	fa82 f24c 	uadd8	r2, r2, ip
  40464a:	f100 0008 	add.w	r0, r0, #8
  40464e:	faa4 f28c 	sel	r2, r4, ip
  404652:	fa83 f34c 	uadd8	r3, r3, ip
  404656:	faa2 f38c 	sel	r3, r2, ip
  40465a:	b9e3      	cbnz	r3, 404696 <strlen+0x96>
  40465c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404660:	fa82 f24c 	uadd8	r2, r2, ip
  404664:	f100 0008 	add.w	r0, r0, #8
  404668:	faa4 f28c 	sel	r2, r4, ip
  40466c:	fa83 f34c 	uadd8	r3, r3, ip
  404670:	faa2 f38c 	sel	r3, r2, ip
  404674:	b97b      	cbnz	r3, 404696 <strlen+0x96>
  404676:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40467a:	f101 0120 	add.w	r1, r1, #32
  40467e:	fa82 f24c 	uadd8	r2, r2, ip
  404682:	f100 0008 	add.w	r0, r0, #8
  404686:	faa4 f28c 	sel	r2, r4, ip
  40468a:	fa83 f34c 	uadd8	r3, r3, ip
  40468e:	faa2 f38c 	sel	r3, r2, ip
  404692:	2b00      	cmp	r3, #0
  404694:	d0c6      	beq.n	404624 <strlen+0x24>
  404696:	2a00      	cmp	r2, #0
  404698:	bf04      	itt	eq
  40469a:	3004      	addeq	r0, #4
  40469c:	461a      	moveq	r2, r3
  40469e:	ba12      	rev	r2, r2
  4046a0:	fab2 f282 	clz	r2, r2
  4046a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4046a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4046ac:	4770      	bx	lr
  4046ae:	e9d1 2300 	ldrd	r2, r3, [r1]
  4046b2:	f004 0503 	and.w	r5, r4, #3
  4046b6:	f1c4 0000 	rsb	r0, r4, #0
  4046ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4046be:	f014 0f04 	tst.w	r4, #4
  4046c2:	f891 f040 	pld	[r1, #64]	; 0x40
  4046c6:	fa0c f505 	lsl.w	r5, ip, r5
  4046ca:	ea62 0205 	orn	r2, r2, r5
  4046ce:	bf1c      	itt	ne
  4046d0:	ea63 0305 	ornne	r3, r3, r5
  4046d4:	4662      	movne	r2, ip
  4046d6:	f04f 0400 	mov.w	r4, #0
  4046da:	e7a9      	b.n	404630 <strlen+0x30>

004046dc <_svfprintf_r>:
  4046dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4046e0:	b0c3      	sub	sp, #268	; 0x10c
  4046e2:	460c      	mov	r4, r1
  4046e4:	910b      	str	r1, [sp, #44]	; 0x2c
  4046e6:	4692      	mov	sl, r2
  4046e8:	930f      	str	r3, [sp, #60]	; 0x3c
  4046ea:	900c      	str	r0, [sp, #48]	; 0x30
  4046ec:	f003 fdd6 	bl	40829c <_localeconv_r>
  4046f0:	6803      	ldr	r3, [r0, #0]
  4046f2:	931a      	str	r3, [sp, #104]	; 0x68
  4046f4:	4618      	mov	r0, r3
  4046f6:	f7ff ff83 	bl	404600 <strlen>
  4046fa:	89a3      	ldrh	r3, [r4, #12]
  4046fc:	9019      	str	r0, [sp, #100]	; 0x64
  4046fe:	0619      	lsls	r1, r3, #24
  404700:	d503      	bpl.n	40470a <_svfprintf_r+0x2e>
  404702:	6923      	ldr	r3, [r4, #16]
  404704:	2b00      	cmp	r3, #0
  404706:	f001 8003 	beq.w	405710 <_svfprintf_r+0x1034>
  40470a:	2300      	movs	r3, #0
  40470c:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  404710:	9313      	str	r3, [sp, #76]	; 0x4c
  404712:	9315      	str	r3, [sp, #84]	; 0x54
  404714:	9314      	str	r3, [sp, #80]	; 0x50
  404716:	9327      	str	r3, [sp, #156]	; 0x9c
  404718:	9326      	str	r3, [sp, #152]	; 0x98
  40471a:	9318      	str	r3, [sp, #96]	; 0x60
  40471c:	931b      	str	r3, [sp, #108]	; 0x6c
  40471e:	9309      	str	r3, [sp, #36]	; 0x24
  404720:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  404724:	46c8      	mov	r8, r9
  404726:	9316      	str	r3, [sp, #88]	; 0x58
  404728:	9317      	str	r3, [sp, #92]	; 0x5c
  40472a:	f89a 3000 	ldrb.w	r3, [sl]
  40472e:	4654      	mov	r4, sl
  404730:	b1e3      	cbz	r3, 40476c <_svfprintf_r+0x90>
  404732:	2b25      	cmp	r3, #37	; 0x25
  404734:	d102      	bne.n	40473c <_svfprintf_r+0x60>
  404736:	e019      	b.n	40476c <_svfprintf_r+0x90>
  404738:	2b25      	cmp	r3, #37	; 0x25
  40473a:	d003      	beq.n	404744 <_svfprintf_r+0x68>
  40473c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404740:	2b00      	cmp	r3, #0
  404742:	d1f9      	bne.n	404738 <_svfprintf_r+0x5c>
  404744:	eba4 050a 	sub.w	r5, r4, sl
  404748:	b185      	cbz	r5, 40476c <_svfprintf_r+0x90>
  40474a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40474c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40474e:	f8c8 a000 	str.w	sl, [r8]
  404752:	3301      	adds	r3, #1
  404754:	442a      	add	r2, r5
  404756:	2b07      	cmp	r3, #7
  404758:	f8c8 5004 	str.w	r5, [r8, #4]
  40475c:	9227      	str	r2, [sp, #156]	; 0x9c
  40475e:	9326      	str	r3, [sp, #152]	; 0x98
  404760:	dc7f      	bgt.n	404862 <_svfprintf_r+0x186>
  404762:	f108 0808 	add.w	r8, r8, #8
  404766:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404768:	442b      	add	r3, r5
  40476a:	9309      	str	r3, [sp, #36]	; 0x24
  40476c:	7823      	ldrb	r3, [r4, #0]
  40476e:	2b00      	cmp	r3, #0
  404770:	d07f      	beq.n	404872 <_svfprintf_r+0x196>
  404772:	2300      	movs	r3, #0
  404774:	461a      	mov	r2, r3
  404776:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  40477a:	4619      	mov	r1, r3
  40477c:	930d      	str	r3, [sp, #52]	; 0x34
  40477e:	469b      	mov	fp, r3
  404780:	f04f 30ff 	mov.w	r0, #4294967295
  404784:	7863      	ldrb	r3, [r4, #1]
  404786:	900a      	str	r0, [sp, #40]	; 0x28
  404788:	f104 0a01 	add.w	sl, r4, #1
  40478c:	f10a 0a01 	add.w	sl, sl, #1
  404790:	f1a3 0020 	sub.w	r0, r3, #32
  404794:	2858      	cmp	r0, #88	; 0x58
  404796:	f200 83c1 	bhi.w	404f1c <_svfprintf_r+0x840>
  40479a:	e8df f010 	tbh	[pc, r0, lsl #1]
  40479e:	0238      	.short	0x0238
  4047a0:	03bf03bf 	.word	0x03bf03bf
  4047a4:	03bf0240 	.word	0x03bf0240
  4047a8:	03bf03bf 	.word	0x03bf03bf
  4047ac:	03bf03bf 	.word	0x03bf03bf
  4047b0:	024503bf 	.word	0x024503bf
  4047b4:	03bf0203 	.word	0x03bf0203
  4047b8:	026b005d 	.word	0x026b005d
  4047bc:	028603bf 	.word	0x028603bf
  4047c0:	039d039d 	.word	0x039d039d
  4047c4:	039d039d 	.word	0x039d039d
  4047c8:	039d039d 	.word	0x039d039d
  4047cc:	039d039d 	.word	0x039d039d
  4047d0:	03bf039d 	.word	0x03bf039d
  4047d4:	03bf03bf 	.word	0x03bf03bf
  4047d8:	03bf03bf 	.word	0x03bf03bf
  4047dc:	03bf03bf 	.word	0x03bf03bf
  4047e0:	03bf03bf 	.word	0x03bf03bf
  4047e4:	033703bf 	.word	0x033703bf
  4047e8:	03bf0357 	.word	0x03bf0357
  4047ec:	03bf0357 	.word	0x03bf0357
  4047f0:	03bf03bf 	.word	0x03bf03bf
  4047f4:	039803bf 	.word	0x039803bf
  4047f8:	03bf03bf 	.word	0x03bf03bf
  4047fc:	03bf03ad 	.word	0x03bf03ad
  404800:	03bf03bf 	.word	0x03bf03bf
  404804:	03bf03bf 	.word	0x03bf03bf
  404808:	03bf0259 	.word	0x03bf0259
  40480c:	031e03bf 	.word	0x031e03bf
  404810:	03bf03bf 	.word	0x03bf03bf
  404814:	03bf03bf 	.word	0x03bf03bf
  404818:	03bf03bf 	.word	0x03bf03bf
  40481c:	03bf03bf 	.word	0x03bf03bf
  404820:	03bf03bf 	.word	0x03bf03bf
  404824:	02db02c6 	.word	0x02db02c6
  404828:	03570357 	.word	0x03570357
  40482c:	028b0357 	.word	0x028b0357
  404830:	03bf02db 	.word	0x03bf02db
  404834:	029003bf 	.word	0x029003bf
  404838:	029d03bf 	.word	0x029d03bf
  40483c:	02b401cc 	.word	0x02b401cc
  404840:	03bf0208 	.word	0x03bf0208
  404844:	03bf01e1 	.word	0x03bf01e1
  404848:	03bf007e 	.word	0x03bf007e
  40484c:	020d03bf 	.word	0x020d03bf
  404850:	980d      	ldr	r0, [sp, #52]	; 0x34
  404852:	930f      	str	r3, [sp, #60]	; 0x3c
  404854:	4240      	negs	r0, r0
  404856:	900d      	str	r0, [sp, #52]	; 0x34
  404858:	f04b 0b04 	orr.w	fp, fp, #4
  40485c:	f89a 3000 	ldrb.w	r3, [sl]
  404860:	e794      	b.n	40478c <_svfprintf_r+0xb0>
  404862:	aa25      	add	r2, sp, #148	; 0x94
  404864:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404866:	980c      	ldr	r0, [sp, #48]	; 0x30
  404868:	f004 fb5a 	bl	408f20 <__ssprint_r>
  40486c:	b940      	cbnz	r0, 404880 <_svfprintf_r+0x1a4>
  40486e:	46c8      	mov	r8, r9
  404870:	e779      	b.n	404766 <_svfprintf_r+0x8a>
  404872:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  404874:	b123      	cbz	r3, 404880 <_svfprintf_r+0x1a4>
  404876:	980c      	ldr	r0, [sp, #48]	; 0x30
  404878:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40487a:	aa25      	add	r2, sp, #148	; 0x94
  40487c:	f004 fb50 	bl	408f20 <__ssprint_r>
  404880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404882:	899b      	ldrh	r3, [r3, #12]
  404884:	f013 0f40 	tst.w	r3, #64	; 0x40
  404888:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40488a:	bf18      	it	ne
  40488c:	f04f 33ff 	movne.w	r3, #4294967295
  404890:	9309      	str	r3, [sp, #36]	; 0x24
  404892:	9809      	ldr	r0, [sp, #36]	; 0x24
  404894:	b043      	add	sp, #268	; 0x10c
  404896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40489a:	f01b 0f20 	tst.w	fp, #32
  40489e:	9311      	str	r3, [sp, #68]	; 0x44
  4048a0:	f040 81dd 	bne.w	404c5e <_svfprintf_r+0x582>
  4048a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4048a6:	f01b 0f10 	tst.w	fp, #16
  4048aa:	4613      	mov	r3, r2
  4048ac:	f040 856e 	bne.w	40538c <_svfprintf_r+0xcb0>
  4048b0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4048b4:	f000 856a 	beq.w	40538c <_svfprintf_r+0xcb0>
  4048b8:	8814      	ldrh	r4, [r2, #0]
  4048ba:	3204      	adds	r2, #4
  4048bc:	2500      	movs	r5, #0
  4048be:	2301      	movs	r3, #1
  4048c0:	920f      	str	r2, [sp, #60]	; 0x3c
  4048c2:	2700      	movs	r7, #0
  4048c4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4048c8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4048ca:	1c4a      	adds	r2, r1, #1
  4048cc:	f000 8265 	beq.w	404d9a <_svfprintf_r+0x6be>
  4048d0:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4048d4:	9207      	str	r2, [sp, #28]
  4048d6:	ea54 0205 	orrs.w	r2, r4, r5
  4048da:	f040 8264 	bne.w	404da6 <_svfprintf_r+0x6ca>
  4048de:	2900      	cmp	r1, #0
  4048e0:	f040 843c 	bne.w	40515c <_svfprintf_r+0xa80>
  4048e4:	2b00      	cmp	r3, #0
  4048e6:	f040 84d7 	bne.w	405298 <_svfprintf_r+0xbbc>
  4048ea:	f01b 0301 	ands.w	r3, fp, #1
  4048ee:	930e      	str	r3, [sp, #56]	; 0x38
  4048f0:	f000 8604 	beq.w	4054fc <_svfprintf_r+0xe20>
  4048f4:	ae42      	add	r6, sp, #264	; 0x108
  4048f6:	2330      	movs	r3, #48	; 0x30
  4048f8:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4048fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4048fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404900:	4293      	cmp	r3, r2
  404902:	bfb8      	it	lt
  404904:	4613      	movlt	r3, r2
  404906:	9308      	str	r3, [sp, #32]
  404908:	2300      	movs	r3, #0
  40490a:	9312      	str	r3, [sp, #72]	; 0x48
  40490c:	b117      	cbz	r7, 404914 <_svfprintf_r+0x238>
  40490e:	9b08      	ldr	r3, [sp, #32]
  404910:	3301      	adds	r3, #1
  404912:	9308      	str	r3, [sp, #32]
  404914:	9b07      	ldr	r3, [sp, #28]
  404916:	f013 0302 	ands.w	r3, r3, #2
  40491a:	9310      	str	r3, [sp, #64]	; 0x40
  40491c:	d002      	beq.n	404924 <_svfprintf_r+0x248>
  40491e:	9b08      	ldr	r3, [sp, #32]
  404920:	3302      	adds	r3, #2
  404922:	9308      	str	r3, [sp, #32]
  404924:	9b07      	ldr	r3, [sp, #28]
  404926:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  40492a:	f040 830e 	bne.w	404f4a <_svfprintf_r+0x86e>
  40492e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404930:	9a08      	ldr	r2, [sp, #32]
  404932:	eba3 0b02 	sub.w	fp, r3, r2
  404936:	f1bb 0f00 	cmp.w	fp, #0
  40493a:	f340 8306 	ble.w	404f4a <_svfprintf_r+0x86e>
  40493e:	f1bb 0f10 	cmp.w	fp, #16
  404942:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404944:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404946:	dd29      	ble.n	40499c <_svfprintf_r+0x2c0>
  404948:	4643      	mov	r3, r8
  40494a:	4621      	mov	r1, r4
  40494c:	46a8      	mov	r8, r5
  40494e:	2710      	movs	r7, #16
  404950:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404952:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404954:	e006      	b.n	404964 <_svfprintf_r+0x288>
  404956:	f1ab 0b10 	sub.w	fp, fp, #16
  40495a:	f1bb 0f10 	cmp.w	fp, #16
  40495e:	f103 0308 	add.w	r3, r3, #8
  404962:	dd18      	ble.n	404996 <_svfprintf_r+0x2ba>
  404964:	3201      	adds	r2, #1
  404966:	48b7      	ldr	r0, [pc, #732]	; (404c44 <_svfprintf_r+0x568>)
  404968:	9226      	str	r2, [sp, #152]	; 0x98
  40496a:	3110      	adds	r1, #16
  40496c:	2a07      	cmp	r2, #7
  40496e:	9127      	str	r1, [sp, #156]	; 0x9c
  404970:	e883 0081 	stmia.w	r3, {r0, r7}
  404974:	ddef      	ble.n	404956 <_svfprintf_r+0x27a>
  404976:	aa25      	add	r2, sp, #148	; 0x94
  404978:	4629      	mov	r1, r5
  40497a:	4620      	mov	r0, r4
  40497c:	f004 fad0 	bl	408f20 <__ssprint_r>
  404980:	2800      	cmp	r0, #0
  404982:	f47f af7d 	bne.w	404880 <_svfprintf_r+0x1a4>
  404986:	f1ab 0b10 	sub.w	fp, fp, #16
  40498a:	f1bb 0f10 	cmp.w	fp, #16
  40498e:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404990:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404992:	464b      	mov	r3, r9
  404994:	dce6      	bgt.n	404964 <_svfprintf_r+0x288>
  404996:	4645      	mov	r5, r8
  404998:	460c      	mov	r4, r1
  40499a:	4698      	mov	r8, r3
  40499c:	3201      	adds	r2, #1
  40499e:	4ba9      	ldr	r3, [pc, #676]	; (404c44 <_svfprintf_r+0x568>)
  4049a0:	9226      	str	r2, [sp, #152]	; 0x98
  4049a2:	445c      	add	r4, fp
  4049a4:	2a07      	cmp	r2, #7
  4049a6:	9427      	str	r4, [sp, #156]	; 0x9c
  4049a8:	e888 0808 	stmia.w	r8, {r3, fp}
  4049ac:	f300 8498 	bgt.w	4052e0 <_svfprintf_r+0xc04>
  4049b0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4049b4:	f108 0808 	add.w	r8, r8, #8
  4049b8:	b177      	cbz	r7, 4049d8 <_svfprintf_r+0x2fc>
  4049ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4049bc:	3301      	adds	r3, #1
  4049be:	3401      	adds	r4, #1
  4049c0:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  4049c4:	2201      	movs	r2, #1
  4049c6:	2b07      	cmp	r3, #7
  4049c8:	9427      	str	r4, [sp, #156]	; 0x9c
  4049ca:	9326      	str	r3, [sp, #152]	; 0x98
  4049cc:	e888 0006 	stmia.w	r8, {r1, r2}
  4049d0:	f300 83db 	bgt.w	40518a <_svfprintf_r+0xaae>
  4049d4:	f108 0808 	add.w	r8, r8, #8
  4049d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4049da:	b16b      	cbz	r3, 4049f8 <_svfprintf_r+0x31c>
  4049dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4049de:	3301      	adds	r3, #1
  4049e0:	3402      	adds	r4, #2
  4049e2:	a91e      	add	r1, sp, #120	; 0x78
  4049e4:	2202      	movs	r2, #2
  4049e6:	2b07      	cmp	r3, #7
  4049e8:	9427      	str	r4, [sp, #156]	; 0x9c
  4049ea:	9326      	str	r3, [sp, #152]	; 0x98
  4049ec:	e888 0006 	stmia.w	r8, {r1, r2}
  4049f0:	f300 83d6 	bgt.w	4051a0 <_svfprintf_r+0xac4>
  4049f4:	f108 0808 	add.w	r8, r8, #8
  4049f8:	2d80      	cmp	r5, #128	; 0x80
  4049fa:	f000 8315 	beq.w	405028 <_svfprintf_r+0x94c>
  4049fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  404a02:	1a9f      	subs	r7, r3, r2
  404a04:	2f00      	cmp	r7, #0
  404a06:	dd36      	ble.n	404a76 <_svfprintf_r+0x39a>
  404a08:	2f10      	cmp	r7, #16
  404a0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a0c:	4d8e      	ldr	r5, [pc, #568]	; (404c48 <_svfprintf_r+0x56c>)
  404a0e:	dd27      	ble.n	404a60 <_svfprintf_r+0x384>
  404a10:	4642      	mov	r2, r8
  404a12:	4621      	mov	r1, r4
  404a14:	46b0      	mov	r8, r6
  404a16:	f04f 0b10 	mov.w	fp, #16
  404a1a:	462e      	mov	r6, r5
  404a1c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404a1e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  404a20:	e004      	b.n	404a2c <_svfprintf_r+0x350>
  404a22:	3f10      	subs	r7, #16
  404a24:	2f10      	cmp	r7, #16
  404a26:	f102 0208 	add.w	r2, r2, #8
  404a2a:	dd15      	ble.n	404a58 <_svfprintf_r+0x37c>
  404a2c:	3301      	adds	r3, #1
  404a2e:	3110      	adds	r1, #16
  404a30:	2b07      	cmp	r3, #7
  404a32:	9127      	str	r1, [sp, #156]	; 0x9c
  404a34:	9326      	str	r3, [sp, #152]	; 0x98
  404a36:	e882 0840 	stmia.w	r2, {r6, fp}
  404a3a:	ddf2      	ble.n	404a22 <_svfprintf_r+0x346>
  404a3c:	aa25      	add	r2, sp, #148	; 0x94
  404a3e:	4629      	mov	r1, r5
  404a40:	4620      	mov	r0, r4
  404a42:	f004 fa6d 	bl	408f20 <__ssprint_r>
  404a46:	2800      	cmp	r0, #0
  404a48:	f47f af1a 	bne.w	404880 <_svfprintf_r+0x1a4>
  404a4c:	3f10      	subs	r7, #16
  404a4e:	2f10      	cmp	r7, #16
  404a50:	9927      	ldr	r1, [sp, #156]	; 0x9c
  404a52:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a54:	464a      	mov	r2, r9
  404a56:	dce9      	bgt.n	404a2c <_svfprintf_r+0x350>
  404a58:	4635      	mov	r5, r6
  404a5a:	460c      	mov	r4, r1
  404a5c:	4646      	mov	r6, r8
  404a5e:	4690      	mov	r8, r2
  404a60:	3301      	adds	r3, #1
  404a62:	443c      	add	r4, r7
  404a64:	2b07      	cmp	r3, #7
  404a66:	9427      	str	r4, [sp, #156]	; 0x9c
  404a68:	9326      	str	r3, [sp, #152]	; 0x98
  404a6a:	e888 00a0 	stmia.w	r8, {r5, r7}
  404a6e:	f300 8381 	bgt.w	405174 <_svfprintf_r+0xa98>
  404a72:	f108 0808 	add.w	r8, r8, #8
  404a76:	9b07      	ldr	r3, [sp, #28]
  404a78:	05df      	lsls	r7, r3, #23
  404a7a:	f100 8268 	bmi.w	404f4e <_svfprintf_r+0x872>
  404a7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404a80:	990e      	ldr	r1, [sp, #56]	; 0x38
  404a82:	f8c8 6000 	str.w	r6, [r8]
  404a86:	3301      	adds	r3, #1
  404a88:	440c      	add	r4, r1
  404a8a:	2b07      	cmp	r3, #7
  404a8c:	9427      	str	r4, [sp, #156]	; 0x9c
  404a8e:	f8c8 1004 	str.w	r1, [r8, #4]
  404a92:	9326      	str	r3, [sp, #152]	; 0x98
  404a94:	f300 834d 	bgt.w	405132 <_svfprintf_r+0xa56>
  404a98:	f108 0808 	add.w	r8, r8, #8
  404a9c:	9b07      	ldr	r3, [sp, #28]
  404a9e:	075b      	lsls	r3, r3, #29
  404aa0:	d53a      	bpl.n	404b18 <_svfprintf_r+0x43c>
  404aa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  404aa4:	9a08      	ldr	r2, [sp, #32]
  404aa6:	1a9d      	subs	r5, r3, r2
  404aa8:	2d00      	cmp	r5, #0
  404aaa:	dd35      	ble.n	404b18 <_svfprintf_r+0x43c>
  404aac:	2d10      	cmp	r5, #16
  404aae:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404ab0:	dd20      	ble.n	404af4 <_svfprintf_r+0x418>
  404ab2:	2610      	movs	r6, #16
  404ab4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404ab6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  404aba:	e004      	b.n	404ac6 <_svfprintf_r+0x3ea>
  404abc:	3d10      	subs	r5, #16
  404abe:	2d10      	cmp	r5, #16
  404ac0:	f108 0808 	add.w	r8, r8, #8
  404ac4:	dd16      	ble.n	404af4 <_svfprintf_r+0x418>
  404ac6:	3301      	adds	r3, #1
  404ac8:	4a5e      	ldr	r2, [pc, #376]	; (404c44 <_svfprintf_r+0x568>)
  404aca:	9326      	str	r3, [sp, #152]	; 0x98
  404acc:	3410      	adds	r4, #16
  404ace:	2b07      	cmp	r3, #7
  404ad0:	9427      	str	r4, [sp, #156]	; 0x9c
  404ad2:	e888 0044 	stmia.w	r8, {r2, r6}
  404ad6:	ddf1      	ble.n	404abc <_svfprintf_r+0x3e0>
  404ad8:	aa25      	add	r2, sp, #148	; 0x94
  404ada:	4659      	mov	r1, fp
  404adc:	4638      	mov	r0, r7
  404ade:	f004 fa1f 	bl	408f20 <__ssprint_r>
  404ae2:	2800      	cmp	r0, #0
  404ae4:	f47f aecc 	bne.w	404880 <_svfprintf_r+0x1a4>
  404ae8:	3d10      	subs	r5, #16
  404aea:	2d10      	cmp	r5, #16
  404aec:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404aee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404af0:	46c8      	mov	r8, r9
  404af2:	dce8      	bgt.n	404ac6 <_svfprintf_r+0x3ea>
  404af4:	3301      	adds	r3, #1
  404af6:	4a53      	ldr	r2, [pc, #332]	; (404c44 <_svfprintf_r+0x568>)
  404af8:	9326      	str	r3, [sp, #152]	; 0x98
  404afa:	442c      	add	r4, r5
  404afc:	2b07      	cmp	r3, #7
  404afe:	9427      	str	r4, [sp, #156]	; 0x9c
  404b00:	e888 0024 	stmia.w	r8, {r2, r5}
  404b04:	dd08      	ble.n	404b18 <_svfprintf_r+0x43c>
  404b06:	aa25      	add	r2, sp, #148	; 0x94
  404b08:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404b0a:	980c      	ldr	r0, [sp, #48]	; 0x30
  404b0c:	f004 fa08 	bl	408f20 <__ssprint_r>
  404b10:	2800      	cmp	r0, #0
  404b12:	f47f aeb5 	bne.w	404880 <_svfprintf_r+0x1a4>
  404b16:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404b1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404b1c:	9908      	ldr	r1, [sp, #32]
  404b1e:	428a      	cmp	r2, r1
  404b20:	bfac      	ite	ge
  404b22:	189b      	addge	r3, r3, r2
  404b24:	185b      	addlt	r3, r3, r1
  404b26:	9309      	str	r3, [sp, #36]	; 0x24
  404b28:	2c00      	cmp	r4, #0
  404b2a:	f040 830d 	bne.w	405148 <_svfprintf_r+0xa6c>
  404b2e:	2300      	movs	r3, #0
  404b30:	9326      	str	r3, [sp, #152]	; 0x98
  404b32:	46c8      	mov	r8, r9
  404b34:	e5f9      	b.n	40472a <_svfprintf_r+0x4e>
  404b36:	9311      	str	r3, [sp, #68]	; 0x44
  404b38:	f01b 0320 	ands.w	r3, fp, #32
  404b3c:	f040 81e3 	bne.w	404f06 <_svfprintf_r+0x82a>
  404b40:	f01b 0210 	ands.w	r2, fp, #16
  404b44:	f040 842e 	bne.w	4053a4 <_svfprintf_r+0xcc8>
  404b48:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  404b4c:	f000 842a 	beq.w	4053a4 <_svfprintf_r+0xcc8>
  404b50:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404b52:	4613      	mov	r3, r2
  404b54:	460a      	mov	r2, r1
  404b56:	3204      	adds	r2, #4
  404b58:	880c      	ldrh	r4, [r1, #0]
  404b5a:	920f      	str	r2, [sp, #60]	; 0x3c
  404b5c:	2500      	movs	r5, #0
  404b5e:	e6b0      	b.n	4048c2 <_svfprintf_r+0x1e6>
  404b60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404b62:	9311      	str	r3, [sp, #68]	; 0x44
  404b64:	6816      	ldr	r6, [r2, #0]
  404b66:	2400      	movs	r4, #0
  404b68:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  404b6c:	1d15      	adds	r5, r2, #4
  404b6e:	2e00      	cmp	r6, #0
  404b70:	f000 86a7 	beq.w	4058c2 <_svfprintf_r+0x11e6>
  404b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404b76:	1c53      	adds	r3, r2, #1
  404b78:	f000 8609 	beq.w	40578e <_svfprintf_r+0x10b2>
  404b7c:	4621      	mov	r1, r4
  404b7e:	4630      	mov	r0, r6
  404b80:	f003 fc36 	bl	4083f0 <memchr>
  404b84:	2800      	cmp	r0, #0
  404b86:	f000 86e1 	beq.w	40594c <_svfprintf_r+0x1270>
  404b8a:	1b83      	subs	r3, r0, r6
  404b8c:	930e      	str	r3, [sp, #56]	; 0x38
  404b8e:	940a      	str	r4, [sp, #40]	; 0x28
  404b90:	950f      	str	r5, [sp, #60]	; 0x3c
  404b92:	f8cd b01c 	str.w	fp, [sp, #28]
  404b96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404b9a:	9308      	str	r3, [sp, #32]
  404b9c:	9412      	str	r4, [sp, #72]	; 0x48
  404b9e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404ba2:	e6b3      	b.n	40490c <_svfprintf_r+0x230>
  404ba4:	f89a 3000 	ldrb.w	r3, [sl]
  404ba8:	2201      	movs	r2, #1
  404baa:	212b      	movs	r1, #43	; 0x2b
  404bac:	e5ee      	b.n	40478c <_svfprintf_r+0xb0>
  404bae:	f04b 0b20 	orr.w	fp, fp, #32
  404bb2:	f89a 3000 	ldrb.w	r3, [sl]
  404bb6:	e5e9      	b.n	40478c <_svfprintf_r+0xb0>
  404bb8:	9311      	str	r3, [sp, #68]	; 0x44
  404bba:	2a00      	cmp	r2, #0
  404bbc:	f040 8795 	bne.w	405aea <_svfprintf_r+0x140e>
  404bc0:	4b22      	ldr	r3, [pc, #136]	; (404c4c <_svfprintf_r+0x570>)
  404bc2:	9318      	str	r3, [sp, #96]	; 0x60
  404bc4:	f01b 0f20 	tst.w	fp, #32
  404bc8:	f040 8111 	bne.w	404dee <_svfprintf_r+0x712>
  404bcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404bce:	f01b 0f10 	tst.w	fp, #16
  404bd2:	4613      	mov	r3, r2
  404bd4:	f040 83e1 	bne.w	40539a <_svfprintf_r+0xcbe>
  404bd8:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404bdc:	f000 83dd 	beq.w	40539a <_svfprintf_r+0xcbe>
  404be0:	3304      	adds	r3, #4
  404be2:	8814      	ldrh	r4, [r2, #0]
  404be4:	930f      	str	r3, [sp, #60]	; 0x3c
  404be6:	2500      	movs	r5, #0
  404be8:	f01b 0f01 	tst.w	fp, #1
  404bec:	f000 810c 	beq.w	404e08 <_svfprintf_r+0x72c>
  404bf0:	ea54 0305 	orrs.w	r3, r4, r5
  404bf4:	f000 8108 	beq.w	404e08 <_svfprintf_r+0x72c>
  404bf8:	2330      	movs	r3, #48	; 0x30
  404bfa:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  404bfe:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  404c02:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  404c06:	f04b 0b02 	orr.w	fp, fp, #2
  404c0a:	2302      	movs	r3, #2
  404c0c:	e659      	b.n	4048c2 <_svfprintf_r+0x1e6>
  404c0e:	f89a 3000 	ldrb.w	r3, [sl]
  404c12:	2900      	cmp	r1, #0
  404c14:	f47f adba 	bne.w	40478c <_svfprintf_r+0xb0>
  404c18:	2201      	movs	r2, #1
  404c1a:	2120      	movs	r1, #32
  404c1c:	e5b6      	b.n	40478c <_svfprintf_r+0xb0>
  404c1e:	f04b 0b01 	orr.w	fp, fp, #1
  404c22:	f89a 3000 	ldrb.w	r3, [sl]
  404c26:	e5b1      	b.n	40478c <_svfprintf_r+0xb0>
  404c28:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  404c2a:	6823      	ldr	r3, [r4, #0]
  404c2c:	930d      	str	r3, [sp, #52]	; 0x34
  404c2e:	4618      	mov	r0, r3
  404c30:	2800      	cmp	r0, #0
  404c32:	4623      	mov	r3, r4
  404c34:	f103 0304 	add.w	r3, r3, #4
  404c38:	f6ff ae0a 	blt.w	404850 <_svfprintf_r+0x174>
  404c3c:	930f      	str	r3, [sp, #60]	; 0x3c
  404c3e:	f89a 3000 	ldrb.w	r3, [sl]
  404c42:	e5a3      	b.n	40478c <_svfprintf_r+0xb0>
  404c44:	0040a1ec 	.word	0x0040a1ec
  404c48:	0040a1fc 	.word	0x0040a1fc
  404c4c:	0040a1cc 	.word	0x0040a1cc
  404c50:	f04b 0b10 	orr.w	fp, fp, #16
  404c54:	f01b 0f20 	tst.w	fp, #32
  404c58:	9311      	str	r3, [sp, #68]	; 0x44
  404c5a:	f43f ae23 	beq.w	4048a4 <_svfprintf_r+0x1c8>
  404c5e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404c60:	3507      	adds	r5, #7
  404c62:	f025 0307 	bic.w	r3, r5, #7
  404c66:	f103 0208 	add.w	r2, r3, #8
  404c6a:	e9d3 4500 	ldrd	r4, r5, [r3]
  404c6e:	920f      	str	r2, [sp, #60]	; 0x3c
  404c70:	2301      	movs	r3, #1
  404c72:	e626      	b.n	4048c2 <_svfprintf_r+0x1e6>
  404c74:	f89a 3000 	ldrb.w	r3, [sl]
  404c78:	2b2a      	cmp	r3, #42	; 0x2a
  404c7a:	f10a 0401 	add.w	r4, sl, #1
  404c7e:	f000 8727 	beq.w	405ad0 <_svfprintf_r+0x13f4>
  404c82:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404c86:	2809      	cmp	r0, #9
  404c88:	46a2      	mov	sl, r4
  404c8a:	f200 86ad 	bhi.w	4059e8 <_svfprintf_r+0x130c>
  404c8e:	2300      	movs	r3, #0
  404c90:	461c      	mov	r4, r3
  404c92:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404c96:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404c9a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404c9e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404ca2:	2809      	cmp	r0, #9
  404ca4:	d9f5      	bls.n	404c92 <_svfprintf_r+0x5b6>
  404ca6:	940a      	str	r4, [sp, #40]	; 0x28
  404ca8:	e572      	b.n	404790 <_svfprintf_r+0xb4>
  404caa:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  404cae:	f89a 3000 	ldrb.w	r3, [sl]
  404cb2:	e56b      	b.n	40478c <_svfprintf_r+0xb0>
  404cb4:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  404cb8:	f89a 3000 	ldrb.w	r3, [sl]
  404cbc:	e566      	b.n	40478c <_svfprintf_r+0xb0>
  404cbe:	f89a 3000 	ldrb.w	r3, [sl]
  404cc2:	2b6c      	cmp	r3, #108	; 0x6c
  404cc4:	bf03      	ittte	eq
  404cc6:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  404cca:	f04b 0b20 	orreq.w	fp, fp, #32
  404cce:	f10a 0a01 	addeq.w	sl, sl, #1
  404cd2:	f04b 0b10 	orrne.w	fp, fp, #16
  404cd6:	e559      	b.n	40478c <_svfprintf_r+0xb0>
  404cd8:	2a00      	cmp	r2, #0
  404cda:	f040 8711 	bne.w	405b00 <_svfprintf_r+0x1424>
  404cde:	f01b 0f20 	tst.w	fp, #32
  404ce2:	f040 84f9 	bne.w	4056d8 <_svfprintf_r+0xffc>
  404ce6:	f01b 0f10 	tst.w	fp, #16
  404cea:	f040 84ac 	bne.w	405646 <_svfprintf_r+0xf6a>
  404cee:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404cf2:	f000 84a8 	beq.w	405646 <_svfprintf_r+0xf6a>
  404cf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404cf8:	6813      	ldr	r3, [r2, #0]
  404cfa:	3204      	adds	r2, #4
  404cfc:	920f      	str	r2, [sp, #60]	; 0x3c
  404cfe:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  404d02:	801a      	strh	r2, [r3, #0]
  404d04:	e511      	b.n	40472a <_svfprintf_r+0x4e>
  404d06:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404d08:	4bb3      	ldr	r3, [pc, #716]	; (404fd8 <_svfprintf_r+0x8fc>)
  404d0a:	680c      	ldr	r4, [r1, #0]
  404d0c:	9318      	str	r3, [sp, #96]	; 0x60
  404d0e:	2230      	movs	r2, #48	; 0x30
  404d10:	2378      	movs	r3, #120	; 0x78
  404d12:	3104      	adds	r1, #4
  404d14:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  404d18:	9311      	str	r3, [sp, #68]	; 0x44
  404d1a:	f04b 0b02 	orr.w	fp, fp, #2
  404d1e:	910f      	str	r1, [sp, #60]	; 0x3c
  404d20:	2500      	movs	r5, #0
  404d22:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  404d26:	2302      	movs	r3, #2
  404d28:	e5cb      	b.n	4048c2 <_svfprintf_r+0x1e6>
  404d2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404d2c:	9311      	str	r3, [sp, #68]	; 0x44
  404d2e:	680a      	ldr	r2, [r1, #0]
  404d30:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404d34:	2300      	movs	r3, #0
  404d36:	460a      	mov	r2, r1
  404d38:	461f      	mov	r7, r3
  404d3a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404d3e:	3204      	adds	r2, #4
  404d40:	2301      	movs	r3, #1
  404d42:	9308      	str	r3, [sp, #32]
  404d44:	f8cd b01c 	str.w	fp, [sp, #28]
  404d48:	970a      	str	r7, [sp, #40]	; 0x28
  404d4a:	9712      	str	r7, [sp, #72]	; 0x48
  404d4c:	920f      	str	r2, [sp, #60]	; 0x3c
  404d4e:	930e      	str	r3, [sp, #56]	; 0x38
  404d50:	ae28      	add	r6, sp, #160	; 0xa0
  404d52:	e5df      	b.n	404914 <_svfprintf_r+0x238>
  404d54:	9311      	str	r3, [sp, #68]	; 0x44
  404d56:	2a00      	cmp	r2, #0
  404d58:	f040 86ea 	bne.w	405b30 <_svfprintf_r+0x1454>
  404d5c:	f01b 0f20 	tst.w	fp, #32
  404d60:	d15d      	bne.n	404e1e <_svfprintf_r+0x742>
  404d62:	f01b 0f10 	tst.w	fp, #16
  404d66:	f040 8308 	bne.w	40537a <_svfprintf_r+0xc9e>
  404d6a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  404d6e:	f000 8304 	beq.w	40537a <_svfprintf_r+0xc9e>
  404d72:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404d74:	f9b1 4000 	ldrsh.w	r4, [r1]
  404d78:	3104      	adds	r1, #4
  404d7a:	17e5      	asrs	r5, r4, #31
  404d7c:	4622      	mov	r2, r4
  404d7e:	462b      	mov	r3, r5
  404d80:	910f      	str	r1, [sp, #60]	; 0x3c
  404d82:	2a00      	cmp	r2, #0
  404d84:	f173 0300 	sbcs.w	r3, r3, #0
  404d88:	db58      	blt.n	404e3c <_svfprintf_r+0x760>
  404d8a:	990a      	ldr	r1, [sp, #40]	; 0x28
  404d8c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404d90:	1c4a      	adds	r2, r1, #1
  404d92:	f04f 0301 	mov.w	r3, #1
  404d96:	f47f ad9b 	bne.w	4048d0 <_svfprintf_r+0x1f4>
  404d9a:	ea54 0205 	orrs.w	r2, r4, r5
  404d9e:	f000 81df 	beq.w	405160 <_svfprintf_r+0xa84>
  404da2:	f8cd b01c 	str.w	fp, [sp, #28]
  404da6:	2b01      	cmp	r3, #1
  404da8:	f000 827b 	beq.w	4052a2 <_svfprintf_r+0xbc6>
  404dac:	2b02      	cmp	r3, #2
  404dae:	f040 8206 	bne.w	4051be <_svfprintf_r+0xae2>
  404db2:	9818      	ldr	r0, [sp, #96]	; 0x60
  404db4:	464e      	mov	r6, r9
  404db6:	0923      	lsrs	r3, r4, #4
  404db8:	f004 010f 	and.w	r1, r4, #15
  404dbc:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  404dc0:	092a      	lsrs	r2, r5, #4
  404dc2:	461c      	mov	r4, r3
  404dc4:	4615      	mov	r5, r2
  404dc6:	5c43      	ldrb	r3, [r0, r1]
  404dc8:	f806 3d01 	strb.w	r3, [r6, #-1]!
  404dcc:	ea54 0305 	orrs.w	r3, r4, r5
  404dd0:	d1f1      	bne.n	404db6 <_svfprintf_r+0x6da>
  404dd2:	eba9 0306 	sub.w	r3, r9, r6
  404dd6:	930e      	str	r3, [sp, #56]	; 0x38
  404dd8:	e590      	b.n	4048fc <_svfprintf_r+0x220>
  404dda:	9311      	str	r3, [sp, #68]	; 0x44
  404ddc:	2a00      	cmp	r2, #0
  404dde:	f040 86a3 	bne.w	405b28 <_svfprintf_r+0x144c>
  404de2:	4b7e      	ldr	r3, [pc, #504]	; (404fdc <_svfprintf_r+0x900>)
  404de4:	9318      	str	r3, [sp, #96]	; 0x60
  404de6:	f01b 0f20 	tst.w	fp, #32
  404dea:	f43f aeef 	beq.w	404bcc <_svfprintf_r+0x4f0>
  404dee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404df0:	3507      	adds	r5, #7
  404df2:	f025 0307 	bic.w	r3, r5, #7
  404df6:	f103 0208 	add.w	r2, r3, #8
  404dfa:	f01b 0f01 	tst.w	fp, #1
  404dfe:	920f      	str	r2, [sp, #60]	; 0x3c
  404e00:	e9d3 4500 	ldrd	r4, r5, [r3]
  404e04:	f47f aef4 	bne.w	404bf0 <_svfprintf_r+0x514>
  404e08:	2302      	movs	r3, #2
  404e0a:	e55a      	b.n	4048c2 <_svfprintf_r+0x1e6>
  404e0c:	9311      	str	r3, [sp, #68]	; 0x44
  404e0e:	2a00      	cmp	r2, #0
  404e10:	f040 8686 	bne.w	405b20 <_svfprintf_r+0x1444>
  404e14:	f04b 0b10 	orr.w	fp, fp, #16
  404e18:	f01b 0f20 	tst.w	fp, #32
  404e1c:	d0a1      	beq.n	404d62 <_svfprintf_r+0x686>
  404e1e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404e20:	3507      	adds	r5, #7
  404e22:	f025 0507 	bic.w	r5, r5, #7
  404e26:	e9d5 2300 	ldrd	r2, r3, [r5]
  404e2a:	2a00      	cmp	r2, #0
  404e2c:	f105 0108 	add.w	r1, r5, #8
  404e30:	461d      	mov	r5, r3
  404e32:	f173 0300 	sbcs.w	r3, r3, #0
  404e36:	910f      	str	r1, [sp, #60]	; 0x3c
  404e38:	4614      	mov	r4, r2
  404e3a:	daa6      	bge.n	404d8a <_svfprintf_r+0x6ae>
  404e3c:	272d      	movs	r7, #45	; 0x2d
  404e3e:	4264      	negs	r4, r4
  404e40:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  404e44:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404e48:	2301      	movs	r3, #1
  404e4a:	e53d      	b.n	4048c8 <_svfprintf_r+0x1ec>
  404e4c:	9311      	str	r3, [sp, #68]	; 0x44
  404e4e:	2a00      	cmp	r2, #0
  404e50:	f040 8662 	bne.w	405b18 <_svfprintf_r+0x143c>
  404e54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404e56:	3507      	adds	r5, #7
  404e58:	f025 0307 	bic.w	r3, r5, #7
  404e5c:	f103 0208 	add.w	r2, r3, #8
  404e60:	920f      	str	r2, [sp, #60]	; 0x3c
  404e62:	681a      	ldr	r2, [r3, #0]
  404e64:	9215      	str	r2, [sp, #84]	; 0x54
  404e66:	685b      	ldr	r3, [r3, #4]
  404e68:	9314      	str	r3, [sp, #80]	; 0x50
  404e6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
  404e6c:	9d15      	ldr	r5, [sp, #84]	; 0x54
  404e6e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  404e72:	4628      	mov	r0, r5
  404e74:	4621      	mov	r1, r4
  404e76:	f04f 32ff 	mov.w	r2, #4294967295
  404e7a:	4b59      	ldr	r3, [pc, #356]	; (404fe0 <_svfprintf_r+0x904>)
  404e7c:	f004 ff1e 	bl	409cbc <__aeabi_dcmpun>
  404e80:	2800      	cmp	r0, #0
  404e82:	f040 834a 	bne.w	40551a <_svfprintf_r+0xe3e>
  404e86:	4628      	mov	r0, r5
  404e88:	4621      	mov	r1, r4
  404e8a:	f04f 32ff 	mov.w	r2, #4294967295
  404e8e:	4b54      	ldr	r3, [pc, #336]	; (404fe0 <_svfprintf_r+0x904>)
  404e90:	f004 fef6 	bl	409c80 <__aeabi_dcmple>
  404e94:	2800      	cmp	r0, #0
  404e96:	f040 8340 	bne.w	40551a <_svfprintf_r+0xe3e>
  404e9a:	a815      	add	r0, sp, #84	; 0x54
  404e9c:	c80d      	ldmia	r0, {r0, r2, r3}
  404e9e:	9914      	ldr	r1, [sp, #80]	; 0x50
  404ea0:	f004 fee4 	bl	409c6c <__aeabi_dcmplt>
  404ea4:	2800      	cmp	r0, #0
  404ea6:	f040 8530 	bne.w	40590a <_svfprintf_r+0x122e>
  404eaa:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404eae:	4e4d      	ldr	r6, [pc, #308]	; (404fe4 <_svfprintf_r+0x908>)
  404eb0:	4b4d      	ldr	r3, [pc, #308]	; (404fe8 <_svfprintf_r+0x90c>)
  404eb2:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  404eb6:	9007      	str	r0, [sp, #28]
  404eb8:	9811      	ldr	r0, [sp, #68]	; 0x44
  404eba:	2203      	movs	r2, #3
  404ebc:	2100      	movs	r1, #0
  404ebe:	9208      	str	r2, [sp, #32]
  404ec0:	910a      	str	r1, [sp, #40]	; 0x28
  404ec2:	2847      	cmp	r0, #71	; 0x47
  404ec4:	bfd8      	it	le
  404ec6:	461e      	movle	r6, r3
  404ec8:	920e      	str	r2, [sp, #56]	; 0x38
  404eca:	9112      	str	r1, [sp, #72]	; 0x48
  404ecc:	e51e      	b.n	40490c <_svfprintf_r+0x230>
  404ece:	f04b 0b08 	orr.w	fp, fp, #8
  404ed2:	f89a 3000 	ldrb.w	r3, [sl]
  404ed6:	e459      	b.n	40478c <_svfprintf_r+0xb0>
  404ed8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404edc:	2300      	movs	r3, #0
  404ede:	461c      	mov	r4, r3
  404ee0:	f81a 3b01 	ldrb.w	r3, [sl], #1
  404ee4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404ee8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  404eec:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  404ef0:	2809      	cmp	r0, #9
  404ef2:	d9f5      	bls.n	404ee0 <_svfprintf_r+0x804>
  404ef4:	940d      	str	r4, [sp, #52]	; 0x34
  404ef6:	e44b      	b.n	404790 <_svfprintf_r+0xb4>
  404ef8:	f04b 0b10 	orr.w	fp, fp, #16
  404efc:	9311      	str	r3, [sp, #68]	; 0x44
  404efe:	f01b 0320 	ands.w	r3, fp, #32
  404f02:	f43f ae1d 	beq.w	404b40 <_svfprintf_r+0x464>
  404f06:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404f08:	3507      	adds	r5, #7
  404f0a:	f025 0307 	bic.w	r3, r5, #7
  404f0e:	f103 0208 	add.w	r2, r3, #8
  404f12:	e9d3 4500 	ldrd	r4, r5, [r3]
  404f16:	920f      	str	r2, [sp, #60]	; 0x3c
  404f18:	2300      	movs	r3, #0
  404f1a:	e4d2      	b.n	4048c2 <_svfprintf_r+0x1e6>
  404f1c:	9311      	str	r3, [sp, #68]	; 0x44
  404f1e:	2a00      	cmp	r2, #0
  404f20:	f040 85e7 	bne.w	405af2 <_svfprintf_r+0x1416>
  404f24:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f26:	2a00      	cmp	r2, #0
  404f28:	f43f aca3 	beq.w	404872 <_svfprintf_r+0x196>
  404f2c:	2300      	movs	r3, #0
  404f2e:	2101      	movs	r1, #1
  404f30:	461f      	mov	r7, r3
  404f32:	9108      	str	r1, [sp, #32]
  404f34:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  404f38:	f8cd b01c 	str.w	fp, [sp, #28]
  404f3c:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  404f40:	930a      	str	r3, [sp, #40]	; 0x28
  404f42:	9312      	str	r3, [sp, #72]	; 0x48
  404f44:	910e      	str	r1, [sp, #56]	; 0x38
  404f46:	ae28      	add	r6, sp, #160	; 0xa0
  404f48:	e4e4      	b.n	404914 <_svfprintf_r+0x238>
  404f4a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f4c:	e534      	b.n	4049b8 <_svfprintf_r+0x2dc>
  404f4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404f50:	2b65      	cmp	r3, #101	; 0x65
  404f52:	f340 80a7 	ble.w	4050a4 <_svfprintf_r+0x9c8>
  404f56:	a815      	add	r0, sp, #84	; 0x54
  404f58:	c80d      	ldmia	r0, {r0, r2, r3}
  404f5a:	9914      	ldr	r1, [sp, #80]	; 0x50
  404f5c:	f004 fe7c 	bl	409c58 <__aeabi_dcmpeq>
  404f60:	2800      	cmp	r0, #0
  404f62:	f000 8150 	beq.w	405206 <_svfprintf_r+0xb2a>
  404f66:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404f68:	4a20      	ldr	r2, [pc, #128]	; (404fec <_svfprintf_r+0x910>)
  404f6a:	f8c8 2000 	str.w	r2, [r8]
  404f6e:	3301      	adds	r3, #1
  404f70:	3401      	adds	r4, #1
  404f72:	2201      	movs	r2, #1
  404f74:	2b07      	cmp	r3, #7
  404f76:	9427      	str	r4, [sp, #156]	; 0x9c
  404f78:	9326      	str	r3, [sp, #152]	; 0x98
  404f7a:	f8c8 2004 	str.w	r2, [r8, #4]
  404f7e:	f300 836a 	bgt.w	405656 <_svfprintf_r+0xf7a>
  404f82:	f108 0808 	add.w	r8, r8, #8
  404f86:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404f88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  404f8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404f8c:	4293      	cmp	r3, r2
  404f8e:	db03      	blt.n	404f98 <_svfprintf_r+0x8bc>
  404f90:	9b07      	ldr	r3, [sp, #28]
  404f92:	07dd      	lsls	r5, r3, #31
  404f94:	f57f ad82 	bpl.w	404a9c <_svfprintf_r+0x3c0>
  404f98:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404f9a:	9919      	ldr	r1, [sp, #100]	; 0x64
  404f9c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404f9e:	f8c8 2000 	str.w	r2, [r8]
  404fa2:	3301      	adds	r3, #1
  404fa4:	440c      	add	r4, r1
  404fa6:	2b07      	cmp	r3, #7
  404fa8:	f8c8 1004 	str.w	r1, [r8, #4]
  404fac:	9427      	str	r4, [sp, #156]	; 0x9c
  404fae:	9326      	str	r3, [sp, #152]	; 0x98
  404fb0:	f300 839e 	bgt.w	4056f0 <_svfprintf_r+0x1014>
  404fb4:	f108 0808 	add.w	r8, r8, #8
  404fb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404fba:	1e5e      	subs	r6, r3, #1
  404fbc:	2e00      	cmp	r6, #0
  404fbe:	f77f ad6d 	ble.w	404a9c <_svfprintf_r+0x3c0>
  404fc2:	2e10      	cmp	r6, #16
  404fc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404fc6:	4d0a      	ldr	r5, [pc, #40]	; (404ff0 <_svfprintf_r+0x914>)
  404fc8:	f340 81f5 	ble.w	4053b6 <_svfprintf_r+0xcda>
  404fcc:	4622      	mov	r2, r4
  404fce:	2710      	movs	r7, #16
  404fd0:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404fd4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  404fd6:	e013      	b.n	405000 <_svfprintf_r+0x924>
  404fd8:	0040a1cc 	.word	0x0040a1cc
  404fdc:	0040a1b8 	.word	0x0040a1b8
  404fe0:	7fefffff 	.word	0x7fefffff
  404fe4:	0040a1ac 	.word	0x0040a1ac
  404fe8:	0040a1a8 	.word	0x0040a1a8
  404fec:	0040a1e8 	.word	0x0040a1e8
  404ff0:	0040a1fc 	.word	0x0040a1fc
  404ff4:	f108 0808 	add.w	r8, r8, #8
  404ff8:	3e10      	subs	r6, #16
  404ffa:	2e10      	cmp	r6, #16
  404ffc:	f340 81da 	ble.w	4053b4 <_svfprintf_r+0xcd8>
  405000:	3301      	adds	r3, #1
  405002:	3210      	adds	r2, #16
  405004:	2b07      	cmp	r3, #7
  405006:	9227      	str	r2, [sp, #156]	; 0x9c
  405008:	9326      	str	r3, [sp, #152]	; 0x98
  40500a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40500e:	ddf1      	ble.n	404ff4 <_svfprintf_r+0x918>
  405010:	aa25      	add	r2, sp, #148	; 0x94
  405012:	4621      	mov	r1, r4
  405014:	4658      	mov	r0, fp
  405016:	f003 ff83 	bl	408f20 <__ssprint_r>
  40501a:	2800      	cmp	r0, #0
  40501c:	f47f ac30 	bne.w	404880 <_svfprintf_r+0x1a4>
  405020:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405022:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405024:	46c8      	mov	r8, r9
  405026:	e7e7      	b.n	404ff8 <_svfprintf_r+0x91c>
  405028:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40502a:	9a08      	ldr	r2, [sp, #32]
  40502c:	1a9f      	subs	r7, r3, r2
  40502e:	2f00      	cmp	r7, #0
  405030:	f77f ace5 	ble.w	4049fe <_svfprintf_r+0x322>
  405034:	2f10      	cmp	r7, #16
  405036:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405038:	4db6      	ldr	r5, [pc, #728]	; (405314 <_svfprintf_r+0xc38>)
  40503a:	dd27      	ble.n	40508c <_svfprintf_r+0x9b0>
  40503c:	4642      	mov	r2, r8
  40503e:	4621      	mov	r1, r4
  405040:	46b0      	mov	r8, r6
  405042:	f04f 0b10 	mov.w	fp, #16
  405046:	462e      	mov	r6, r5
  405048:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40504a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40504c:	e004      	b.n	405058 <_svfprintf_r+0x97c>
  40504e:	3f10      	subs	r7, #16
  405050:	2f10      	cmp	r7, #16
  405052:	f102 0208 	add.w	r2, r2, #8
  405056:	dd15      	ble.n	405084 <_svfprintf_r+0x9a8>
  405058:	3301      	adds	r3, #1
  40505a:	3110      	adds	r1, #16
  40505c:	2b07      	cmp	r3, #7
  40505e:	9127      	str	r1, [sp, #156]	; 0x9c
  405060:	9326      	str	r3, [sp, #152]	; 0x98
  405062:	e882 0840 	stmia.w	r2, {r6, fp}
  405066:	ddf2      	ble.n	40504e <_svfprintf_r+0x972>
  405068:	aa25      	add	r2, sp, #148	; 0x94
  40506a:	4629      	mov	r1, r5
  40506c:	4620      	mov	r0, r4
  40506e:	f003 ff57 	bl	408f20 <__ssprint_r>
  405072:	2800      	cmp	r0, #0
  405074:	f47f ac04 	bne.w	404880 <_svfprintf_r+0x1a4>
  405078:	3f10      	subs	r7, #16
  40507a:	2f10      	cmp	r7, #16
  40507c:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40507e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405080:	464a      	mov	r2, r9
  405082:	dce9      	bgt.n	405058 <_svfprintf_r+0x97c>
  405084:	4635      	mov	r5, r6
  405086:	460c      	mov	r4, r1
  405088:	4646      	mov	r6, r8
  40508a:	4690      	mov	r8, r2
  40508c:	3301      	adds	r3, #1
  40508e:	443c      	add	r4, r7
  405090:	2b07      	cmp	r3, #7
  405092:	9427      	str	r4, [sp, #156]	; 0x9c
  405094:	9326      	str	r3, [sp, #152]	; 0x98
  405096:	e888 00a0 	stmia.w	r8, {r5, r7}
  40509a:	f300 8232 	bgt.w	405502 <_svfprintf_r+0xe26>
  40509e:	f108 0808 	add.w	r8, r8, #8
  4050a2:	e4ac      	b.n	4049fe <_svfprintf_r+0x322>
  4050a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4050a6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4050a8:	2b01      	cmp	r3, #1
  4050aa:	f340 81fe 	ble.w	4054aa <_svfprintf_r+0xdce>
  4050ae:	3701      	adds	r7, #1
  4050b0:	3401      	adds	r4, #1
  4050b2:	2301      	movs	r3, #1
  4050b4:	2f07      	cmp	r7, #7
  4050b6:	9427      	str	r4, [sp, #156]	; 0x9c
  4050b8:	9726      	str	r7, [sp, #152]	; 0x98
  4050ba:	f8c8 6000 	str.w	r6, [r8]
  4050be:	f8c8 3004 	str.w	r3, [r8, #4]
  4050c2:	f300 8203 	bgt.w	4054cc <_svfprintf_r+0xdf0>
  4050c6:	f108 0808 	add.w	r8, r8, #8
  4050ca:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4050cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  4050ce:	f8c8 3000 	str.w	r3, [r8]
  4050d2:	3701      	adds	r7, #1
  4050d4:	4414      	add	r4, r2
  4050d6:	2f07      	cmp	r7, #7
  4050d8:	9427      	str	r4, [sp, #156]	; 0x9c
  4050da:	9726      	str	r7, [sp, #152]	; 0x98
  4050dc:	f8c8 2004 	str.w	r2, [r8, #4]
  4050e0:	f300 8200 	bgt.w	4054e4 <_svfprintf_r+0xe08>
  4050e4:	f108 0808 	add.w	r8, r8, #8
  4050e8:	a815      	add	r0, sp, #84	; 0x54
  4050ea:	c80d      	ldmia	r0, {r0, r2, r3}
  4050ec:	9914      	ldr	r1, [sp, #80]	; 0x50
  4050ee:	f004 fdb3 	bl	409c58 <__aeabi_dcmpeq>
  4050f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4050f4:	2800      	cmp	r0, #0
  4050f6:	f040 8101 	bne.w	4052fc <_svfprintf_r+0xc20>
  4050fa:	3b01      	subs	r3, #1
  4050fc:	3701      	adds	r7, #1
  4050fe:	3601      	adds	r6, #1
  405100:	441c      	add	r4, r3
  405102:	2f07      	cmp	r7, #7
  405104:	9726      	str	r7, [sp, #152]	; 0x98
  405106:	9427      	str	r4, [sp, #156]	; 0x9c
  405108:	f8c8 6000 	str.w	r6, [r8]
  40510c:	f8c8 3004 	str.w	r3, [r8, #4]
  405110:	f300 8127 	bgt.w	405362 <_svfprintf_r+0xc86>
  405114:	f108 0808 	add.w	r8, r8, #8
  405118:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  40511a:	f8c8 2004 	str.w	r2, [r8, #4]
  40511e:	3701      	adds	r7, #1
  405120:	4414      	add	r4, r2
  405122:	ab21      	add	r3, sp, #132	; 0x84
  405124:	2f07      	cmp	r7, #7
  405126:	9427      	str	r4, [sp, #156]	; 0x9c
  405128:	9726      	str	r7, [sp, #152]	; 0x98
  40512a:	f8c8 3000 	str.w	r3, [r8]
  40512e:	f77f acb3 	ble.w	404a98 <_svfprintf_r+0x3bc>
  405132:	aa25      	add	r2, sp, #148	; 0x94
  405134:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405136:	980c      	ldr	r0, [sp, #48]	; 0x30
  405138:	f003 fef2 	bl	408f20 <__ssprint_r>
  40513c:	2800      	cmp	r0, #0
  40513e:	f47f ab9f 	bne.w	404880 <_svfprintf_r+0x1a4>
  405142:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405144:	46c8      	mov	r8, r9
  405146:	e4a9      	b.n	404a9c <_svfprintf_r+0x3c0>
  405148:	aa25      	add	r2, sp, #148	; 0x94
  40514a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40514c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40514e:	f003 fee7 	bl	408f20 <__ssprint_r>
  405152:	2800      	cmp	r0, #0
  405154:	f43f aceb 	beq.w	404b2e <_svfprintf_r+0x452>
  405158:	f7ff bb92 	b.w	404880 <_svfprintf_r+0x1a4>
  40515c:	f8dd b01c 	ldr.w	fp, [sp, #28]
  405160:	2b01      	cmp	r3, #1
  405162:	f000 8134 	beq.w	4053ce <_svfprintf_r+0xcf2>
  405166:	2b02      	cmp	r3, #2
  405168:	d125      	bne.n	4051b6 <_svfprintf_r+0xada>
  40516a:	f8cd b01c 	str.w	fp, [sp, #28]
  40516e:	2400      	movs	r4, #0
  405170:	2500      	movs	r5, #0
  405172:	e61e      	b.n	404db2 <_svfprintf_r+0x6d6>
  405174:	aa25      	add	r2, sp, #148	; 0x94
  405176:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405178:	980c      	ldr	r0, [sp, #48]	; 0x30
  40517a:	f003 fed1 	bl	408f20 <__ssprint_r>
  40517e:	2800      	cmp	r0, #0
  405180:	f47f ab7e 	bne.w	404880 <_svfprintf_r+0x1a4>
  405184:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405186:	46c8      	mov	r8, r9
  405188:	e475      	b.n	404a76 <_svfprintf_r+0x39a>
  40518a:	aa25      	add	r2, sp, #148	; 0x94
  40518c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40518e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405190:	f003 fec6 	bl	408f20 <__ssprint_r>
  405194:	2800      	cmp	r0, #0
  405196:	f47f ab73 	bne.w	404880 <_svfprintf_r+0x1a4>
  40519a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40519c:	46c8      	mov	r8, r9
  40519e:	e41b      	b.n	4049d8 <_svfprintf_r+0x2fc>
  4051a0:	aa25      	add	r2, sp, #148	; 0x94
  4051a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4051a4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4051a6:	f003 febb 	bl	408f20 <__ssprint_r>
  4051aa:	2800      	cmp	r0, #0
  4051ac:	f47f ab68 	bne.w	404880 <_svfprintf_r+0x1a4>
  4051b0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4051b2:	46c8      	mov	r8, r9
  4051b4:	e420      	b.n	4049f8 <_svfprintf_r+0x31c>
  4051b6:	f8cd b01c 	str.w	fp, [sp, #28]
  4051ba:	2400      	movs	r4, #0
  4051bc:	2500      	movs	r5, #0
  4051be:	4649      	mov	r1, r9
  4051c0:	e000      	b.n	4051c4 <_svfprintf_r+0xae8>
  4051c2:	4631      	mov	r1, r6
  4051c4:	08e2      	lsrs	r2, r4, #3
  4051c6:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  4051ca:	08e8      	lsrs	r0, r5, #3
  4051cc:	f004 0307 	and.w	r3, r4, #7
  4051d0:	4605      	mov	r5, r0
  4051d2:	4614      	mov	r4, r2
  4051d4:	3330      	adds	r3, #48	; 0x30
  4051d6:	ea54 0205 	orrs.w	r2, r4, r5
  4051da:	f801 3c01 	strb.w	r3, [r1, #-1]
  4051de:	f101 36ff 	add.w	r6, r1, #4294967295
  4051e2:	d1ee      	bne.n	4051c2 <_svfprintf_r+0xae6>
  4051e4:	9a07      	ldr	r2, [sp, #28]
  4051e6:	07d2      	lsls	r2, r2, #31
  4051e8:	f57f adf3 	bpl.w	404dd2 <_svfprintf_r+0x6f6>
  4051ec:	2b30      	cmp	r3, #48	; 0x30
  4051ee:	f43f adf0 	beq.w	404dd2 <_svfprintf_r+0x6f6>
  4051f2:	3902      	subs	r1, #2
  4051f4:	2330      	movs	r3, #48	; 0x30
  4051f6:	f806 3c01 	strb.w	r3, [r6, #-1]
  4051fa:	eba9 0301 	sub.w	r3, r9, r1
  4051fe:	930e      	str	r3, [sp, #56]	; 0x38
  405200:	460e      	mov	r6, r1
  405202:	f7ff bb7b 	b.w	4048fc <_svfprintf_r+0x220>
  405206:	991f      	ldr	r1, [sp, #124]	; 0x7c
  405208:	2900      	cmp	r1, #0
  40520a:	f340 822e 	ble.w	40566a <_svfprintf_r+0xf8e>
  40520e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405210:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405212:	4293      	cmp	r3, r2
  405214:	bfa8      	it	ge
  405216:	4613      	movge	r3, r2
  405218:	2b00      	cmp	r3, #0
  40521a:	461f      	mov	r7, r3
  40521c:	dd0d      	ble.n	40523a <_svfprintf_r+0xb5e>
  40521e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405220:	f8c8 6000 	str.w	r6, [r8]
  405224:	3301      	adds	r3, #1
  405226:	443c      	add	r4, r7
  405228:	2b07      	cmp	r3, #7
  40522a:	9427      	str	r4, [sp, #156]	; 0x9c
  40522c:	f8c8 7004 	str.w	r7, [r8, #4]
  405230:	9326      	str	r3, [sp, #152]	; 0x98
  405232:	f300 831f 	bgt.w	405874 <_svfprintf_r+0x1198>
  405236:	f108 0808 	add.w	r8, r8, #8
  40523a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40523c:	2f00      	cmp	r7, #0
  40523e:	bfa8      	it	ge
  405240:	1bdb      	subge	r3, r3, r7
  405242:	2b00      	cmp	r3, #0
  405244:	461f      	mov	r7, r3
  405246:	f340 80d6 	ble.w	4053f6 <_svfprintf_r+0xd1a>
  40524a:	2f10      	cmp	r7, #16
  40524c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40524e:	4d31      	ldr	r5, [pc, #196]	; (405314 <_svfprintf_r+0xc38>)
  405250:	f340 81ed 	ble.w	40562e <_svfprintf_r+0xf52>
  405254:	4642      	mov	r2, r8
  405256:	4621      	mov	r1, r4
  405258:	46b0      	mov	r8, r6
  40525a:	f04f 0b10 	mov.w	fp, #16
  40525e:	462e      	mov	r6, r5
  405260:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405262:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  405264:	e004      	b.n	405270 <_svfprintf_r+0xb94>
  405266:	3208      	adds	r2, #8
  405268:	3f10      	subs	r7, #16
  40526a:	2f10      	cmp	r7, #16
  40526c:	f340 81db 	ble.w	405626 <_svfprintf_r+0xf4a>
  405270:	3301      	adds	r3, #1
  405272:	3110      	adds	r1, #16
  405274:	2b07      	cmp	r3, #7
  405276:	9127      	str	r1, [sp, #156]	; 0x9c
  405278:	9326      	str	r3, [sp, #152]	; 0x98
  40527a:	e882 0840 	stmia.w	r2, {r6, fp}
  40527e:	ddf2      	ble.n	405266 <_svfprintf_r+0xb8a>
  405280:	aa25      	add	r2, sp, #148	; 0x94
  405282:	4629      	mov	r1, r5
  405284:	4620      	mov	r0, r4
  405286:	f003 fe4b 	bl	408f20 <__ssprint_r>
  40528a:	2800      	cmp	r0, #0
  40528c:	f47f aaf8 	bne.w	404880 <_svfprintf_r+0x1a4>
  405290:	9927      	ldr	r1, [sp, #156]	; 0x9c
  405292:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405294:	464a      	mov	r2, r9
  405296:	e7e7      	b.n	405268 <_svfprintf_r+0xb8c>
  405298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40529a:	930e      	str	r3, [sp, #56]	; 0x38
  40529c:	464e      	mov	r6, r9
  40529e:	f7ff bb2d 	b.w	4048fc <_svfprintf_r+0x220>
  4052a2:	2d00      	cmp	r5, #0
  4052a4:	bf08      	it	eq
  4052a6:	2c0a      	cmpeq	r4, #10
  4052a8:	f0c0 808f 	bcc.w	4053ca <_svfprintf_r+0xcee>
  4052ac:	464e      	mov	r6, r9
  4052ae:	4620      	mov	r0, r4
  4052b0:	4629      	mov	r1, r5
  4052b2:	220a      	movs	r2, #10
  4052b4:	2300      	movs	r3, #0
  4052b6:	f004 fd3f 	bl	409d38 <__aeabi_uldivmod>
  4052ba:	3230      	adds	r2, #48	; 0x30
  4052bc:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4052c0:	4620      	mov	r0, r4
  4052c2:	4629      	mov	r1, r5
  4052c4:	2300      	movs	r3, #0
  4052c6:	220a      	movs	r2, #10
  4052c8:	f004 fd36 	bl	409d38 <__aeabi_uldivmod>
  4052cc:	4604      	mov	r4, r0
  4052ce:	460d      	mov	r5, r1
  4052d0:	ea54 0305 	orrs.w	r3, r4, r5
  4052d4:	d1eb      	bne.n	4052ae <_svfprintf_r+0xbd2>
  4052d6:	eba9 0306 	sub.w	r3, r9, r6
  4052da:	930e      	str	r3, [sp, #56]	; 0x38
  4052dc:	f7ff bb0e 	b.w	4048fc <_svfprintf_r+0x220>
  4052e0:	aa25      	add	r2, sp, #148	; 0x94
  4052e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4052e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4052e6:	f003 fe1b 	bl	408f20 <__ssprint_r>
  4052ea:	2800      	cmp	r0, #0
  4052ec:	f47f aac8 	bne.w	404880 <_svfprintf_r+0x1a4>
  4052f0:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4052f4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4052f6:	46c8      	mov	r8, r9
  4052f8:	f7ff bb5e 	b.w	4049b8 <_svfprintf_r+0x2dc>
  4052fc:	1e5e      	subs	r6, r3, #1
  4052fe:	2e00      	cmp	r6, #0
  405300:	f77f af0a 	ble.w	405118 <_svfprintf_r+0xa3c>
  405304:	2e10      	cmp	r6, #16
  405306:	4d03      	ldr	r5, [pc, #12]	; (405314 <_svfprintf_r+0xc38>)
  405308:	dd22      	ble.n	405350 <_svfprintf_r+0xc74>
  40530a:	4622      	mov	r2, r4
  40530c:	f04f 0b10 	mov.w	fp, #16
  405310:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405312:	e006      	b.n	405322 <_svfprintf_r+0xc46>
  405314:	0040a1fc 	.word	0x0040a1fc
  405318:	3e10      	subs	r6, #16
  40531a:	2e10      	cmp	r6, #16
  40531c:	f108 0808 	add.w	r8, r8, #8
  405320:	dd15      	ble.n	40534e <_svfprintf_r+0xc72>
  405322:	3701      	adds	r7, #1
  405324:	3210      	adds	r2, #16
  405326:	2f07      	cmp	r7, #7
  405328:	9227      	str	r2, [sp, #156]	; 0x9c
  40532a:	9726      	str	r7, [sp, #152]	; 0x98
  40532c:	e888 0820 	stmia.w	r8, {r5, fp}
  405330:	ddf2      	ble.n	405318 <_svfprintf_r+0xc3c>
  405332:	aa25      	add	r2, sp, #148	; 0x94
  405334:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405336:	4620      	mov	r0, r4
  405338:	f003 fdf2 	bl	408f20 <__ssprint_r>
  40533c:	2800      	cmp	r0, #0
  40533e:	f47f aa9f 	bne.w	404880 <_svfprintf_r+0x1a4>
  405342:	3e10      	subs	r6, #16
  405344:	2e10      	cmp	r6, #16
  405346:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405348:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40534a:	46c8      	mov	r8, r9
  40534c:	dce9      	bgt.n	405322 <_svfprintf_r+0xc46>
  40534e:	4614      	mov	r4, r2
  405350:	3701      	adds	r7, #1
  405352:	4434      	add	r4, r6
  405354:	2f07      	cmp	r7, #7
  405356:	9427      	str	r4, [sp, #156]	; 0x9c
  405358:	9726      	str	r7, [sp, #152]	; 0x98
  40535a:	e888 0060 	stmia.w	r8, {r5, r6}
  40535e:	f77f aed9 	ble.w	405114 <_svfprintf_r+0xa38>
  405362:	aa25      	add	r2, sp, #148	; 0x94
  405364:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405366:	980c      	ldr	r0, [sp, #48]	; 0x30
  405368:	f003 fdda 	bl	408f20 <__ssprint_r>
  40536c:	2800      	cmp	r0, #0
  40536e:	f47f aa87 	bne.w	404880 <_svfprintf_r+0x1a4>
  405372:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405374:	9f26      	ldr	r7, [sp, #152]	; 0x98
  405376:	46c8      	mov	r8, r9
  405378:	e6ce      	b.n	405118 <_svfprintf_r+0xa3c>
  40537a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40537c:	6814      	ldr	r4, [r2, #0]
  40537e:	4613      	mov	r3, r2
  405380:	3304      	adds	r3, #4
  405382:	17e5      	asrs	r5, r4, #31
  405384:	930f      	str	r3, [sp, #60]	; 0x3c
  405386:	4622      	mov	r2, r4
  405388:	462b      	mov	r3, r5
  40538a:	e4fa      	b.n	404d82 <_svfprintf_r+0x6a6>
  40538c:	3204      	adds	r2, #4
  40538e:	681c      	ldr	r4, [r3, #0]
  405390:	920f      	str	r2, [sp, #60]	; 0x3c
  405392:	2301      	movs	r3, #1
  405394:	2500      	movs	r5, #0
  405396:	f7ff ba94 	b.w	4048c2 <_svfprintf_r+0x1e6>
  40539a:	681c      	ldr	r4, [r3, #0]
  40539c:	3304      	adds	r3, #4
  40539e:	930f      	str	r3, [sp, #60]	; 0x3c
  4053a0:	2500      	movs	r5, #0
  4053a2:	e421      	b.n	404be8 <_svfprintf_r+0x50c>
  4053a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4053a6:	460a      	mov	r2, r1
  4053a8:	3204      	adds	r2, #4
  4053aa:	680c      	ldr	r4, [r1, #0]
  4053ac:	920f      	str	r2, [sp, #60]	; 0x3c
  4053ae:	2500      	movs	r5, #0
  4053b0:	f7ff ba87 	b.w	4048c2 <_svfprintf_r+0x1e6>
  4053b4:	4614      	mov	r4, r2
  4053b6:	3301      	adds	r3, #1
  4053b8:	4434      	add	r4, r6
  4053ba:	2b07      	cmp	r3, #7
  4053bc:	9427      	str	r4, [sp, #156]	; 0x9c
  4053be:	9326      	str	r3, [sp, #152]	; 0x98
  4053c0:	e888 0060 	stmia.w	r8, {r5, r6}
  4053c4:	f77f ab68 	ble.w	404a98 <_svfprintf_r+0x3bc>
  4053c8:	e6b3      	b.n	405132 <_svfprintf_r+0xa56>
  4053ca:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4053ce:	f8cd b01c 	str.w	fp, [sp, #28]
  4053d2:	ae42      	add	r6, sp, #264	; 0x108
  4053d4:	3430      	adds	r4, #48	; 0x30
  4053d6:	2301      	movs	r3, #1
  4053d8:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4053dc:	930e      	str	r3, [sp, #56]	; 0x38
  4053de:	f7ff ba8d 	b.w	4048fc <_svfprintf_r+0x220>
  4053e2:	aa25      	add	r2, sp, #148	; 0x94
  4053e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4053e6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4053e8:	f003 fd9a 	bl	408f20 <__ssprint_r>
  4053ec:	2800      	cmp	r0, #0
  4053ee:	f47f aa47 	bne.w	404880 <_svfprintf_r+0x1a4>
  4053f2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4053f4:	46c8      	mov	r8, r9
  4053f6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4053f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4053fa:	429a      	cmp	r2, r3
  4053fc:	db44      	blt.n	405488 <_svfprintf_r+0xdac>
  4053fe:	9b07      	ldr	r3, [sp, #28]
  405400:	07d9      	lsls	r1, r3, #31
  405402:	d441      	bmi.n	405488 <_svfprintf_r+0xdac>
  405404:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405406:	9812      	ldr	r0, [sp, #72]	; 0x48
  405408:	1a9a      	subs	r2, r3, r2
  40540a:	1a1d      	subs	r5, r3, r0
  40540c:	4295      	cmp	r5, r2
  40540e:	bfa8      	it	ge
  405410:	4615      	movge	r5, r2
  405412:	2d00      	cmp	r5, #0
  405414:	dd0e      	ble.n	405434 <_svfprintf_r+0xd58>
  405416:	9926      	ldr	r1, [sp, #152]	; 0x98
  405418:	f8c8 5004 	str.w	r5, [r8, #4]
  40541c:	3101      	adds	r1, #1
  40541e:	4406      	add	r6, r0
  405420:	442c      	add	r4, r5
  405422:	2907      	cmp	r1, #7
  405424:	f8c8 6000 	str.w	r6, [r8]
  405428:	9427      	str	r4, [sp, #156]	; 0x9c
  40542a:	9126      	str	r1, [sp, #152]	; 0x98
  40542c:	f300 823b 	bgt.w	4058a6 <_svfprintf_r+0x11ca>
  405430:	f108 0808 	add.w	r8, r8, #8
  405434:	2d00      	cmp	r5, #0
  405436:	bfac      	ite	ge
  405438:	1b56      	subge	r6, r2, r5
  40543a:	4616      	movlt	r6, r2
  40543c:	2e00      	cmp	r6, #0
  40543e:	f77f ab2d 	ble.w	404a9c <_svfprintf_r+0x3c0>
  405442:	2e10      	cmp	r6, #16
  405444:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405446:	4db0      	ldr	r5, [pc, #704]	; (405708 <_svfprintf_r+0x102c>)
  405448:	ddb5      	ble.n	4053b6 <_svfprintf_r+0xcda>
  40544a:	4622      	mov	r2, r4
  40544c:	2710      	movs	r7, #16
  40544e:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405452:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  405454:	e004      	b.n	405460 <_svfprintf_r+0xd84>
  405456:	f108 0808 	add.w	r8, r8, #8
  40545a:	3e10      	subs	r6, #16
  40545c:	2e10      	cmp	r6, #16
  40545e:	dda9      	ble.n	4053b4 <_svfprintf_r+0xcd8>
  405460:	3301      	adds	r3, #1
  405462:	3210      	adds	r2, #16
  405464:	2b07      	cmp	r3, #7
  405466:	9227      	str	r2, [sp, #156]	; 0x9c
  405468:	9326      	str	r3, [sp, #152]	; 0x98
  40546a:	e888 00a0 	stmia.w	r8, {r5, r7}
  40546e:	ddf2      	ble.n	405456 <_svfprintf_r+0xd7a>
  405470:	aa25      	add	r2, sp, #148	; 0x94
  405472:	4621      	mov	r1, r4
  405474:	4658      	mov	r0, fp
  405476:	f003 fd53 	bl	408f20 <__ssprint_r>
  40547a:	2800      	cmp	r0, #0
  40547c:	f47f aa00 	bne.w	404880 <_svfprintf_r+0x1a4>
  405480:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405482:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405484:	46c8      	mov	r8, r9
  405486:	e7e8      	b.n	40545a <_svfprintf_r+0xd7e>
  405488:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40548a:	9819      	ldr	r0, [sp, #100]	; 0x64
  40548c:	991a      	ldr	r1, [sp, #104]	; 0x68
  40548e:	f8c8 1000 	str.w	r1, [r8]
  405492:	3301      	adds	r3, #1
  405494:	4404      	add	r4, r0
  405496:	2b07      	cmp	r3, #7
  405498:	9427      	str	r4, [sp, #156]	; 0x9c
  40549a:	f8c8 0004 	str.w	r0, [r8, #4]
  40549e:	9326      	str	r3, [sp, #152]	; 0x98
  4054a0:	f300 81f5 	bgt.w	40588e <_svfprintf_r+0x11b2>
  4054a4:	f108 0808 	add.w	r8, r8, #8
  4054a8:	e7ac      	b.n	405404 <_svfprintf_r+0xd28>
  4054aa:	9b07      	ldr	r3, [sp, #28]
  4054ac:	07da      	lsls	r2, r3, #31
  4054ae:	f53f adfe 	bmi.w	4050ae <_svfprintf_r+0x9d2>
  4054b2:	3701      	adds	r7, #1
  4054b4:	3401      	adds	r4, #1
  4054b6:	2301      	movs	r3, #1
  4054b8:	2f07      	cmp	r7, #7
  4054ba:	9427      	str	r4, [sp, #156]	; 0x9c
  4054bc:	9726      	str	r7, [sp, #152]	; 0x98
  4054be:	f8c8 6000 	str.w	r6, [r8]
  4054c2:	f8c8 3004 	str.w	r3, [r8, #4]
  4054c6:	f77f ae25 	ble.w	405114 <_svfprintf_r+0xa38>
  4054ca:	e74a      	b.n	405362 <_svfprintf_r+0xc86>
  4054cc:	aa25      	add	r2, sp, #148	; 0x94
  4054ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4054d0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4054d2:	f003 fd25 	bl	408f20 <__ssprint_r>
  4054d6:	2800      	cmp	r0, #0
  4054d8:	f47f a9d2 	bne.w	404880 <_svfprintf_r+0x1a4>
  4054dc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4054de:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4054e0:	46c8      	mov	r8, r9
  4054e2:	e5f2      	b.n	4050ca <_svfprintf_r+0x9ee>
  4054e4:	aa25      	add	r2, sp, #148	; 0x94
  4054e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4054e8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4054ea:	f003 fd19 	bl	408f20 <__ssprint_r>
  4054ee:	2800      	cmp	r0, #0
  4054f0:	f47f a9c6 	bne.w	404880 <_svfprintf_r+0x1a4>
  4054f4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4054f6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4054f8:	46c8      	mov	r8, r9
  4054fa:	e5f5      	b.n	4050e8 <_svfprintf_r+0xa0c>
  4054fc:	464e      	mov	r6, r9
  4054fe:	f7ff b9fd 	b.w	4048fc <_svfprintf_r+0x220>
  405502:	aa25      	add	r2, sp, #148	; 0x94
  405504:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405506:	980c      	ldr	r0, [sp, #48]	; 0x30
  405508:	f003 fd0a 	bl	408f20 <__ssprint_r>
  40550c:	2800      	cmp	r0, #0
  40550e:	f47f a9b7 	bne.w	404880 <_svfprintf_r+0x1a4>
  405512:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405514:	46c8      	mov	r8, r9
  405516:	f7ff ba72 	b.w	4049fe <_svfprintf_r+0x322>
  40551a:	9c15      	ldr	r4, [sp, #84]	; 0x54
  40551c:	4622      	mov	r2, r4
  40551e:	4620      	mov	r0, r4
  405520:	9c14      	ldr	r4, [sp, #80]	; 0x50
  405522:	4623      	mov	r3, r4
  405524:	4621      	mov	r1, r4
  405526:	f004 fbc9 	bl	409cbc <__aeabi_dcmpun>
  40552a:	2800      	cmp	r0, #0
  40552c:	f040 8286 	bne.w	405a3c <_svfprintf_r+0x1360>
  405530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405532:	3301      	adds	r3, #1
  405534:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405536:	f023 0320 	bic.w	r3, r3, #32
  40553a:	930e      	str	r3, [sp, #56]	; 0x38
  40553c:	f000 81e2 	beq.w	405904 <_svfprintf_r+0x1228>
  405540:	2b47      	cmp	r3, #71	; 0x47
  405542:	f000 811e 	beq.w	405782 <_svfprintf_r+0x10a6>
  405546:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  40554a:	9307      	str	r3, [sp, #28]
  40554c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  40554e:	1e1f      	subs	r7, r3, #0
  405550:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405552:	9308      	str	r3, [sp, #32]
  405554:	bfbb      	ittet	lt
  405556:	463b      	movlt	r3, r7
  405558:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  40555c:	2300      	movge	r3, #0
  40555e:	232d      	movlt	r3, #45	; 0x2d
  405560:	9310      	str	r3, [sp, #64]	; 0x40
  405562:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405564:	2b66      	cmp	r3, #102	; 0x66
  405566:	f000 81bb 	beq.w	4058e0 <_svfprintf_r+0x1204>
  40556a:	2b46      	cmp	r3, #70	; 0x46
  40556c:	f000 80df 	beq.w	40572e <_svfprintf_r+0x1052>
  405570:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405572:	9a08      	ldr	r2, [sp, #32]
  405574:	2b45      	cmp	r3, #69	; 0x45
  405576:	bf0c      	ite	eq
  405578:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  40557a:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  40557c:	a823      	add	r0, sp, #140	; 0x8c
  40557e:	a920      	add	r1, sp, #128	; 0x80
  405580:	bf08      	it	eq
  405582:	1c5d      	addeq	r5, r3, #1
  405584:	9004      	str	r0, [sp, #16]
  405586:	9103      	str	r1, [sp, #12]
  405588:	a81f      	add	r0, sp, #124	; 0x7c
  40558a:	2102      	movs	r1, #2
  40558c:	463b      	mov	r3, r7
  40558e:	9002      	str	r0, [sp, #8]
  405590:	9501      	str	r5, [sp, #4]
  405592:	9100      	str	r1, [sp, #0]
  405594:	980c      	ldr	r0, [sp, #48]	; 0x30
  405596:	f001 faa3 	bl	406ae0 <_dtoa_r>
  40559a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40559c:	2b67      	cmp	r3, #103	; 0x67
  40559e:	4606      	mov	r6, r0
  4055a0:	f040 81e0 	bne.w	405964 <_svfprintf_r+0x1288>
  4055a4:	f01b 0f01 	tst.w	fp, #1
  4055a8:	f000 8246 	beq.w	405a38 <_svfprintf_r+0x135c>
  4055ac:	1974      	adds	r4, r6, r5
  4055ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4055b0:	9808      	ldr	r0, [sp, #32]
  4055b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4055b4:	4639      	mov	r1, r7
  4055b6:	f004 fb4f 	bl	409c58 <__aeabi_dcmpeq>
  4055ba:	2800      	cmp	r0, #0
  4055bc:	f040 8165 	bne.w	40588a <_svfprintf_r+0x11ae>
  4055c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4055c2:	42a3      	cmp	r3, r4
  4055c4:	d206      	bcs.n	4055d4 <_svfprintf_r+0xef8>
  4055c6:	2130      	movs	r1, #48	; 0x30
  4055c8:	1c5a      	adds	r2, r3, #1
  4055ca:	9223      	str	r2, [sp, #140]	; 0x8c
  4055cc:	7019      	strb	r1, [r3, #0]
  4055ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4055d0:	429c      	cmp	r4, r3
  4055d2:	d8f9      	bhi.n	4055c8 <_svfprintf_r+0xeec>
  4055d4:	1b9b      	subs	r3, r3, r6
  4055d6:	9313      	str	r3, [sp, #76]	; 0x4c
  4055d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4055da:	2b47      	cmp	r3, #71	; 0x47
  4055dc:	f000 80e9 	beq.w	4057b2 <_svfprintf_r+0x10d6>
  4055e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4055e2:	2b65      	cmp	r3, #101	; 0x65
  4055e4:	f340 81cd 	ble.w	405982 <_svfprintf_r+0x12a6>
  4055e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4055ea:	2b66      	cmp	r3, #102	; 0x66
  4055ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4055ee:	9312      	str	r3, [sp, #72]	; 0x48
  4055f0:	f000 819e 	beq.w	405930 <_svfprintf_r+0x1254>
  4055f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4055f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4055f8:	4619      	mov	r1, r3
  4055fa:	4291      	cmp	r1, r2
  4055fc:	f300 818a 	bgt.w	405914 <_svfprintf_r+0x1238>
  405600:	f01b 0f01 	tst.w	fp, #1
  405604:	f040 8213 	bne.w	405a2e <_svfprintf_r+0x1352>
  405608:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  40560c:	9308      	str	r3, [sp, #32]
  40560e:	2367      	movs	r3, #103	; 0x67
  405610:	920e      	str	r2, [sp, #56]	; 0x38
  405612:	9311      	str	r3, [sp, #68]	; 0x44
  405614:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405616:	2b00      	cmp	r3, #0
  405618:	f040 80c4 	bne.w	4057a4 <_svfprintf_r+0x10c8>
  40561c:	930a      	str	r3, [sp, #40]	; 0x28
  40561e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405622:	f7ff b973 	b.w	40490c <_svfprintf_r+0x230>
  405626:	4635      	mov	r5, r6
  405628:	460c      	mov	r4, r1
  40562a:	4646      	mov	r6, r8
  40562c:	4690      	mov	r8, r2
  40562e:	3301      	adds	r3, #1
  405630:	443c      	add	r4, r7
  405632:	2b07      	cmp	r3, #7
  405634:	9427      	str	r4, [sp, #156]	; 0x9c
  405636:	9326      	str	r3, [sp, #152]	; 0x98
  405638:	e888 00a0 	stmia.w	r8, {r5, r7}
  40563c:	f73f aed1 	bgt.w	4053e2 <_svfprintf_r+0xd06>
  405640:	f108 0808 	add.w	r8, r8, #8
  405644:	e6d7      	b.n	4053f6 <_svfprintf_r+0xd1a>
  405646:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  405648:	6813      	ldr	r3, [r2, #0]
  40564a:	3204      	adds	r2, #4
  40564c:	920f      	str	r2, [sp, #60]	; 0x3c
  40564e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  405650:	601a      	str	r2, [r3, #0]
  405652:	f7ff b86a 	b.w	40472a <_svfprintf_r+0x4e>
  405656:	aa25      	add	r2, sp, #148	; 0x94
  405658:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40565a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40565c:	f003 fc60 	bl	408f20 <__ssprint_r>
  405660:	2800      	cmp	r0, #0
  405662:	f47f a90d 	bne.w	404880 <_svfprintf_r+0x1a4>
  405666:	46c8      	mov	r8, r9
  405668:	e48d      	b.n	404f86 <_svfprintf_r+0x8aa>
  40566a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40566c:	4a27      	ldr	r2, [pc, #156]	; (40570c <_svfprintf_r+0x1030>)
  40566e:	f8c8 2000 	str.w	r2, [r8]
  405672:	3301      	adds	r3, #1
  405674:	3401      	adds	r4, #1
  405676:	2201      	movs	r2, #1
  405678:	2b07      	cmp	r3, #7
  40567a:	9427      	str	r4, [sp, #156]	; 0x9c
  40567c:	9326      	str	r3, [sp, #152]	; 0x98
  40567e:	f8c8 2004 	str.w	r2, [r8, #4]
  405682:	dc72      	bgt.n	40576a <_svfprintf_r+0x108e>
  405684:	f108 0808 	add.w	r8, r8, #8
  405688:	b929      	cbnz	r1, 405696 <_svfprintf_r+0xfba>
  40568a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40568c:	b91b      	cbnz	r3, 405696 <_svfprintf_r+0xfba>
  40568e:	9b07      	ldr	r3, [sp, #28]
  405690:	07d8      	lsls	r0, r3, #31
  405692:	f57f aa03 	bpl.w	404a9c <_svfprintf_r+0x3c0>
  405696:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405698:	9819      	ldr	r0, [sp, #100]	; 0x64
  40569a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  40569c:	f8c8 2000 	str.w	r2, [r8]
  4056a0:	3301      	adds	r3, #1
  4056a2:	4602      	mov	r2, r0
  4056a4:	4422      	add	r2, r4
  4056a6:	2b07      	cmp	r3, #7
  4056a8:	9227      	str	r2, [sp, #156]	; 0x9c
  4056aa:	f8c8 0004 	str.w	r0, [r8, #4]
  4056ae:	9326      	str	r3, [sp, #152]	; 0x98
  4056b0:	f300 818d 	bgt.w	4059ce <_svfprintf_r+0x12f2>
  4056b4:	f108 0808 	add.w	r8, r8, #8
  4056b8:	2900      	cmp	r1, #0
  4056ba:	f2c0 8165 	blt.w	405988 <_svfprintf_r+0x12ac>
  4056be:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4056c0:	f8c8 6000 	str.w	r6, [r8]
  4056c4:	3301      	adds	r3, #1
  4056c6:	188c      	adds	r4, r1, r2
  4056c8:	2b07      	cmp	r3, #7
  4056ca:	9427      	str	r4, [sp, #156]	; 0x9c
  4056cc:	9326      	str	r3, [sp, #152]	; 0x98
  4056ce:	f8c8 1004 	str.w	r1, [r8, #4]
  4056d2:	f77f a9e1 	ble.w	404a98 <_svfprintf_r+0x3bc>
  4056d6:	e52c      	b.n	405132 <_svfprintf_r+0xa56>
  4056d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4056da:	9909      	ldr	r1, [sp, #36]	; 0x24
  4056dc:	6813      	ldr	r3, [r2, #0]
  4056de:	17cd      	asrs	r5, r1, #31
  4056e0:	4608      	mov	r0, r1
  4056e2:	3204      	adds	r2, #4
  4056e4:	4629      	mov	r1, r5
  4056e6:	920f      	str	r2, [sp, #60]	; 0x3c
  4056e8:	e9c3 0100 	strd	r0, r1, [r3]
  4056ec:	f7ff b81d 	b.w	40472a <_svfprintf_r+0x4e>
  4056f0:	aa25      	add	r2, sp, #148	; 0x94
  4056f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4056f4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4056f6:	f003 fc13 	bl	408f20 <__ssprint_r>
  4056fa:	2800      	cmp	r0, #0
  4056fc:	f47f a8c0 	bne.w	404880 <_svfprintf_r+0x1a4>
  405700:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405702:	46c8      	mov	r8, r9
  405704:	e458      	b.n	404fb8 <_svfprintf_r+0x8dc>
  405706:	bf00      	nop
  405708:	0040a1fc 	.word	0x0040a1fc
  40570c:	0040a1e8 	.word	0x0040a1e8
  405710:	2140      	movs	r1, #64	; 0x40
  405712:	980c      	ldr	r0, [sp, #48]	; 0x30
  405714:	f7fe fa64 	bl	403be0 <_malloc_r>
  405718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40571a:	6010      	str	r0, [r2, #0]
  40571c:	6110      	str	r0, [r2, #16]
  40571e:	2800      	cmp	r0, #0
  405720:	f000 81f2 	beq.w	405b08 <_svfprintf_r+0x142c>
  405724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  405726:	2340      	movs	r3, #64	; 0x40
  405728:	6153      	str	r3, [r2, #20]
  40572a:	f7fe bfee 	b.w	40470a <_svfprintf_r+0x2e>
  40572e:	a823      	add	r0, sp, #140	; 0x8c
  405730:	a920      	add	r1, sp, #128	; 0x80
  405732:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  405734:	9004      	str	r0, [sp, #16]
  405736:	9103      	str	r1, [sp, #12]
  405738:	a81f      	add	r0, sp, #124	; 0x7c
  40573a:	2103      	movs	r1, #3
  40573c:	9002      	str	r0, [sp, #8]
  40573e:	9a08      	ldr	r2, [sp, #32]
  405740:	9401      	str	r4, [sp, #4]
  405742:	463b      	mov	r3, r7
  405744:	9100      	str	r1, [sp, #0]
  405746:	980c      	ldr	r0, [sp, #48]	; 0x30
  405748:	f001 f9ca 	bl	406ae0 <_dtoa_r>
  40574c:	4625      	mov	r5, r4
  40574e:	4606      	mov	r6, r0
  405750:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405752:	2b46      	cmp	r3, #70	; 0x46
  405754:	eb06 0405 	add.w	r4, r6, r5
  405758:	f47f af29 	bne.w	4055ae <_svfprintf_r+0xed2>
  40575c:	7833      	ldrb	r3, [r6, #0]
  40575e:	2b30      	cmp	r3, #48	; 0x30
  405760:	f000 8178 	beq.w	405a54 <_svfprintf_r+0x1378>
  405764:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  405766:	442c      	add	r4, r5
  405768:	e721      	b.n	4055ae <_svfprintf_r+0xed2>
  40576a:	aa25      	add	r2, sp, #148	; 0x94
  40576c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40576e:	980c      	ldr	r0, [sp, #48]	; 0x30
  405770:	f003 fbd6 	bl	408f20 <__ssprint_r>
  405774:	2800      	cmp	r0, #0
  405776:	f47f a883 	bne.w	404880 <_svfprintf_r+0x1a4>
  40577a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40577c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40577e:	46c8      	mov	r8, r9
  405780:	e782      	b.n	405688 <_svfprintf_r+0xfac>
  405782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405784:	2b00      	cmp	r3, #0
  405786:	bf08      	it	eq
  405788:	2301      	moveq	r3, #1
  40578a:	930a      	str	r3, [sp, #40]	; 0x28
  40578c:	e6db      	b.n	405546 <_svfprintf_r+0xe6a>
  40578e:	4630      	mov	r0, r6
  405790:	940a      	str	r4, [sp, #40]	; 0x28
  405792:	f7fe ff35 	bl	404600 <strlen>
  405796:	950f      	str	r5, [sp, #60]	; 0x3c
  405798:	900e      	str	r0, [sp, #56]	; 0x38
  40579a:	f8cd b01c 	str.w	fp, [sp, #28]
  40579e:	4603      	mov	r3, r0
  4057a0:	f7ff b9f9 	b.w	404b96 <_svfprintf_r+0x4ba>
  4057a4:	272d      	movs	r7, #45	; 0x2d
  4057a6:	2300      	movs	r3, #0
  4057a8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4057ac:	930a      	str	r3, [sp, #40]	; 0x28
  4057ae:	f7ff b8ae 	b.w	40490e <_svfprintf_r+0x232>
  4057b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4057b4:	9312      	str	r3, [sp, #72]	; 0x48
  4057b6:	461a      	mov	r2, r3
  4057b8:	3303      	adds	r3, #3
  4057ba:	db04      	blt.n	4057c6 <_svfprintf_r+0x10ea>
  4057bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4057be:	4619      	mov	r1, r3
  4057c0:	4291      	cmp	r1, r2
  4057c2:	f6bf af17 	bge.w	4055f4 <_svfprintf_r+0xf18>
  4057c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4057c8:	3b02      	subs	r3, #2
  4057ca:	9311      	str	r3, [sp, #68]	; 0x44
  4057cc:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  4057d0:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  4057d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4057d6:	3b01      	subs	r3, #1
  4057d8:	2b00      	cmp	r3, #0
  4057da:	931f      	str	r3, [sp, #124]	; 0x7c
  4057dc:	bfbd      	ittte	lt
  4057de:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4057e0:	f1c3 0301 	rsblt	r3, r3, #1
  4057e4:	222d      	movlt	r2, #45	; 0x2d
  4057e6:	222b      	movge	r2, #43	; 0x2b
  4057e8:	2b09      	cmp	r3, #9
  4057ea:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4057ee:	f340 8116 	ble.w	405a1e <_svfprintf_r+0x1342>
  4057f2:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4057f6:	4620      	mov	r0, r4
  4057f8:	4dab      	ldr	r5, [pc, #684]	; (405aa8 <_svfprintf_r+0x13cc>)
  4057fa:	e000      	b.n	4057fe <_svfprintf_r+0x1122>
  4057fc:	4610      	mov	r0, r2
  4057fe:	fb85 1203 	smull	r1, r2, r5, r3
  405802:	17d9      	asrs	r1, r3, #31
  405804:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  405808:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40580c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  405810:	3230      	adds	r2, #48	; 0x30
  405812:	2909      	cmp	r1, #9
  405814:	f800 2c01 	strb.w	r2, [r0, #-1]
  405818:	460b      	mov	r3, r1
  40581a:	f100 32ff 	add.w	r2, r0, #4294967295
  40581e:	dced      	bgt.n	4057fc <_svfprintf_r+0x1120>
  405820:	3330      	adds	r3, #48	; 0x30
  405822:	3802      	subs	r0, #2
  405824:	b2d9      	uxtb	r1, r3
  405826:	4284      	cmp	r4, r0
  405828:	f802 1c01 	strb.w	r1, [r2, #-1]
  40582c:	f240 8165 	bls.w	405afa <_svfprintf_r+0x141e>
  405830:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  405834:	4613      	mov	r3, r2
  405836:	e001      	b.n	40583c <_svfprintf_r+0x1160>
  405838:	f813 1b01 	ldrb.w	r1, [r3], #1
  40583c:	f800 1b01 	strb.w	r1, [r0], #1
  405840:	42a3      	cmp	r3, r4
  405842:	d1f9      	bne.n	405838 <_svfprintf_r+0x115c>
  405844:	3301      	adds	r3, #1
  405846:	1a9b      	subs	r3, r3, r2
  405848:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  40584c:	4413      	add	r3, r2
  40584e:	aa21      	add	r2, sp, #132	; 0x84
  405850:	1a9b      	subs	r3, r3, r2
  405852:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  405854:	931b      	str	r3, [sp, #108]	; 0x6c
  405856:	2a01      	cmp	r2, #1
  405858:	4413      	add	r3, r2
  40585a:	930e      	str	r3, [sp, #56]	; 0x38
  40585c:	f340 8119 	ble.w	405a92 <_svfprintf_r+0x13b6>
  405860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405862:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405864:	4413      	add	r3, r2
  405866:	930e      	str	r3, [sp, #56]	; 0x38
  405868:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40586c:	9308      	str	r3, [sp, #32]
  40586e:	2300      	movs	r3, #0
  405870:	9312      	str	r3, [sp, #72]	; 0x48
  405872:	e6cf      	b.n	405614 <_svfprintf_r+0xf38>
  405874:	aa25      	add	r2, sp, #148	; 0x94
  405876:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405878:	980c      	ldr	r0, [sp, #48]	; 0x30
  40587a:	f003 fb51 	bl	408f20 <__ssprint_r>
  40587e:	2800      	cmp	r0, #0
  405880:	f47e affe 	bne.w	404880 <_svfprintf_r+0x1a4>
  405884:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  405886:	46c8      	mov	r8, r9
  405888:	e4d7      	b.n	40523a <_svfprintf_r+0xb5e>
  40588a:	4623      	mov	r3, r4
  40588c:	e6a2      	b.n	4055d4 <_svfprintf_r+0xef8>
  40588e:	aa25      	add	r2, sp, #148	; 0x94
  405890:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405892:	980c      	ldr	r0, [sp, #48]	; 0x30
  405894:	f003 fb44 	bl	408f20 <__ssprint_r>
  405898:	2800      	cmp	r0, #0
  40589a:	f47e aff1 	bne.w	404880 <_svfprintf_r+0x1a4>
  40589e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4058a0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4058a2:	46c8      	mov	r8, r9
  4058a4:	e5ae      	b.n	405404 <_svfprintf_r+0xd28>
  4058a6:	aa25      	add	r2, sp, #148	; 0x94
  4058a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4058aa:	980c      	ldr	r0, [sp, #48]	; 0x30
  4058ac:	f003 fb38 	bl	408f20 <__ssprint_r>
  4058b0:	2800      	cmp	r0, #0
  4058b2:	f47e afe5 	bne.w	404880 <_svfprintf_r+0x1a4>
  4058b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4058b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4058ba:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4058bc:	1a9a      	subs	r2, r3, r2
  4058be:	46c8      	mov	r8, r9
  4058c0:	e5b8      	b.n	405434 <_svfprintf_r+0xd58>
  4058c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4058c4:	9612      	str	r6, [sp, #72]	; 0x48
  4058c6:	2b06      	cmp	r3, #6
  4058c8:	bf28      	it	cs
  4058ca:	2306      	movcs	r3, #6
  4058cc:	960a      	str	r6, [sp, #40]	; 0x28
  4058ce:	4637      	mov	r7, r6
  4058d0:	9308      	str	r3, [sp, #32]
  4058d2:	950f      	str	r5, [sp, #60]	; 0x3c
  4058d4:	f8cd b01c 	str.w	fp, [sp, #28]
  4058d8:	930e      	str	r3, [sp, #56]	; 0x38
  4058da:	4e74      	ldr	r6, [pc, #464]	; (405aac <_svfprintf_r+0x13d0>)
  4058dc:	f7ff b816 	b.w	40490c <_svfprintf_r+0x230>
  4058e0:	a823      	add	r0, sp, #140	; 0x8c
  4058e2:	a920      	add	r1, sp, #128	; 0x80
  4058e4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4058e6:	9004      	str	r0, [sp, #16]
  4058e8:	9103      	str	r1, [sp, #12]
  4058ea:	a81f      	add	r0, sp, #124	; 0x7c
  4058ec:	2103      	movs	r1, #3
  4058ee:	9002      	str	r0, [sp, #8]
  4058f0:	9a08      	ldr	r2, [sp, #32]
  4058f2:	9501      	str	r5, [sp, #4]
  4058f4:	463b      	mov	r3, r7
  4058f6:	9100      	str	r1, [sp, #0]
  4058f8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4058fa:	f001 f8f1 	bl	406ae0 <_dtoa_r>
  4058fe:	4606      	mov	r6, r0
  405900:	1944      	adds	r4, r0, r5
  405902:	e72b      	b.n	40575c <_svfprintf_r+0x1080>
  405904:	2306      	movs	r3, #6
  405906:	930a      	str	r3, [sp, #40]	; 0x28
  405908:	e61d      	b.n	405546 <_svfprintf_r+0xe6a>
  40590a:	272d      	movs	r7, #45	; 0x2d
  40590c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  405910:	f7ff bacd 	b.w	404eae <_svfprintf_r+0x7d2>
  405914:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405916:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  405918:	4413      	add	r3, r2
  40591a:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40591c:	930e      	str	r3, [sp, #56]	; 0x38
  40591e:	2a00      	cmp	r2, #0
  405920:	f340 80b0 	ble.w	405a84 <_svfprintf_r+0x13a8>
  405924:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405928:	9308      	str	r3, [sp, #32]
  40592a:	2367      	movs	r3, #103	; 0x67
  40592c:	9311      	str	r3, [sp, #68]	; 0x44
  40592e:	e671      	b.n	405614 <_svfprintf_r+0xf38>
  405930:	2b00      	cmp	r3, #0
  405932:	f340 80c3 	ble.w	405abc <_svfprintf_r+0x13e0>
  405936:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405938:	2a00      	cmp	r2, #0
  40593a:	f040 8099 	bne.w	405a70 <_svfprintf_r+0x1394>
  40593e:	f01b 0f01 	tst.w	fp, #1
  405942:	f040 8095 	bne.w	405a70 <_svfprintf_r+0x1394>
  405946:	9308      	str	r3, [sp, #32]
  405948:	930e      	str	r3, [sp, #56]	; 0x38
  40594a:	e663      	b.n	405614 <_svfprintf_r+0xf38>
  40594c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40594e:	9308      	str	r3, [sp, #32]
  405950:	930e      	str	r3, [sp, #56]	; 0x38
  405952:	900a      	str	r0, [sp, #40]	; 0x28
  405954:	950f      	str	r5, [sp, #60]	; 0x3c
  405956:	f8cd b01c 	str.w	fp, [sp, #28]
  40595a:	9012      	str	r0, [sp, #72]	; 0x48
  40595c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  405960:	f7fe bfd4 	b.w	40490c <_svfprintf_r+0x230>
  405964:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405966:	2b47      	cmp	r3, #71	; 0x47
  405968:	f47f ae20 	bne.w	4055ac <_svfprintf_r+0xed0>
  40596c:	f01b 0f01 	tst.w	fp, #1
  405970:	f47f aeee 	bne.w	405750 <_svfprintf_r+0x1074>
  405974:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405976:	1b9b      	subs	r3, r3, r6
  405978:	9313      	str	r3, [sp, #76]	; 0x4c
  40597a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40597c:	2b47      	cmp	r3, #71	; 0x47
  40597e:	f43f af18 	beq.w	4057b2 <_svfprintf_r+0x10d6>
  405982:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  405984:	9312      	str	r3, [sp, #72]	; 0x48
  405986:	e721      	b.n	4057cc <_svfprintf_r+0x10f0>
  405988:	424f      	negs	r7, r1
  40598a:	3110      	adds	r1, #16
  40598c:	4d48      	ldr	r5, [pc, #288]	; (405ab0 <_svfprintf_r+0x13d4>)
  40598e:	da2f      	bge.n	4059f0 <_svfprintf_r+0x1314>
  405990:	2410      	movs	r4, #16
  405992:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  405996:	e004      	b.n	4059a2 <_svfprintf_r+0x12c6>
  405998:	f108 0808 	add.w	r8, r8, #8
  40599c:	3f10      	subs	r7, #16
  40599e:	2f10      	cmp	r7, #16
  4059a0:	dd26      	ble.n	4059f0 <_svfprintf_r+0x1314>
  4059a2:	3301      	adds	r3, #1
  4059a4:	3210      	adds	r2, #16
  4059a6:	2b07      	cmp	r3, #7
  4059a8:	9227      	str	r2, [sp, #156]	; 0x9c
  4059aa:	9326      	str	r3, [sp, #152]	; 0x98
  4059ac:	f8c8 5000 	str.w	r5, [r8]
  4059b0:	f8c8 4004 	str.w	r4, [r8, #4]
  4059b4:	ddf0      	ble.n	405998 <_svfprintf_r+0x12bc>
  4059b6:	aa25      	add	r2, sp, #148	; 0x94
  4059b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4059ba:	4658      	mov	r0, fp
  4059bc:	f003 fab0 	bl	408f20 <__ssprint_r>
  4059c0:	2800      	cmp	r0, #0
  4059c2:	f47e af5d 	bne.w	404880 <_svfprintf_r+0x1a4>
  4059c6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4059c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4059ca:	46c8      	mov	r8, r9
  4059cc:	e7e6      	b.n	40599c <_svfprintf_r+0x12c0>
  4059ce:	aa25      	add	r2, sp, #148	; 0x94
  4059d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4059d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4059d4:	f003 faa4 	bl	408f20 <__ssprint_r>
  4059d8:	2800      	cmp	r0, #0
  4059da:	f47e af51 	bne.w	404880 <_svfprintf_r+0x1a4>
  4059de:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4059e0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4059e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4059e4:	46c8      	mov	r8, r9
  4059e6:	e667      	b.n	4056b8 <_svfprintf_r+0xfdc>
  4059e8:	2000      	movs	r0, #0
  4059ea:	900a      	str	r0, [sp, #40]	; 0x28
  4059ec:	f7fe bed0 	b.w	404790 <_svfprintf_r+0xb4>
  4059f0:	3301      	adds	r3, #1
  4059f2:	443a      	add	r2, r7
  4059f4:	2b07      	cmp	r3, #7
  4059f6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4059fa:	9227      	str	r2, [sp, #156]	; 0x9c
  4059fc:	9326      	str	r3, [sp, #152]	; 0x98
  4059fe:	f108 0808 	add.w	r8, r8, #8
  405a02:	f77f ae5c 	ble.w	4056be <_svfprintf_r+0xfe2>
  405a06:	aa25      	add	r2, sp, #148	; 0x94
  405a08:	990b      	ldr	r1, [sp, #44]	; 0x2c
  405a0a:	980c      	ldr	r0, [sp, #48]	; 0x30
  405a0c:	f003 fa88 	bl	408f20 <__ssprint_r>
  405a10:	2800      	cmp	r0, #0
  405a12:	f47e af35 	bne.w	404880 <_svfprintf_r+0x1a4>
  405a16:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  405a18:	9b26      	ldr	r3, [sp, #152]	; 0x98
  405a1a:	46c8      	mov	r8, r9
  405a1c:	e64f      	b.n	4056be <_svfprintf_r+0xfe2>
  405a1e:	3330      	adds	r3, #48	; 0x30
  405a20:	2230      	movs	r2, #48	; 0x30
  405a22:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  405a26:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  405a2a:	ab22      	add	r3, sp, #136	; 0x88
  405a2c:	e70f      	b.n	40584e <_svfprintf_r+0x1172>
  405a2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405a30:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405a32:	4413      	add	r3, r2
  405a34:	930e      	str	r3, [sp, #56]	; 0x38
  405a36:	e775      	b.n	405924 <_svfprintf_r+0x1248>
  405a38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  405a3a:	e5cb      	b.n	4055d4 <_svfprintf_r+0xef8>
  405a3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  405a3e:	4e1d      	ldr	r6, [pc, #116]	; (405ab4 <_svfprintf_r+0x13d8>)
  405a40:	2b00      	cmp	r3, #0
  405a42:	bfb6      	itet	lt
  405a44:	272d      	movlt	r7, #45	; 0x2d
  405a46:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  405a4a:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  405a4e:	4b1a      	ldr	r3, [pc, #104]	; (405ab8 <_svfprintf_r+0x13dc>)
  405a50:	f7ff ba2f 	b.w	404eb2 <_svfprintf_r+0x7d6>
  405a54:	9a16      	ldr	r2, [sp, #88]	; 0x58
  405a56:	9808      	ldr	r0, [sp, #32]
  405a58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  405a5a:	4639      	mov	r1, r7
  405a5c:	f004 f8fc 	bl	409c58 <__aeabi_dcmpeq>
  405a60:	2800      	cmp	r0, #0
  405a62:	f47f ae7f 	bne.w	405764 <_svfprintf_r+0x1088>
  405a66:	f1c5 0501 	rsb	r5, r5, #1
  405a6a:	951f      	str	r5, [sp, #124]	; 0x7c
  405a6c:	442c      	add	r4, r5
  405a6e:	e59e      	b.n	4055ae <_svfprintf_r+0xed2>
  405a70:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405a72:	9a19      	ldr	r2, [sp, #100]	; 0x64
  405a74:	4413      	add	r3, r2
  405a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  405a78:	441a      	add	r2, r3
  405a7a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  405a7e:	920e      	str	r2, [sp, #56]	; 0x38
  405a80:	9308      	str	r3, [sp, #32]
  405a82:	e5c7      	b.n	405614 <_svfprintf_r+0xf38>
  405a84:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405a86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  405a88:	f1c3 0301 	rsb	r3, r3, #1
  405a8c:	441a      	add	r2, r3
  405a8e:	4613      	mov	r3, r2
  405a90:	e7d0      	b.n	405a34 <_svfprintf_r+0x1358>
  405a92:	f01b 0301 	ands.w	r3, fp, #1
  405a96:	9312      	str	r3, [sp, #72]	; 0x48
  405a98:	f47f aee2 	bne.w	405860 <_svfprintf_r+0x1184>
  405a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  405a9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  405aa2:	9308      	str	r3, [sp, #32]
  405aa4:	e5b6      	b.n	405614 <_svfprintf_r+0xf38>
  405aa6:	bf00      	nop
  405aa8:	66666667 	.word	0x66666667
  405aac:	0040a1e0 	.word	0x0040a1e0
  405ab0:	0040a1fc 	.word	0x0040a1fc
  405ab4:	0040a1b4 	.word	0x0040a1b4
  405ab8:	0040a1b0 	.word	0x0040a1b0
  405abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405abe:	b913      	cbnz	r3, 405ac6 <_svfprintf_r+0x13ea>
  405ac0:	f01b 0f01 	tst.w	fp, #1
  405ac4:	d002      	beq.n	405acc <_svfprintf_r+0x13f0>
  405ac6:	9b19      	ldr	r3, [sp, #100]	; 0x64
  405ac8:	3301      	adds	r3, #1
  405aca:	e7d4      	b.n	405a76 <_svfprintf_r+0x139a>
  405acc:	2301      	movs	r3, #1
  405ace:	e73a      	b.n	405946 <_svfprintf_r+0x126a>
  405ad0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  405ad2:	f89a 3001 	ldrb.w	r3, [sl, #1]
  405ad6:	6828      	ldr	r0, [r5, #0]
  405ad8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  405adc:	900a      	str	r0, [sp, #40]	; 0x28
  405ade:	4628      	mov	r0, r5
  405ae0:	3004      	adds	r0, #4
  405ae2:	46a2      	mov	sl, r4
  405ae4:	900f      	str	r0, [sp, #60]	; 0x3c
  405ae6:	f7fe be51 	b.w	40478c <_svfprintf_r+0xb0>
  405aea:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405aee:	f7ff b867 	b.w	404bc0 <_svfprintf_r+0x4e4>
  405af2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405af6:	f7ff ba15 	b.w	404f24 <_svfprintf_r+0x848>
  405afa:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  405afe:	e6a6      	b.n	40584e <_svfprintf_r+0x1172>
  405b00:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405b04:	f7ff b8eb 	b.w	404cde <_svfprintf_r+0x602>
  405b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  405b0a:	230c      	movs	r3, #12
  405b0c:	6013      	str	r3, [r2, #0]
  405b0e:	f04f 33ff 	mov.w	r3, #4294967295
  405b12:	9309      	str	r3, [sp, #36]	; 0x24
  405b14:	f7fe bebd 	b.w	404892 <_svfprintf_r+0x1b6>
  405b18:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405b1c:	f7ff b99a 	b.w	404e54 <_svfprintf_r+0x778>
  405b20:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405b24:	f7ff b976 	b.w	404e14 <_svfprintf_r+0x738>
  405b28:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405b2c:	f7ff b959 	b.w	404de2 <_svfprintf_r+0x706>
  405b30:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  405b34:	f7ff b912 	b.w	404d5c <_svfprintf_r+0x680>

00405b38 <__sprint_r.part.0>:
  405b38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405b3c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  405b3e:	049c      	lsls	r4, r3, #18
  405b40:	4693      	mov	fp, r2
  405b42:	d52f      	bpl.n	405ba4 <__sprint_r.part.0+0x6c>
  405b44:	6893      	ldr	r3, [r2, #8]
  405b46:	6812      	ldr	r2, [r2, #0]
  405b48:	b353      	cbz	r3, 405ba0 <__sprint_r.part.0+0x68>
  405b4a:	460e      	mov	r6, r1
  405b4c:	4607      	mov	r7, r0
  405b4e:	f102 0908 	add.w	r9, r2, #8
  405b52:	e919 0420 	ldmdb	r9, {r5, sl}
  405b56:	ea5f 089a 	movs.w	r8, sl, lsr #2
  405b5a:	d017      	beq.n	405b8c <__sprint_r.part.0+0x54>
  405b5c:	3d04      	subs	r5, #4
  405b5e:	2400      	movs	r4, #0
  405b60:	e001      	b.n	405b66 <__sprint_r.part.0+0x2e>
  405b62:	45a0      	cmp	r8, r4
  405b64:	d010      	beq.n	405b88 <__sprint_r.part.0+0x50>
  405b66:	4632      	mov	r2, r6
  405b68:	f855 1f04 	ldr.w	r1, [r5, #4]!
  405b6c:	4638      	mov	r0, r7
  405b6e:	f002 f87b 	bl	407c68 <_fputwc_r>
  405b72:	1c43      	adds	r3, r0, #1
  405b74:	f104 0401 	add.w	r4, r4, #1
  405b78:	d1f3      	bne.n	405b62 <__sprint_r.part.0+0x2a>
  405b7a:	2300      	movs	r3, #0
  405b7c:	f8cb 3008 	str.w	r3, [fp, #8]
  405b80:	f8cb 3004 	str.w	r3, [fp, #4]
  405b84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405b88:	f8db 3008 	ldr.w	r3, [fp, #8]
  405b8c:	f02a 0a03 	bic.w	sl, sl, #3
  405b90:	eba3 030a 	sub.w	r3, r3, sl
  405b94:	f8cb 3008 	str.w	r3, [fp, #8]
  405b98:	f109 0908 	add.w	r9, r9, #8
  405b9c:	2b00      	cmp	r3, #0
  405b9e:	d1d8      	bne.n	405b52 <__sprint_r.part.0+0x1a>
  405ba0:	2000      	movs	r0, #0
  405ba2:	e7ea      	b.n	405b7a <__sprint_r.part.0+0x42>
  405ba4:	f002 f9ca 	bl	407f3c <__sfvwrite_r>
  405ba8:	2300      	movs	r3, #0
  405baa:	f8cb 3008 	str.w	r3, [fp, #8]
  405bae:	f8cb 3004 	str.w	r3, [fp, #4]
  405bb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405bb6:	bf00      	nop

00405bb8 <_vfiprintf_r>:
  405bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405bbc:	b0ad      	sub	sp, #180	; 0xb4
  405bbe:	461d      	mov	r5, r3
  405bc0:	468b      	mov	fp, r1
  405bc2:	4690      	mov	r8, r2
  405bc4:	9307      	str	r3, [sp, #28]
  405bc6:	9006      	str	r0, [sp, #24]
  405bc8:	b118      	cbz	r0, 405bd2 <_vfiprintf_r+0x1a>
  405bca:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405bcc:	2b00      	cmp	r3, #0
  405bce:	f000 80f3 	beq.w	405db8 <_vfiprintf_r+0x200>
  405bd2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405bd6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405bda:	07df      	lsls	r7, r3, #31
  405bdc:	b281      	uxth	r1, r0
  405bde:	d402      	bmi.n	405be6 <_vfiprintf_r+0x2e>
  405be0:	058e      	lsls	r6, r1, #22
  405be2:	f140 80fc 	bpl.w	405dde <_vfiprintf_r+0x226>
  405be6:	048c      	lsls	r4, r1, #18
  405be8:	d40a      	bmi.n	405c00 <_vfiprintf_r+0x48>
  405bea:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405bee:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  405bf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  405bf6:	f8ab 100c 	strh.w	r1, [fp, #12]
  405bfa:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  405bfe:	b289      	uxth	r1, r1
  405c00:	0708      	lsls	r0, r1, #28
  405c02:	f140 80b3 	bpl.w	405d6c <_vfiprintf_r+0x1b4>
  405c06:	f8db 3010 	ldr.w	r3, [fp, #16]
  405c0a:	2b00      	cmp	r3, #0
  405c0c:	f000 80ae 	beq.w	405d6c <_vfiprintf_r+0x1b4>
  405c10:	f001 031a 	and.w	r3, r1, #26
  405c14:	2b0a      	cmp	r3, #10
  405c16:	f000 80b5 	beq.w	405d84 <_vfiprintf_r+0x1cc>
  405c1a:	2300      	movs	r3, #0
  405c1c:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  405c20:	930b      	str	r3, [sp, #44]	; 0x2c
  405c22:	9311      	str	r3, [sp, #68]	; 0x44
  405c24:	9310      	str	r3, [sp, #64]	; 0x40
  405c26:	9303      	str	r3, [sp, #12]
  405c28:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  405c2c:	46ca      	mov	sl, r9
  405c2e:	f8cd b010 	str.w	fp, [sp, #16]
  405c32:	f898 3000 	ldrb.w	r3, [r8]
  405c36:	4644      	mov	r4, r8
  405c38:	b1fb      	cbz	r3, 405c7a <_vfiprintf_r+0xc2>
  405c3a:	2b25      	cmp	r3, #37	; 0x25
  405c3c:	d102      	bne.n	405c44 <_vfiprintf_r+0x8c>
  405c3e:	e01c      	b.n	405c7a <_vfiprintf_r+0xc2>
  405c40:	2b25      	cmp	r3, #37	; 0x25
  405c42:	d003      	beq.n	405c4c <_vfiprintf_r+0x94>
  405c44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  405c48:	2b00      	cmp	r3, #0
  405c4a:	d1f9      	bne.n	405c40 <_vfiprintf_r+0x88>
  405c4c:	eba4 0508 	sub.w	r5, r4, r8
  405c50:	b19d      	cbz	r5, 405c7a <_vfiprintf_r+0xc2>
  405c52:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405c54:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405c56:	f8ca 8000 	str.w	r8, [sl]
  405c5a:	3301      	adds	r3, #1
  405c5c:	442a      	add	r2, r5
  405c5e:	2b07      	cmp	r3, #7
  405c60:	f8ca 5004 	str.w	r5, [sl, #4]
  405c64:	9211      	str	r2, [sp, #68]	; 0x44
  405c66:	9310      	str	r3, [sp, #64]	; 0x40
  405c68:	dd7a      	ble.n	405d60 <_vfiprintf_r+0x1a8>
  405c6a:	2a00      	cmp	r2, #0
  405c6c:	f040 84b0 	bne.w	4065d0 <_vfiprintf_r+0xa18>
  405c70:	9b03      	ldr	r3, [sp, #12]
  405c72:	9210      	str	r2, [sp, #64]	; 0x40
  405c74:	442b      	add	r3, r5
  405c76:	46ca      	mov	sl, r9
  405c78:	9303      	str	r3, [sp, #12]
  405c7a:	7823      	ldrb	r3, [r4, #0]
  405c7c:	2b00      	cmp	r3, #0
  405c7e:	f000 83e0 	beq.w	406442 <_vfiprintf_r+0x88a>
  405c82:	2000      	movs	r0, #0
  405c84:	f04f 0300 	mov.w	r3, #0
  405c88:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  405c8c:	f104 0801 	add.w	r8, r4, #1
  405c90:	7862      	ldrb	r2, [r4, #1]
  405c92:	4605      	mov	r5, r0
  405c94:	4606      	mov	r6, r0
  405c96:	4603      	mov	r3, r0
  405c98:	f04f 34ff 	mov.w	r4, #4294967295
  405c9c:	f108 0801 	add.w	r8, r8, #1
  405ca0:	f1a2 0120 	sub.w	r1, r2, #32
  405ca4:	2958      	cmp	r1, #88	; 0x58
  405ca6:	f200 82de 	bhi.w	406266 <_vfiprintf_r+0x6ae>
  405caa:	e8df f011 	tbh	[pc, r1, lsl #1]
  405cae:	0221      	.short	0x0221
  405cb0:	02dc02dc 	.word	0x02dc02dc
  405cb4:	02dc0229 	.word	0x02dc0229
  405cb8:	02dc02dc 	.word	0x02dc02dc
  405cbc:	02dc02dc 	.word	0x02dc02dc
  405cc0:	028902dc 	.word	0x028902dc
  405cc4:	02dc0295 	.word	0x02dc0295
  405cc8:	02bd00a2 	.word	0x02bd00a2
  405ccc:	019f02dc 	.word	0x019f02dc
  405cd0:	01a401a4 	.word	0x01a401a4
  405cd4:	01a401a4 	.word	0x01a401a4
  405cd8:	01a401a4 	.word	0x01a401a4
  405cdc:	01a401a4 	.word	0x01a401a4
  405ce0:	02dc01a4 	.word	0x02dc01a4
  405ce4:	02dc02dc 	.word	0x02dc02dc
  405ce8:	02dc02dc 	.word	0x02dc02dc
  405cec:	02dc02dc 	.word	0x02dc02dc
  405cf0:	02dc02dc 	.word	0x02dc02dc
  405cf4:	01b202dc 	.word	0x01b202dc
  405cf8:	02dc02dc 	.word	0x02dc02dc
  405cfc:	02dc02dc 	.word	0x02dc02dc
  405d00:	02dc02dc 	.word	0x02dc02dc
  405d04:	02dc02dc 	.word	0x02dc02dc
  405d08:	02dc02dc 	.word	0x02dc02dc
  405d0c:	02dc0197 	.word	0x02dc0197
  405d10:	02dc02dc 	.word	0x02dc02dc
  405d14:	02dc02dc 	.word	0x02dc02dc
  405d18:	02dc019b 	.word	0x02dc019b
  405d1c:	025302dc 	.word	0x025302dc
  405d20:	02dc02dc 	.word	0x02dc02dc
  405d24:	02dc02dc 	.word	0x02dc02dc
  405d28:	02dc02dc 	.word	0x02dc02dc
  405d2c:	02dc02dc 	.word	0x02dc02dc
  405d30:	02dc02dc 	.word	0x02dc02dc
  405d34:	021b025a 	.word	0x021b025a
  405d38:	02dc02dc 	.word	0x02dc02dc
  405d3c:	026e02dc 	.word	0x026e02dc
  405d40:	02dc021b 	.word	0x02dc021b
  405d44:	027302dc 	.word	0x027302dc
  405d48:	01f502dc 	.word	0x01f502dc
  405d4c:	02090182 	.word	0x02090182
  405d50:	02dc02d7 	.word	0x02dc02d7
  405d54:	02dc029a 	.word	0x02dc029a
  405d58:	02dc00a7 	.word	0x02dc00a7
  405d5c:	022e02dc 	.word	0x022e02dc
  405d60:	f10a 0a08 	add.w	sl, sl, #8
  405d64:	9b03      	ldr	r3, [sp, #12]
  405d66:	442b      	add	r3, r5
  405d68:	9303      	str	r3, [sp, #12]
  405d6a:	e786      	b.n	405c7a <_vfiprintf_r+0xc2>
  405d6c:	4659      	mov	r1, fp
  405d6e:	9806      	ldr	r0, [sp, #24]
  405d70:	f000 fdac 	bl	4068cc <__swsetup_r>
  405d74:	bb18      	cbnz	r0, 405dbe <_vfiprintf_r+0x206>
  405d76:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  405d7a:	f001 031a 	and.w	r3, r1, #26
  405d7e:	2b0a      	cmp	r3, #10
  405d80:	f47f af4b 	bne.w	405c1a <_vfiprintf_r+0x62>
  405d84:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  405d88:	2b00      	cmp	r3, #0
  405d8a:	f6ff af46 	blt.w	405c1a <_vfiprintf_r+0x62>
  405d8e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405d92:	07db      	lsls	r3, r3, #31
  405d94:	d405      	bmi.n	405da2 <_vfiprintf_r+0x1ea>
  405d96:	058f      	lsls	r7, r1, #22
  405d98:	d403      	bmi.n	405da2 <_vfiprintf_r+0x1ea>
  405d9a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405d9e:	f002 fa91 	bl	4082c4 <__retarget_lock_release_recursive>
  405da2:	462b      	mov	r3, r5
  405da4:	4642      	mov	r2, r8
  405da6:	4659      	mov	r1, fp
  405da8:	9806      	ldr	r0, [sp, #24]
  405daa:	f000 fd4d 	bl	406848 <__sbprintf>
  405dae:	9003      	str	r0, [sp, #12]
  405db0:	9803      	ldr	r0, [sp, #12]
  405db2:	b02d      	add	sp, #180	; 0xb4
  405db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405db8:	f001 feb4 	bl	407b24 <__sinit>
  405dbc:	e709      	b.n	405bd2 <_vfiprintf_r+0x1a>
  405dbe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  405dc2:	07d9      	lsls	r1, r3, #31
  405dc4:	d404      	bmi.n	405dd0 <_vfiprintf_r+0x218>
  405dc6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405dca:	059a      	lsls	r2, r3, #22
  405dcc:	f140 84aa 	bpl.w	406724 <_vfiprintf_r+0xb6c>
  405dd0:	f04f 33ff 	mov.w	r3, #4294967295
  405dd4:	9303      	str	r3, [sp, #12]
  405dd6:	9803      	ldr	r0, [sp, #12]
  405dd8:	b02d      	add	sp, #180	; 0xb4
  405dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405dde:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  405de2:	f002 fa6d 	bl	4082c0 <__retarget_lock_acquire_recursive>
  405de6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  405dea:	b281      	uxth	r1, r0
  405dec:	e6fb      	b.n	405be6 <_vfiprintf_r+0x2e>
  405dee:	4276      	negs	r6, r6
  405df0:	9207      	str	r2, [sp, #28]
  405df2:	f043 0304 	orr.w	r3, r3, #4
  405df6:	f898 2000 	ldrb.w	r2, [r8]
  405dfa:	e74f      	b.n	405c9c <_vfiprintf_r+0xe4>
  405dfc:	9608      	str	r6, [sp, #32]
  405dfe:	069e      	lsls	r6, r3, #26
  405e00:	f100 8450 	bmi.w	4066a4 <_vfiprintf_r+0xaec>
  405e04:	9907      	ldr	r1, [sp, #28]
  405e06:	06dd      	lsls	r5, r3, #27
  405e08:	460a      	mov	r2, r1
  405e0a:	f100 83ef 	bmi.w	4065ec <_vfiprintf_r+0xa34>
  405e0e:	0658      	lsls	r0, r3, #25
  405e10:	f140 83ec 	bpl.w	4065ec <_vfiprintf_r+0xa34>
  405e14:	880e      	ldrh	r6, [r1, #0]
  405e16:	3104      	adds	r1, #4
  405e18:	2700      	movs	r7, #0
  405e1a:	2201      	movs	r2, #1
  405e1c:	9107      	str	r1, [sp, #28]
  405e1e:	f04f 0100 	mov.w	r1, #0
  405e22:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  405e26:	2500      	movs	r5, #0
  405e28:	1c61      	adds	r1, r4, #1
  405e2a:	f000 8116 	beq.w	40605a <_vfiprintf_r+0x4a2>
  405e2e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  405e32:	9102      	str	r1, [sp, #8]
  405e34:	ea56 0107 	orrs.w	r1, r6, r7
  405e38:	f040 8114 	bne.w	406064 <_vfiprintf_r+0x4ac>
  405e3c:	2c00      	cmp	r4, #0
  405e3e:	f040 835c 	bne.w	4064fa <_vfiprintf_r+0x942>
  405e42:	2a00      	cmp	r2, #0
  405e44:	f040 83b7 	bne.w	4065b6 <_vfiprintf_r+0x9fe>
  405e48:	f013 0301 	ands.w	r3, r3, #1
  405e4c:	9305      	str	r3, [sp, #20]
  405e4e:	f000 8457 	beq.w	406700 <_vfiprintf_r+0xb48>
  405e52:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  405e56:	2330      	movs	r3, #48	; 0x30
  405e58:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  405e5c:	9b05      	ldr	r3, [sp, #20]
  405e5e:	42a3      	cmp	r3, r4
  405e60:	bfb8      	it	lt
  405e62:	4623      	movlt	r3, r4
  405e64:	9301      	str	r3, [sp, #4]
  405e66:	b10d      	cbz	r5, 405e6c <_vfiprintf_r+0x2b4>
  405e68:	3301      	adds	r3, #1
  405e6a:	9301      	str	r3, [sp, #4]
  405e6c:	9b02      	ldr	r3, [sp, #8]
  405e6e:	f013 0302 	ands.w	r3, r3, #2
  405e72:	9309      	str	r3, [sp, #36]	; 0x24
  405e74:	d002      	beq.n	405e7c <_vfiprintf_r+0x2c4>
  405e76:	9b01      	ldr	r3, [sp, #4]
  405e78:	3302      	adds	r3, #2
  405e7a:	9301      	str	r3, [sp, #4]
  405e7c:	9b02      	ldr	r3, [sp, #8]
  405e7e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  405e82:	930a      	str	r3, [sp, #40]	; 0x28
  405e84:	f040 8217 	bne.w	4062b6 <_vfiprintf_r+0x6fe>
  405e88:	9b08      	ldr	r3, [sp, #32]
  405e8a:	9a01      	ldr	r2, [sp, #4]
  405e8c:	1a9d      	subs	r5, r3, r2
  405e8e:	2d00      	cmp	r5, #0
  405e90:	f340 8211 	ble.w	4062b6 <_vfiprintf_r+0x6fe>
  405e94:	2d10      	cmp	r5, #16
  405e96:	f340 8490 	ble.w	4067ba <_vfiprintf_r+0xc02>
  405e9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
  405e9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405e9e:	4ec4      	ldr	r6, [pc, #784]	; (4061b0 <_vfiprintf_r+0x5f8>)
  405ea0:	46d6      	mov	lr, sl
  405ea2:	2710      	movs	r7, #16
  405ea4:	46a2      	mov	sl, r4
  405ea6:	4619      	mov	r1, r3
  405ea8:	9c06      	ldr	r4, [sp, #24]
  405eaa:	e007      	b.n	405ebc <_vfiprintf_r+0x304>
  405eac:	f101 0c02 	add.w	ip, r1, #2
  405eb0:	f10e 0e08 	add.w	lr, lr, #8
  405eb4:	4601      	mov	r1, r0
  405eb6:	3d10      	subs	r5, #16
  405eb8:	2d10      	cmp	r5, #16
  405eba:	dd11      	ble.n	405ee0 <_vfiprintf_r+0x328>
  405ebc:	1c48      	adds	r0, r1, #1
  405ebe:	3210      	adds	r2, #16
  405ec0:	2807      	cmp	r0, #7
  405ec2:	9211      	str	r2, [sp, #68]	; 0x44
  405ec4:	e88e 00c0 	stmia.w	lr, {r6, r7}
  405ec8:	9010      	str	r0, [sp, #64]	; 0x40
  405eca:	ddef      	ble.n	405eac <_vfiprintf_r+0x2f4>
  405ecc:	2a00      	cmp	r2, #0
  405ece:	f040 81e4 	bne.w	40629a <_vfiprintf_r+0x6e2>
  405ed2:	3d10      	subs	r5, #16
  405ed4:	2d10      	cmp	r5, #16
  405ed6:	4611      	mov	r1, r2
  405ed8:	f04f 0c01 	mov.w	ip, #1
  405edc:	46ce      	mov	lr, r9
  405ede:	dced      	bgt.n	405ebc <_vfiprintf_r+0x304>
  405ee0:	4654      	mov	r4, sl
  405ee2:	4661      	mov	r1, ip
  405ee4:	46f2      	mov	sl, lr
  405ee6:	442a      	add	r2, r5
  405ee8:	2907      	cmp	r1, #7
  405eea:	9211      	str	r2, [sp, #68]	; 0x44
  405eec:	f8ca 6000 	str.w	r6, [sl]
  405ef0:	f8ca 5004 	str.w	r5, [sl, #4]
  405ef4:	9110      	str	r1, [sp, #64]	; 0x40
  405ef6:	f300 82ec 	bgt.w	4064d2 <_vfiprintf_r+0x91a>
  405efa:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405efe:	f10a 0a08 	add.w	sl, sl, #8
  405f02:	1c48      	adds	r0, r1, #1
  405f04:	2d00      	cmp	r5, #0
  405f06:	f040 81de 	bne.w	4062c6 <_vfiprintf_r+0x70e>
  405f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405f0c:	2b00      	cmp	r3, #0
  405f0e:	f000 81f8 	beq.w	406302 <_vfiprintf_r+0x74a>
  405f12:	3202      	adds	r2, #2
  405f14:	a90e      	add	r1, sp, #56	; 0x38
  405f16:	2302      	movs	r3, #2
  405f18:	2807      	cmp	r0, #7
  405f1a:	9211      	str	r2, [sp, #68]	; 0x44
  405f1c:	9010      	str	r0, [sp, #64]	; 0x40
  405f1e:	e88a 000a 	stmia.w	sl, {r1, r3}
  405f22:	f340 81ea 	ble.w	4062fa <_vfiprintf_r+0x742>
  405f26:	2a00      	cmp	r2, #0
  405f28:	f040 838c 	bne.w	406644 <_vfiprintf_r+0xa8c>
  405f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405f2e:	2b80      	cmp	r3, #128	; 0x80
  405f30:	f04f 0001 	mov.w	r0, #1
  405f34:	4611      	mov	r1, r2
  405f36:	46ca      	mov	sl, r9
  405f38:	f040 81e7 	bne.w	40630a <_vfiprintf_r+0x752>
  405f3c:	9b08      	ldr	r3, [sp, #32]
  405f3e:	9d01      	ldr	r5, [sp, #4]
  405f40:	1b5e      	subs	r6, r3, r5
  405f42:	2e00      	cmp	r6, #0
  405f44:	f340 81e1 	ble.w	40630a <_vfiprintf_r+0x752>
  405f48:	2e10      	cmp	r6, #16
  405f4a:	4d9a      	ldr	r5, [pc, #616]	; (4061b4 <_vfiprintf_r+0x5fc>)
  405f4c:	f340 8450 	ble.w	4067f0 <_vfiprintf_r+0xc38>
  405f50:	46d4      	mov	ip, sl
  405f52:	2710      	movs	r7, #16
  405f54:	46a2      	mov	sl, r4
  405f56:	9c06      	ldr	r4, [sp, #24]
  405f58:	e007      	b.n	405f6a <_vfiprintf_r+0x3b2>
  405f5a:	f101 0e02 	add.w	lr, r1, #2
  405f5e:	f10c 0c08 	add.w	ip, ip, #8
  405f62:	4601      	mov	r1, r0
  405f64:	3e10      	subs	r6, #16
  405f66:	2e10      	cmp	r6, #16
  405f68:	dd11      	ble.n	405f8e <_vfiprintf_r+0x3d6>
  405f6a:	1c48      	adds	r0, r1, #1
  405f6c:	3210      	adds	r2, #16
  405f6e:	2807      	cmp	r0, #7
  405f70:	9211      	str	r2, [sp, #68]	; 0x44
  405f72:	e88c 00a0 	stmia.w	ip, {r5, r7}
  405f76:	9010      	str	r0, [sp, #64]	; 0x40
  405f78:	ddef      	ble.n	405f5a <_vfiprintf_r+0x3a2>
  405f7a:	2a00      	cmp	r2, #0
  405f7c:	f040 829d 	bne.w	4064ba <_vfiprintf_r+0x902>
  405f80:	3e10      	subs	r6, #16
  405f82:	2e10      	cmp	r6, #16
  405f84:	f04f 0e01 	mov.w	lr, #1
  405f88:	4611      	mov	r1, r2
  405f8a:	46cc      	mov	ip, r9
  405f8c:	dced      	bgt.n	405f6a <_vfiprintf_r+0x3b2>
  405f8e:	4654      	mov	r4, sl
  405f90:	46e2      	mov	sl, ip
  405f92:	4432      	add	r2, r6
  405f94:	f1be 0f07 	cmp.w	lr, #7
  405f98:	9211      	str	r2, [sp, #68]	; 0x44
  405f9a:	e88a 0060 	stmia.w	sl, {r5, r6}
  405f9e:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  405fa2:	f300 8369 	bgt.w	406678 <_vfiprintf_r+0xac0>
  405fa6:	f10a 0a08 	add.w	sl, sl, #8
  405faa:	f10e 0001 	add.w	r0, lr, #1
  405fae:	4671      	mov	r1, lr
  405fb0:	e1ab      	b.n	40630a <_vfiprintf_r+0x752>
  405fb2:	9608      	str	r6, [sp, #32]
  405fb4:	f013 0220 	ands.w	r2, r3, #32
  405fb8:	f040 838c 	bne.w	4066d4 <_vfiprintf_r+0xb1c>
  405fbc:	f013 0110 	ands.w	r1, r3, #16
  405fc0:	f040 831a 	bne.w	4065f8 <_vfiprintf_r+0xa40>
  405fc4:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  405fc8:	f000 8316 	beq.w	4065f8 <_vfiprintf_r+0xa40>
  405fcc:	9807      	ldr	r0, [sp, #28]
  405fce:	460a      	mov	r2, r1
  405fd0:	4601      	mov	r1, r0
  405fd2:	3104      	adds	r1, #4
  405fd4:	8806      	ldrh	r6, [r0, #0]
  405fd6:	9107      	str	r1, [sp, #28]
  405fd8:	2700      	movs	r7, #0
  405fda:	e720      	b.n	405e1e <_vfiprintf_r+0x266>
  405fdc:	9608      	str	r6, [sp, #32]
  405fde:	f043 0310 	orr.w	r3, r3, #16
  405fe2:	e7e7      	b.n	405fb4 <_vfiprintf_r+0x3fc>
  405fe4:	9608      	str	r6, [sp, #32]
  405fe6:	f043 0310 	orr.w	r3, r3, #16
  405fea:	e708      	b.n	405dfe <_vfiprintf_r+0x246>
  405fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405ff0:	f898 2000 	ldrb.w	r2, [r8]
  405ff4:	e652      	b.n	405c9c <_vfiprintf_r+0xe4>
  405ff6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405ffa:	2600      	movs	r6, #0
  405ffc:	f818 2b01 	ldrb.w	r2, [r8], #1
  406000:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  406004:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  406008:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40600c:	2909      	cmp	r1, #9
  40600e:	d9f5      	bls.n	405ffc <_vfiprintf_r+0x444>
  406010:	e646      	b.n	405ca0 <_vfiprintf_r+0xe8>
  406012:	9608      	str	r6, [sp, #32]
  406014:	2800      	cmp	r0, #0
  406016:	f040 8408 	bne.w	40682a <_vfiprintf_r+0xc72>
  40601a:	f043 0310 	orr.w	r3, r3, #16
  40601e:	069e      	lsls	r6, r3, #26
  406020:	f100 834c 	bmi.w	4066bc <_vfiprintf_r+0xb04>
  406024:	06dd      	lsls	r5, r3, #27
  406026:	f100 82f3 	bmi.w	406610 <_vfiprintf_r+0xa58>
  40602a:	0658      	lsls	r0, r3, #25
  40602c:	f140 82f0 	bpl.w	406610 <_vfiprintf_r+0xa58>
  406030:	9d07      	ldr	r5, [sp, #28]
  406032:	f9b5 6000 	ldrsh.w	r6, [r5]
  406036:	462a      	mov	r2, r5
  406038:	17f7      	asrs	r7, r6, #31
  40603a:	3204      	adds	r2, #4
  40603c:	4630      	mov	r0, r6
  40603e:	4639      	mov	r1, r7
  406040:	9207      	str	r2, [sp, #28]
  406042:	2800      	cmp	r0, #0
  406044:	f171 0200 	sbcs.w	r2, r1, #0
  406048:	f2c0 835d 	blt.w	406706 <_vfiprintf_r+0xb4e>
  40604c:	1c61      	adds	r1, r4, #1
  40604e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406052:	f04f 0201 	mov.w	r2, #1
  406056:	f47f aeea 	bne.w	405e2e <_vfiprintf_r+0x276>
  40605a:	ea56 0107 	orrs.w	r1, r6, r7
  40605e:	f000 824d 	beq.w	4064fc <_vfiprintf_r+0x944>
  406062:	9302      	str	r3, [sp, #8]
  406064:	2a01      	cmp	r2, #1
  406066:	f000 828c 	beq.w	406582 <_vfiprintf_r+0x9ca>
  40606a:	2a02      	cmp	r2, #2
  40606c:	f040 825c 	bne.w	406528 <_vfiprintf_r+0x970>
  406070:	980b      	ldr	r0, [sp, #44]	; 0x2c
  406072:	46cb      	mov	fp, r9
  406074:	0933      	lsrs	r3, r6, #4
  406076:	f006 010f 	and.w	r1, r6, #15
  40607a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  40607e:	093a      	lsrs	r2, r7, #4
  406080:	461e      	mov	r6, r3
  406082:	4617      	mov	r7, r2
  406084:	5c43      	ldrb	r3, [r0, r1]
  406086:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40608a:	ea56 0307 	orrs.w	r3, r6, r7
  40608e:	d1f1      	bne.n	406074 <_vfiprintf_r+0x4bc>
  406090:	eba9 030b 	sub.w	r3, r9, fp
  406094:	9305      	str	r3, [sp, #20]
  406096:	e6e1      	b.n	405e5c <_vfiprintf_r+0x2a4>
  406098:	2800      	cmp	r0, #0
  40609a:	f040 83c0 	bne.w	40681e <_vfiprintf_r+0xc66>
  40609e:	0699      	lsls	r1, r3, #26
  4060a0:	f100 8367 	bmi.w	406772 <_vfiprintf_r+0xbba>
  4060a4:	06da      	lsls	r2, r3, #27
  4060a6:	f100 80f1 	bmi.w	40628c <_vfiprintf_r+0x6d4>
  4060aa:	065b      	lsls	r3, r3, #25
  4060ac:	f140 80ee 	bpl.w	40628c <_vfiprintf_r+0x6d4>
  4060b0:	9a07      	ldr	r2, [sp, #28]
  4060b2:	6813      	ldr	r3, [r2, #0]
  4060b4:	3204      	adds	r2, #4
  4060b6:	9207      	str	r2, [sp, #28]
  4060b8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4060bc:	801a      	strh	r2, [r3, #0]
  4060be:	e5b8      	b.n	405c32 <_vfiprintf_r+0x7a>
  4060c0:	9807      	ldr	r0, [sp, #28]
  4060c2:	4a3d      	ldr	r2, [pc, #244]	; (4061b8 <_vfiprintf_r+0x600>)
  4060c4:	9608      	str	r6, [sp, #32]
  4060c6:	920b      	str	r2, [sp, #44]	; 0x2c
  4060c8:	6806      	ldr	r6, [r0, #0]
  4060ca:	2278      	movs	r2, #120	; 0x78
  4060cc:	2130      	movs	r1, #48	; 0x30
  4060ce:	3004      	adds	r0, #4
  4060d0:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4060d4:	f043 0302 	orr.w	r3, r3, #2
  4060d8:	9007      	str	r0, [sp, #28]
  4060da:	2700      	movs	r7, #0
  4060dc:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4060e0:	2202      	movs	r2, #2
  4060e2:	e69c      	b.n	405e1e <_vfiprintf_r+0x266>
  4060e4:	9608      	str	r6, [sp, #32]
  4060e6:	2800      	cmp	r0, #0
  4060e8:	d099      	beq.n	40601e <_vfiprintf_r+0x466>
  4060ea:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4060ee:	e796      	b.n	40601e <_vfiprintf_r+0x466>
  4060f0:	f898 2000 	ldrb.w	r2, [r8]
  4060f4:	2d00      	cmp	r5, #0
  4060f6:	f47f add1 	bne.w	405c9c <_vfiprintf_r+0xe4>
  4060fa:	2001      	movs	r0, #1
  4060fc:	2520      	movs	r5, #32
  4060fe:	e5cd      	b.n	405c9c <_vfiprintf_r+0xe4>
  406100:	f043 0301 	orr.w	r3, r3, #1
  406104:	f898 2000 	ldrb.w	r2, [r8]
  406108:	e5c8      	b.n	405c9c <_vfiprintf_r+0xe4>
  40610a:	9608      	str	r6, [sp, #32]
  40610c:	2800      	cmp	r0, #0
  40610e:	f040 8393 	bne.w	406838 <_vfiprintf_r+0xc80>
  406112:	4929      	ldr	r1, [pc, #164]	; (4061b8 <_vfiprintf_r+0x600>)
  406114:	910b      	str	r1, [sp, #44]	; 0x2c
  406116:	069f      	lsls	r7, r3, #26
  406118:	f100 82e8 	bmi.w	4066ec <_vfiprintf_r+0xb34>
  40611c:	9807      	ldr	r0, [sp, #28]
  40611e:	06de      	lsls	r6, r3, #27
  406120:	4601      	mov	r1, r0
  406122:	f100 8270 	bmi.w	406606 <_vfiprintf_r+0xa4e>
  406126:	065d      	lsls	r5, r3, #25
  406128:	f140 826d 	bpl.w	406606 <_vfiprintf_r+0xa4e>
  40612c:	3104      	adds	r1, #4
  40612e:	8806      	ldrh	r6, [r0, #0]
  406130:	9107      	str	r1, [sp, #28]
  406132:	2700      	movs	r7, #0
  406134:	07d8      	lsls	r0, r3, #31
  406136:	f140 8222 	bpl.w	40657e <_vfiprintf_r+0x9c6>
  40613a:	ea56 0107 	orrs.w	r1, r6, r7
  40613e:	f000 821e 	beq.w	40657e <_vfiprintf_r+0x9c6>
  406142:	2130      	movs	r1, #48	; 0x30
  406144:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  406148:	f043 0302 	orr.w	r3, r3, #2
  40614c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  406150:	2202      	movs	r2, #2
  406152:	e664      	b.n	405e1e <_vfiprintf_r+0x266>
  406154:	9608      	str	r6, [sp, #32]
  406156:	2800      	cmp	r0, #0
  406158:	f040 836b 	bne.w	406832 <_vfiprintf_r+0xc7a>
  40615c:	4917      	ldr	r1, [pc, #92]	; (4061bc <_vfiprintf_r+0x604>)
  40615e:	910b      	str	r1, [sp, #44]	; 0x2c
  406160:	e7d9      	b.n	406116 <_vfiprintf_r+0x55e>
  406162:	9907      	ldr	r1, [sp, #28]
  406164:	9608      	str	r6, [sp, #32]
  406166:	680a      	ldr	r2, [r1, #0]
  406168:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40616c:	f04f 0000 	mov.w	r0, #0
  406170:	460a      	mov	r2, r1
  406172:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  406176:	3204      	adds	r2, #4
  406178:	2001      	movs	r0, #1
  40617a:	9001      	str	r0, [sp, #4]
  40617c:	9207      	str	r2, [sp, #28]
  40617e:	9005      	str	r0, [sp, #20]
  406180:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  406184:	9302      	str	r3, [sp, #8]
  406186:	2400      	movs	r4, #0
  406188:	e670      	b.n	405e6c <_vfiprintf_r+0x2b4>
  40618a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40618e:	f898 2000 	ldrb.w	r2, [r8]
  406192:	e583      	b.n	405c9c <_vfiprintf_r+0xe4>
  406194:	f898 2000 	ldrb.w	r2, [r8]
  406198:	2a6c      	cmp	r2, #108	; 0x6c
  40619a:	bf03      	ittte	eq
  40619c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4061a0:	f043 0320 	orreq.w	r3, r3, #32
  4061a4:	f108 0801 	addeq.w	r8, r8, #1
  4061a8:	f043 0310 	orrne.w	r3, r3, #16
  4061ac:	e576      	b.n	405c9c <_vfiprintf_r+0xe4>
  4061ae:	bf00      	nop
  4061b0:	0040a20c 	.word	0x0040a20c
  4061b4:	0040a21c 	.word	0x0040a21c
  4061b8:	0040a1cc 	.word	0x0040a1cc
  4061bc:	0040a1b8 	.word	0x0040a1b8
  4061c0:	9907      	ldr	r1, [sp, #28]
  4061c2:	680e      	ldr	r6, [r1, #0]
  4061c4:	460a      	mov	r2, r1
  4061c6:	2e00      	cmp	r6, #0
  4061c8:	f102 0204 	add.w	r2, r2, #4
  4061cc:	f6ff ae0f 	blt.w	405dee <_vfiprintf_r+0x236>
  4061d0:	9207      	str	r2, [sp, #28]
  4061d2:	f898 2000 	ldrb.w	r2, [r8]
  4061d6:	e561      	b.n	405c9c <_vfiprintf_r+0xe4>
  4061d8:	f898 2000 	ldrb.w	r2, [r8]
  4061dc:	2001      	movs	r0, #1
  4061de:	252b      	movs	r5, #43	; 0x2b
  4061e0:	e55c      	b.n	405c9c <_vfiprintf_r+0xe4>
  4061e2:	9907      	ldr	r1, [sp, #28]
  4061e4:	9608      	str	r6, [sp, #32]
  4061e6:	f8d1 b000 	ldr.w	fp, [r1]
  4061ea:	f04f 0200 	mov.w	r2, #0
  4061ee:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4061f2:	1d0e      	adds	r6, r1, #4
  4061f4:	f1bb 0f00 	cmp.w	fp, #0
  4061f8:	f000 82e5 	beq.w	4067c6 <_vfiprintf_r+0xc0e>
  4061fc:	1c67      	adds	r7, r4, #1
  4061fe:	f000 82c4 	beq.w	40678a <_vfiprintf_r+0xbd2>
  406202:	4622      	mov	r2, r4
  406204:	2100      	movs	r1, #0
  406206:	4658      	mov	r0, fp
  406208:	9301      	str	r3, [sp, #4]
  40620a:	f002 f8f1 	bl	4083f0 <memchr>
  40620e:	9b01      	ldr	r3, [sp, #4]
  406210:	2800      	cmp	r0, #0
  406212:	f000 82e5 	beq.w	4067e0 <_vfiprintf_r+0xc28>
  406216:	eba0 020b 	sub.w	r2, r0, fp
  40621a:	9205      	str	r2, [sp, #20]
  40621c:	9607      	str	r6, [sp, #28]
  40621e:	9302      	str	r3, [sp, #8]
  406220:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  406224:	2400      	movs	r4, #0
  406226:	e619      	b.n	405e5c <_vfiprintf_r+0x2a4>
  406228:	f898 2000 	ldrb.w	r2, [r8]
  40622c:	2a2a      	cmp	r2, #42	; 0x2a
  40622e:	f108 0701 	add.w	r7, r8, #1
  406232:	f000 82e9 	beq.w	406808 <_vfiprintf_r+0xc50>
  406236:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40623a:	2909      	cmp	r1, #9
  40623c:	46b8      	mov	r8, r7
  40623e:	f04f 0400 	mov.w	r4, #0
  406242:	f63f ad2d 	bhi.w	405ca0 <_vfiprintf_r+0xe8>
  406246:	f818 2b01 	ldrb.w	r2, [r8], #1
  40624a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40624e:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  406252:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  406256:	2909      	cmp	r1, #9
  406258:	d9f5      	bls.n	406246 <_vfiprintf_r+0x68e>
  40625a:	e521      	b.n	405ca0 <_vfiprintf_r+0xe8>
  40625c:	f043 0320 	orr.w	r3, r3, #32
  406260:	f898 2000 	ldrb.w	r2, [r8]
  406264:	e51a      	b.n	405c9c <_vfiprintf_r+0xe4>
  406266:	9608      	str	r6, [sp, #32]
  406268:	2800      	cmp	r0, #0
  40626a:	f040 82db 	bne.w	406824 <_vfiprintf_r+0xc6c>
  40626e:	2a00      	cmp	r2, #0
  406270:	f000 80e7 	beq.w	406442 <_vfiprintf_r+0x88a>
  406274:	2101      	movs	r1, #1
  406276:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40627a:	f04f 0200 	mov.w	r2, #0
  40627e:	9101      	str	r1, [sp, #4]
  406280:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  406284:	9105      	str	r1, [sp, #20]
  406286:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40628a:	e77b      	b.n	406184 <_vfiprintf_r+0x5cc>
  40628c:	9a07      	ldr	r2, [sp, #28]
  40628e:	6813      	ldr	r3, [r2, #0]
  406290:	3204      	adds	r2, #4
  406292:	9207      	str	r2, [sp, #28]
  406294:	9a03      	ldr	r2, [sp, #12]
  406296:	601a      	str	r2, [r3, #0]
  406298:	e4cb      	b.n	405c32 <_vfiprintf_r+0x7a>
  40629a:	aa0f      	add	r2, sp, #60	; 0x3c
  40629c:	9904      	ldr	r1, [sp, #16]
  40629e:	4620      	mov	r0, r4
  4062a0:	f7ff fc4a 	bl	405b38 <__sprint_r.part.0>
  4062a4:	2800      	cmp	r0, #0
  4062a6:	f040 8139 	bne.w	40651c <_vfiprintf_r+0x964>
  4062aa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4062ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4062ae:	f101 0c01 	add.w	ip, r1, #1
  4062b2:	46ce      	mov	lr, r9
  4062b4:	e5ff      	b.n	405eb6 <_vfiprintf_r+0x2fe>
  4062b6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4062b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4062ba:	1c48      	adds	r0, r1, #1
  4062bc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4062c0:	2d00      	cmp	r5, #0
  4062c2:	f43f ae22 	beq.w	405f0a <_vfiprintf_r+0x352>
  4062c6:	3201      	adds	r2, #1
  4062c8:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4062cc:	2101      	movs	r1, #1
  4062ce:	2807      	cmp	r0, #7
  4062d0:	9211      	str	r2, [sp, #68]	; 0x44
  4062d2:	9010      	str	r0, [sp, #64]	; 0x40
  4062d4:	f8ca 5000 	str.w	r5, [sl]
  4062d8:	f8ca 1004 	str.w	r1, [sl, #4]
  4062dc:	f340 8108 	ble.w	4064f0 <_vfiprintf_r+0x938>
  4062e0:	2a00      	cmp	r2, #0
  4062e2:	f040 81bc 	bne.w	40665e <_vfiprintf_r+0xaa6>
  4062e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4062e8:	2b00      	cmp	r3, #0
  4062ea:	f43f ae1f 	beq.w	405f2c <_vfiprintf_r+0x374>
  4062ee:	ab0e      	add	r3, sp, #56	; 0x38
  4062f0:	2202      	movs	r2, #2
  4062f2:	4608      	mov	r0, r1
  4062f4:	931c      	str	r3, [sp, #112]	; 0x70
  4062f6:	921d      	str	r2, [sp, #116]	; 0x74
  4062f8:	46ca      	mov	sl, r9
  4062fa:	4601      	mov	r1, r0
  4062fc:	f10a 0a08 	add.w	sl, sl, #8
  406300:	3001      	adds	r0, #1
  406302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406304:	2b80      	cmp	r3, #128	; 0x80
  406306:	f43f ae19 	beq.w	405f3c <_vfiprintf_r+0x384>
  40630a:	9b05      	ldr	r3, [sp, #20]
  40630c:	1ae4      	subs	r4, r4, r3
  40630e:	2c00      	cmp	r4, #0
  406310:	dd2e      	ble.n	406370 <_vfiprintf_r+0x7b8>
  406312:	2c10      	cmp	r4, #16
  406314:	4db3      	ldr	r5, [pc, #716]	; (4065e4 <_vfiprintf_r+0xa2c>)
  406316:	dd1e      	ble.n	406356 <_vfiprintf_r+0x79e>
  406318:	46d6      	mov	lr, sl
  40631a:	2610      	movs	r6, #16
  40631c:	9f06      	ldr	r7, [sp, #24]
  40631e:	f8dd a010 	ldr.w	sl, [sp, #16]
  406322:	e006      	b.n	406332 <_vfiprintf_r+0x77a>
  406324:	1c88      	adds	r0, r1, #2
  406326:	f10e 0e08 	add.w	lr, lr, #8
  40632a:	4619      	mov	r1, r3
  40632c:	3c10      	subs	r4, #16
  40632e:	2c10      	cmp	r4, #16
  406330:	dd10      	ble.n	406354 <_vfiprintf_r+0x79c>
  406332:	1c4b      	adds	r3, r1, #1
  406334:	3210      	adds	r2, #16
  406336:	2b07      	cmp	r3, #7
  406338:	9211      	str	r2, [sp, #68]	; 0x44
  40633a:	e88e 0060 	stmia.w	lr, {r5, r6}
  40633e:	9310      	str	r3, [sp, #64]	; 0x40
  406340:	ddf0      	ble.n	406324 <_vfiprintf_r+0x76c>
  406342:	2a00      	cmp	r2, #0
  406344:	d165      	bne.n	406412 <_vfiprintf_r+0x85a>
  406346:	3c10      	subs	r4, #16
  406348:	2c10      	cmp	r4, #16
  40634a:	f04f 0001 	mov.w	r0, #1
  40634e:	4611      	mov	r1, r2
  406350:	46ce      	mov	lr, r9
  406352:	dcee      	bgt.n	406332 <_vfiprintf_r+0x77a>
  406354:	46f2      	mov	sl, lr
  406356:	4422      	add	r2, r4
  406358:	2807      	cmp	r0, #7
  40635a:	9211      	str	r2, [sp, #68]	; 0x44
  40635c:	f8ca 5000 	str.w	r5, [sl]
  406360:	f8ca 4004 	str.w	r4, [sl, #4]
  406364:	9010      	str	r0, [sp, #64]	; 0x40
  406366:	f300 8085 	bgt.w	406474 <_vfiprintf_r+0x8bc>
  40636a:	f10a 0a08 	add.w	sl, sl, #8
  40636e:	3001      	adds	r0, #1
  406370:	9905      	ldr	r1, [sp, #20]
  406372:	f8ca b000 	str.w	fp, [sl]
  406376:	440a      	add	r2, r1
  406378:	2807      	cmp	r0, #7
  40637a:	9211      	str	r2, [sp, #68]	; 0x44
  40637c:	f8ca 1004 	str.w	r1, [sl, #4]
  406380:	9010      	str	r0, [sp, #64]	; 0x40
  406382:	f340 8082 	ble.w	40648a <_vfiprintf_r+0x8d2>
  406386:	2a00      	cmp	r2, #0
  406388:	f040 8118 	bne.w	4065bc <_vfiprintf_r+0xa04>
  40638c:	9b02      	ldr	r3, [sp, #8]
  40638e:	9210      	str	r2, [sp, #64]	; 0x40
  406390:	0758      	lsls	r0, r3, #29
  406392:	d535      	bpl.n	406400 <_vfiprintf_r+0x848>
  406394:	9b08      	ldr	r3, [sp, #32]
  406396:	9901      	ldr	r1, [sp, #4]
  406398:	1a5c      	subs	r4, r3, r1
  40639a:	2c00      	cmp	r4, #0
  40639c:	f340 80e7 	ble.w	40656e <_vfiprintf_r+0x9b6>
  4063a0:	46ca      	mov	sl, r9
  4063a2:	2c10      	cmp	r4, #16
  4063a4:	f340 8218 	ble.w	4067d8 <_vfiprintf_r+0xc20>
  4063a8:	9910      	ldr	r1, [sp, #64]	; 0x40
  4063aa:	4e8f      	ldr	r6, [pc, #572]	; (4065e8 <_vfiprintf_r+0xa30>)
  4063ac:	9f06      	ldr	r7, [sp, #24]
  4063ae:	f8dd b010 	ldr.w	fp, [sp, #16]
  4063b2:	2510      	movs	r5, #16
  4063b4:	e006      	b.n	4063c4 <_vfiprintf_r+0x80c>
  4063b6:	1c88      	adds	r0, r1, #2
  4063b8:	f10a 0a08 	add.w	sl, sl, #8
  4063bc:	4619      	mov	r1, r3
  4063be:	3c10      	subs	r4, #16
  4063c0:	2c10      	cmp	r4, #16
  4063c2:	dd11      	ble.n	4063e8 <_vfiprintf_r+0x830>
  4063c4:	1c4b      	adds	r3, r1, #1
  4063c6:	3210      	adds	r2, #16
  4063c8:	2b07      	cmp	r3, #7
  4063ca:	9211      	str	r2, [sp, #68]	; 0x44
  4063cc:	f8ca 6000 	str.w	r6, [sl]
  4063d0:	f8ca 5004 	str.w	r5, [sl, #4]
  4063d4:	9310      	str	r3, [sp, #64]	; 0x40
  4063d6:	ddee      	ble.n	4063b6 <_vfiprintf_r+0x7fe>
  4063d8:	bb42      	cbnz	r2, 40642c <_vfiprintf_r+0x874>
  4063da:	3c10      	subs	r4, #16
  4063dc:	2c10      	cmp	r4, #16
  4063de:	f04f 0001 	mov.w	r0, #1
  4063e2:	4611      	mov	r1, r2
  4063e4:	46ca      	mov	sl, r9
  4063e6:	dced      	bgt.n	4063c4 <_vfiprintf_r+0x80c>
  4063e8:	4422      	add	r2, r4
  4063ea:	2807      	cmp	r0, #7
  4063ec:	9211      	str	r2, [sp, #68]	; 0x44
  4063ee:	f8ca 6000 	str.w	r6, [sl]
  4063f2:	f8ca 4004 	str.w	r4, [sl, #4]
  4063f6:	9010      	str	r0, [sp, #64]	; 0x40
  4063f8:	dd51      	ble.n	40649e <_vfiprintf_r+0x8e6>
  4063fa:	2a00      	cmp	r2, #0
  4063fc:	f040 819b 	bne.w	406736 <_vfiprintf_r+0xb7e>
  406400:	9b03      	ldr	r3, [sp, #12]
  406402:	9a08      	ldr	r2, [sp, #32]
  406404:	9901      	ldr	r1, [sp, #4]
  406406:	428a      	cmp	r2, r1
  406408:	bfac      	ite	ge
  40640a:	189b      	addge	r3, r3, r2
  40640c:	185b      	addlt	r3, r3, r1
  40640e:	9303      	str	r3, [sp, #12]
  406410:	e04e      	b.n	4064b0 <_vfiprintf_r+0x8f8>
  406412:	aa0f      	add	r2, sp, #60	; 0x3c
  406414:	4651      	mov	r1, sl
  406416:	4638      	mov	r0, r7
  406418:	f7ff fb8e 	bl	405b38 <__sprint_r.part.0>
  40641c:	2800      	cmp	r0, #0
  40641e:	f040 813f 	bne.w	4066a0 <_vfiprintf_r+0xae8>
  406422:	9910      	ldr	r1, [sp, #64]	; 0x40
  406424:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406426:	1c48      	adds	r0, r1, #1
  406428:	46ce      	mov	lr, r9
  40642a:	e77f      	b.n	40632c <_vfiprintf_r+0x774>
  40642c:	aa0f      	add	r2, sp, #60	; 0x3c
  40642e:	4659      	mov	r1, fp
  406430:	4638      	mov	r0, r7
  406432:	f7ff fb81 	bl	405b38 <__sprint_r.part.0>
  406436:	b960      	cbnz	r0, 406452 <_vfiprintf_r+0x89a>
  406438:	9910      	ldr	r1, [sp, #64]	; 0x40
  40643a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40643c:	1c48      	adds	r0, r1, #1
  40643e:	46ca      	mov	sl, r9
  406440:	e7bd      	b.n	4063be <_vfiprintf_r+0x806>
  406442:	9b11      	ldr	r3, [sp, #68]	; 0x44
  406444:	f8dd b010 	ldr.w	fp, [sp, #16]
  406448:	2b00      	cmp	r3, #0
  40644a:	f040 81d4 	bne.w	4067f6 <_vfiprintf_r+0xc3e>
  40644e:	2300      	movs	r3, #0
  406450:	9310      	str	r3, [sp, #64]	; 0x40
  406452:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  406456:	f013 0f01 	tst.w	r3, #1
  40645a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40645e:	d102      	bne.n	406466 <_vfiprintf_r+0x8ae>
  406460:	059a      	lsls	r2, r3, #22
  406462:	f140 80de 	bpl.w	406622 <_vfiprintf_r+0xa6a>
  406466:	065b      	lsls	r3, r3, #25
  406468:	f53f acb2 	bmi.w	405dd0 <_vfiprintf_r+0x218>
  40646c:	9803      	ldr	r0, [sp, #12]
  40646e:	b02d      	add	sp, #180	; 0xb4
  406470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406474:	2a00      	cmp	r2, #0
  406476:	f040 8106 	bne.w	406686 <_vfiprintf_r+0xace>
  40647a:	9a05      	ldr	r2, [sp, #20]
  40647c:	921d      	str	r2, [sp, #116]	; 0x74
  40647e:	2301      	movs	r3, #1
  406480:	9211      	str	r2, [sp, #68]	; 0x44
  406482:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  406486:	9310      	str	r3, [sp, #64]	; 0x40
  406488:	46ca      	mov	sl, r9
  40648a:	f10a 0a08 	add.w	sl, sl, #8
  40648e:	9b02      	ldr	r3, [sp, #8]
  406490:	0759      	lsls	r1, r3, #29
  406492:	d504      	bpl.n	40649e <_vfiprintf_r+0x8e6>
  406494:	9b08      	ldr	r3, [sp, #32]
  406496:	9901      	ldr	r1, [sp, #4]
  406498:	1a5c      	subs	r4, r3, r1
  40649a:	2c00      	cmp	r4, #0
  40649c:	dc81      	bgt.n	4063a2 <_vfiprintf_r+0x7ea>
  40649e:	9b03      	ldr	r3, [sp, #12]
  4064a0:	9908      	ldr	r1, [sp, #32]
  4064a2:	9801      	ldr	r0, [sp, #4]
  4064a4:	4281      	cmp	r1, r0
  4064a6:	bfac      	ite	ge
  4064a8:	185b      	addge	r3, r3, r1
  4064aa:	181b      	addlt	r3, r3, r0
  4064ac:	9303      	str	r3, [sp, #12]
  4064ae:	bb72      	cbnz	r2, 40650e <_vfiprintf_r+0x956>
  4064b0:	2300      	movs	r3, #0
  4064b2:	9310      	str	r3, [sp, #64]	; 0x40
  4064b4:	46ca      	mov	sl, r9
  4064b6:	f7ff bbbc 	b.w	405c32 <_vfiprintf_r+0x7a>
  4064ba:	aa0f      	add	r2, sp, #60	; 0x3c
  4064bc:	9904      	ldr	r1, [sp, #16]
  4064be:	4620      	mov	r0, r4
  4064c0:	f7ff fb3a 	bl	405b38 <__sprint_r.part.0>
  4064c4:	bb50      	cbnz	r0, 40651c <_vfiprintf_r+0x964>
  4064c6:	9910      	ldr	r1, [sp, #64]	; 0x40
  4064c8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4064ca:	f101 0e01 	add.w	lr, r1, #1
  4064ce:	46cc      	mov	ip, r9
  4064d0:	e548      	b.n	405f64 <_vfiprintf_r+0x3ac>
  4064d2:	2a00      	cmp	r2, #0
  4064d4:	f040 8140 	bne.w	406758 <_vfiprintf_r+0xba0>
  4064d8:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4064dc:	2900      	cmp	r1, #0
  4064de:	f000 811b 	beq.w	406718 <_vfiprintf_r+0xb60>
  4064e2:	2201      	movs	r2, #1
  4064e4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4064e8:	4610      	mov	r0, r2
  4064ea:	921d      	str	r2, [sp, #116]	; 0x74
  4064ec:	911c      	str	r1, [sp, #112]	; 0x70
  4064ee:	46ca      	mov	sl, r9
  4064f0:	4601      	mov	r1, r0
  4064f2:	f10a 0a08 	add.w	sl, sl, #8
  4064f6:	3001      	adds	r0, #1
  4064f8:	e507      	b.n	405f0a <_vfiprintf_r+0x352>
  4064fa:	9b02      	ldr	r3, [sp, #8]
  4064fc:	2a01      	cmp	r2, #1
  4064fe:	f000 8098 	beq.w	406632 <_vfiprintf_r+0xa7a>
  406502:	2a02      	cmp	r2, #2
  406504:	d10d      	bne.n	406522 <_vfiprintf_r+0x96a>
  406506:	9302      	str	r3, [sp, #8]
  406508:	2600      	movs	r6, #0
  40650a:	2700      	movs	r7, #0
  40650c:	e5b0      	b.n	406070 <_vfiprintf_r+0x4b8>
  40650e:	aa0f      	add	r2, sp, #60	; 0x3c
  406510:	9904      	ldr	r1, [sp, #16]
  406512:	9806      	ldr	r0, [sp, #24]
  406514:	f7ff fb10 	bl	405b38 <__sprint_r.part.0>
  406518:	2800      	cmp	r0, #0
  40651a:	d0c9      	beq.n	4064b0 <_vfiprintf_r+0x8f8>
  40651c:	f8dd b010 	ldr.w	fp, [sp, #16]
  406520:	e797      	b.n	406452 <_vfiprintf_r+0x89a>
  406522:	9302      	str	r3, [sp, #8]
  406524:	2600      	movs	r6, #0
  406526:	2700      	movs	r7, #0
  406528:	4649      	mov	r1, r9
  40652a:	e000      	b.n	40652e <_vfiprintf_r+0x976>
  40652c:	4659      	mov	r1, fp
  40652e:	08f2      	lsrs	r2, r6, #3
  406530:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  406534:	08f8      	lsrs	r0, r7, #3
  406536:	f006 0307 	and.w	r3, r6, #7
  40653a:	4607      	mov	r7, r0
  40653c:	4616      	mov	r6, r2
  40653e:	3330      	adds	r3, #48	; 0x30
  406540:	ea56 0207 	orrs.w	r2, r6, r7
  406544:	f801 3c01 	strb.w	r3, [r1, #-1]
  406548:	f101 3bff 	add.w	fp, r1, #4294967295
  40654c:	d1ee      	bne.n	40652c <_vfiprintf_r+0x974>
  40654e:	9a02      	ldr	r2, [sp, #8]
  406550:	07d6      	lsls	r6, r2, #31
  406552:	f57f ad9d 	bpl.w	406090 <_vfiprintf_r+0x4d8>
  406556:	2b30      	cmp	r3, #48	; 0x30
  406558:	f43f ad9a 	beq.w	406090 <_vfiprintf_r+0x4d8>
  40655c:	3902      	subs	r1, #2
  40655e:	2330      	movs	r3, #48	; 0x30
  406560:	f80b 3c01 	strb.w	r3, [fp, #-1]
  406564:	eba9 0301 	sub.w	r3, r9, r1
  406568:	9305      	str	r3, [sp, #20]
  40656a:	468b      	mov	fp, r1
  40656c:	e476      	b.n	405e5c <_vfiprintf_r+0x2a4>
  40656e:	9b03      	ldr	r3, [sp, #12]
  406570:	9a08      	ldr	r2, [sp, #32]
  406572:	428a      	cmp	r2, r1
  406574:	bfac      	ite	ge
  406576:	189b      	addge	r3, r3, r2
  406578:	185b      	addlt	r3, r3, r1
  40657a:	9303      	str	r3, [sp, #12]
  40657c:	e798      	b.n	4064b0 <_vfiprintf_r+0x8f8>
  40657e:	2202      	movs	r2, #2
  406580:	e44d      	b.n	405e1e <_vfiprintf_r+0x266>
  406582:	2f00      	cmp	r7, #0
  406584:	bf08      	it	eq
  406586:	2e0a      	cmpeq	r6, #10
  406588:	d352      	bcc.n	406630 <_vfiprintf_r+0xa78>
  40658a:	46cb      	mov	fp, r9
  40658c:	4630      	mov	r0, r6
  40658e:	4639      	mov	r1, r7
  406590:	220a      	movs	r2, #10
  406592:	2300      	movs	r3, #0
  406594:	f003 fbd0 	bl	409d38 <__aeabi_uldivmod>
  406598:	3230      	adds	r2, #48	; 0x30
  40659a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  40659e:	4630      	mov	r0, r6
  4065a0:	4639      	mov	r1, r7
  4065a2:	2300      	movs	r3, #0
  4065a4:	220a      	movs	r2, #10
  4065a6:	f003 fbc7 	bl	409d38 <__aeabi_uldivmod>
  4065aa:	4606      	mov	r6, r0
  4065ac:	460f      	mov	r7, r1
  4065ae:	ea56 0307 	orrs.w	r3, r6, r7
  4065b2:	d1eb      	bne.n	40658c <_vfiprintf_r+0x9d4>
  4065b4:	e56c      	b.n	406090 <_vfiprintf_r+0x4d8>
  4065b6:	9405      	str	r4, [sp, #20]
  4065b8:	46cb      	mov	fp, r9
  4065ba:	e44f      	b.n	405e5c <_vfiprintf_r+0x2a4>
  4065bc:	aa0f      	add	r2, sp, #60	; 0x3c
  4065be:	9904      	ldr	r1, [sp, #16]
  4065c0:	9806      	ldr	r0, [sp, #24]
  4065c2:	f7ff fab9 	bl	405b38 <__sprint_r.part.0>
  4065c6:	2800      	cmp	r0, #0
  4065c8:	d1a8      	bne.n	40651c <_vfiprintf_r+0x964>
  4065ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4065cc:	46ca      	mov	sl, r9
  4065ce:	e75e      	b.n	40648e <_vfiprintf_r+0x8d6>
  4065d0:	aa0f      	add	r2, sp, #60	; 0x3c
  4065d2:	9904      	ldr	r1, [sp, #16]
  4065d4:	9806      	ldr	r0, [sp, #24]
  4065d6:	f7ff faaf 	bl	405b38 <__sprint_r.part.0>
  4065da:	2800      	cmp	r0, #0
  4065dc:	d19e      	bne.n	40651c <_vfiprintf_r+0x964>
  4065de:	46ca      	mov	sl, r9
  4065e0:	f7ff bbc0 	b.w	405d64 <_vfiprintf_r+0x1ac>
  4065e4:	0040a21c 	.word	0x0040a21c
  4065e8:	0040a20c 	.word	0x0040a20c
  4065ec:	3104      	adds	r1, #4
  4065ee:	6816      	ldr	r6, [r2, #0]
  4065f0:	9107      	str	r1, [sp, #28]
  4065f2:	2201      	movs	r2, #1
  4065f4:	2700      	movs	r7, #0
  4065f6:	e412      	b.n	405e1e <_vfiprintf_r+0x266>
  4065f8:	9807      	ldr	r0, [sp, #28]
  4065fa:	4601      	mov	r1, r0
  4065fc:	3104      	adds	r1, #4
  4065fe:	6806      	ldr	r6, [r0, #0]
  406600:	9107      	str	r1, [sp, #28]
  406602:	2700      	movs	r7, #0
  406604:	e40b      	b.n	405e1e <_vfiprintf_r+0x266>
  406606:	680e      	ldr	r6, [r1, #0]
  406608:	3104      	adds	r1, #4
  40660a:	9107      	str	r1, [sp, #28]
  40660c:	2700      	movs	r7, #0
  40660e:	e591      	b.n	406134 <_vfiprintf_r+0x57c>
  406610:	9907      	ldr	r1, [sp, #28]
  406612:	680e      	ldr	r6, [r1, #0]
  406614:	460a      	mov	r2, r1
  406616:	17f7      	asrs	r7, r6, #31
  406618:	3204      	adds	r2, #4
  40661a:	9207      	str	r2, [sp, #28]
  40661c:	4630      	mov	r0, r6
  40661e:	4639      	mov	r1, r7
  406620:	e50f      	b.n	406042 <_vfiprintf_r+0x48a>
  406622:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406626:	f001 fe4d 	bl	4082c4 <__retarget_lock_release_recursive>
  40662a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  40662e:	e71a      	b.n	406466 <_vfiprintf_r+0x8ae>
  406630:	9b02      	ldr	r3, [sp, #8]
  406632:	9302      	str	r3, [sp, #8]
  406634:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  406638:	3630      	adds	r6, #48	; 0x30
  40663a:	2301      	movs	r3, #1
  40663c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  406640:	9305      	str	r3, [sp, #20]
  406642:	e40b      	b.n	405e5c <_vfiprintf_r+0x2a4>
  406644:	aa0f      	add	r2, sp, #60	; 0x3c
  406646:	9904      	ldr	r1, [sp, #16]
  406648:	9806      	ldr	r0, [sp, #24]
  40664a:	f7ff fa75 	bl	405b38 <__sprint_r.part.0>
  40664e:	2800      	cmp	r0, #0
  406650:	f47f af64 	bne.w	40651c <_vfiprintf_r+0x964>
  406654:	9910      	ldr	r1, [sp, #64]	; 0x40
  406656:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406658:	1c48      	adds	r0, r1, #1
  40665a:	46ca      	mov	sl, r9
  40665c:	e651      	b.n	406302 <_vfiprintf_r+0x74a>
  40665e:	aa0f      	add	r2, sp, #60	; 0x3c
  406660:	9904      	ldr	r1, [sp, #16]
  406662:	9806      	ldr	r0, [sp, #24]
  406664:	f7ff fa68 	bl	405b38 <__sprint_r.part.0>
  406668:	2800      	cmp	r0, #0
  40666a:	f47f af57 	bne.w	40651c <_vfiprintf_r+0x964>
  40666e:	9910      	ldr	r1, [sp, #64]	; 0x40
  406670:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406672:	1c48      	adds	r0, r1, #1
  406674:	46ca      	mov	sl, r9
  406676:	e448      	b.n	405f0a <_vfiprintf_r+0x352>
  406678:	2a00      	cmp	r2, #0
  40667a:	f040 8091 	bne.w	4067a0 <_vfiprintf_r+0xbe8>
  40667e:	2001      	movs	r0, #1
  406680:	4611      	mov	r1, r2
  406682:	46ca      	mov	sl, r9
  406684:	e641      	b.n	40630a <_vfiprintf_r+0x752>
  406686:	aa0f      	add	r2, sp, #60	; 0x3c
  406688:	9904      	ldr	r1, [sp, #16]
  40668a:	9806      	ldr	r0, [sp, #24]
  40668c:	f7ff fa54 	bl	405b38 <__sprint_r.part.0>
  406690:	2800      	cmp	r0, #0
  406692:	f47f af43 	bne.w	40651c <_vfiprintf_r+0x964>
  406696:	9810      	ldr	r0, [sp, #64]	; 0x40
  406698:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40669a:	3001      	adds	r0, #1
  40669c:	46ca      	mov	sl, r9
  40669e:	e667      	b.n	406370 <_vfiprintf_r+0x7b8>
  4066a0:	46d3      	mov	fp, sl
  4066a2:	e6d6      	b.n	406452 <_vfiprintf_r+0x89a>
  4066a4:	9e07      	ldr	r6, [sp, #28]
  4066a6:	3607      	adds	r6, #7
  4066a8:	f026 0207 	bic.w	r2, r6, #7
  4066ac:	f102 0108 	add.w	r1, r2, #8
  4066b0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4066b4:	9107      	str	r1, [sp, #28]
  4066b6:	2201      	movs	r2, #1
  4066b8:	f7ff bbb1 	b.w	405e1e <_vfiprintf_r+0x266>
  4066bc:	9e07      	ldr	r6, [sp, #28]
  4066be:	3607      	adds	r6, #7
  4066c0:	f026 0607 	bic.w	r6, r6, #7
  4066c4:	e9d6 0100 	ldrd	r0, r1, [r6]
  4066c8:	f106 0208 	add.w	r2, r6, #8
  4066cc:	9207      	str	r2, [sp, #28]
  4066ce:	4606      	mov	r6, r0
  4066d0:	460f      	mov	r7, r1
  4066d2:	e4b6      	b.n	406042 <_vfiprintf_r+0x48a>
  4066d4:	9e07      	ldr	r6, [sp, #28]
  4066d6:	3607      	adds	r6, #7
  4066d8:	f026 0207 	bic.w	r2, r6, #7
  4066dc:	f102 0108 	add.w	r1, r2, #8
  4066e0:	e9d2 6700 	ldrd	r6, r7, [r2]
  4066e4:	9107      	str	r1, [sp, #28]
  4066e6:	2200      	movs	r2, #0
  4066e8:	f7ff bb99 	b.w	405e1e <_vfiprintf_r+0x266>
  4066ec:	9e07      	ldr	r6, [sp, #28]
  4066ee:	3607      	adds	r6, #7
  4066f0:	f026 0107 	bic.w	r1, r6, #7
  4066f4:	f101 0008 	add.w	r0, r1, #8
  4066f8:	9007      	str	r0, [sp, #28]
  4066fa:	e9d1 6700 	ldrd	r6, r7, [r1]
  4066fe:	e519      	b.n	406134 <_vfiprintf_r+0x57c>
  406700:	46cb      	mov	fp, r9
  406702:	f7ff bbab 	b.w	405e5c <_vfiprintf_r+0x2a4>
  406706:	252d      	movs	r5, #45	; 0x2d
  406708:	4276      	negs	r6, r6
  40670a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  40670e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406712:	2201      	movs	r2, #1
  406714:	f7ff bb88 	b.w	405e28 <_vfiprintf_r+0x270>
  406718:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40671a:	b9b3      	cbnz	r3, 40674a <_vfiprintf_r+0xb92>
  40671c:	4611      	mov	r1, r2
  40671e:	2001      	movs	r0, #1
  406720:	46ca      	mov	sl, r9
  406722:	e5f2      	b.n	40630a <_vfiprintf_r+0x752>
  406724:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  406728:	f001 fdcc 	bl	4082c4 <__retarget_lock_release_recursive>
  40672c:	f04f 33ff 	mov.w	r3, #4294967295
  406730:	9303      	str	r3, [sp, #12]
  406732:	f7ff bb50 	b.w	405dd6 <_vfiprintf_r+0x21e>
  406736:	aa0f      	add	r2, sp, #60	; 0x3c
  406738:	9904      	ldr	r1, [sp, #16]
  40673a:	9806      	ldr	r0, [sp, #24]
  40673c:	f7ff f9fc 	bl	405b38 <__sprint_r.part.0>
  406740:	2800      	cmp	r0, #0
  406742:	f47f aeeb 	bne.w	40651c <_vfiprintf_r+0x964>
  406746:	9a11      	ldr	r2, [sp, #68]	; 0x44
  406748:	e6a9      	b.n	40649e <_vfiprintf_r+0x8e6>
  40674a:	ab0e      	add	r3, sp, #56	; 0x38
  40674c:	2202      	movs	r2, #2
  40674e:	931c      	str	r3, [sp, #112]	; 0x70
  406750:	921d      	str	r2, [sp, #116]	; 0x74
  406752:	2001      	movs	r0, #1
  406754:	46ca      	mov	sl, r9
  406756:	e5d0      	b.n	4062fa <_vfiprintf_r+0x742>
  406758:	aa0f      	add	r2, sp, #60	; 0x3c
  40675a:	9904      	ldr	r1, [sp, #16]
  40675c:	9806      	ldr	r0, [sp, #24]
  40675e:	f7ff f9eb 	bl	405b38 <__sprint_r.part.0>
  406762:	2800      	cmp	r0, #0
  406764:	f47f aeda 	bne.w	40651c <_vfiprintf_r+0x964>
  406768:	9910      	ldr	r1, [sp, #64]	; 0x40
  40676a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40676c:	1c48      	adds	r0, r1, #1
  40676e:	46ca      	mov	sl, r9
  406770:	e5a4      	b.n	4062bc <_vfiprintf_r+0x704>
  406772:	9a07      	ldr	r2, [sp, #28]
  406774:	9903      	ldr	r1, [sp, #12]
  406776:	6813      	ldr	r3, [r2, #0]
  406778:	17cd      	asrs	r5, r1, #31
  40677a:	4608      	mov	r0, r1
  40677c:	3204      	adds	r2, #4
  40677e:	4629      	mov	r1, r5
  406780:	9207      	str	r2, [sp, #28]
  406782:	e9c3 0100 	strd	r0, r1, [r3]
  406786:	f7ff ba54 	b.w	405c32 <_vfiprintf_r+0x7a>
  40678a:	4658      	mov	r0, fp
  40678c:	9607      	str	r6, [sp, #28]
  40678e:	9302      	str	r3, [sp, #8]
  406790:	f7fd ff36 	bl	404600 <strlen>
  406794:	2400      	movs	r4, #0
  406796:	9005      	str	r0, [sp, #20]
  406798:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40679c:	f7ff bb5e 	b.w	405e5c <_vfiprintf_r+0x2a4>
  4067a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4067a2:	9904      	ldr	r1, [sp, #16]
  4067a4:	9806      	ldr	r0, [sp, #24]
  4067a6:	f7ff f9c7 	bl	405b38 <__sprint_r.part.0>
  4067aa:	2800      	cmp	r0, #0
  4067ac:	f47f aeb6 	bne.w	40651c <_vfiprintf_r+0x964>
  4067b0:	9910      	ldr	r1, [sp, #64]	; 0x40
  4067b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4067b4:	1c48      	adds	r0, r1, #1
  4067b6:	46ca      	mov	sl, r9
  4067b8:	e5a7      	b.n	40630a <_vfiprintf_r+0x752>
  4067ba:	9910      	ldr	r1, [sp, #64]	; 0x40
  4067bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4067be:	4e20      	ldr	r6, [pc, #128]	; (406840 <_vfiprintf_r+0xc88>)
  4067c0:	3101      	adds	r1, #1
  4067c2:	f7ff bb90 	b.w	405ee6 <_vfiprintf_r+0x32e>
  4067c6:	2c06      	cmp	r4, #6
  4067c8:	bf28      	it	cs
  4067ca:	2406      	movcs	r4, #6
  4067cc:	9405      	str	r4, [sp, #20]
  4067ce:	9607      	str	r6, [sp, #28]
  4067d0:	9401      	str	r4, [sp, #4]
  4067d2:	f8df b070 	ldr.w	fp, [pc, #112]	; 406844 <_vfiprintf_r+0xc8c>
  4067d6:	e4d5      	b.n	406184 <_vfiprintf_r+0x5cc>
  4067d8:	9810      	ldr	r0, [sp, #64]	; 0x40
  4067da:	4e19      	ldr	r6, [pc, #100]	; (406840 <_vfiprintf_r+0xc88>)
  4067dc:	3001      	adds	r0, #1
  4067de:	e603      	b.n	4063e8 <_vfiprintf_r+0x830>
  4067e0:	9405      	str	r4, [sp, #20]
  4067e2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4067e6:	9607      	str	r6, [sp, #28]
  4067e8:	9302      	str	r3, [sp, #8]
  4067ea:	4604      	mov	r4, r0
  4067ec:	f7ff bb36 	b.w	405e5c <_vfiprintf_r+0x2a4>
  4067f0:	4686      	mov	lr, r0
  4067f2:	f7ff bbce 	b.w	405f92 <_vfiprintf_r+0x3da>
  4067f6:	9806      	ldr	r0, [sp, #24]
  4067f8:	aa0f      	add	r2, sp, #60	; 0x3c
  4067fa:	4659      	mov	r1, fp
  4067fc:	f7ff f99c 	bl	405b38 <__sprint_r.part.0>
  406800:	2800      	cmp	r0, #0
  406802:	f43f ae24 	beq.w	40644e <_vfiprintf_r+0x896>
  406806:	e624      	b.n	406452 <_vfiprintf_r+0x89a>
  406808:	9907      	ldr	r1, [sp, #28]
  40680a:	f898 2001 	ldrb.w	r2, [r8, #1]
  40680e:	680c      	ldr	r4, [r1, #0]
  406810:	3104      	adds	r1, #4
  406812:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  406816:	46b8      	mov	r8, r7
  406818:	9107      	str	r1, [sp, #28]
  40681a:	f7ff ba3f 	b.w	405c9c <_vfiprintf_r+0xe4>
  40681e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406822:	e43c      	b.n	40609e <_vfiprintf_r+0x4e6>
  406824:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406828:	e521      	b.n	40626e <_vfiprintf_r+0x6b6>
  40682a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40682e:	f7ff bbf4 	b.w	40601a <_vfiprintf_r+0x462>
  406832:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  406836:	e491      	b.n	40615c <_vfiprintf_r+0x5a4>
  406838:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40683c:	e469      	b.n	406112 <_vfiprintf_r+0x55a>
  40683e:	bf00      	nop
  406840:	0040a20c 	.word	0x0040a20c
  406844:	0040a1e0 	.word	0x0040a1e0

00406848 <__sbprintf>:
  406848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40684c:	460c      	mov	r4, r1
  40684e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  406852:	8989      	ldrh	r1, [r1, #12]
  406854:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406856:	89e5      	ldrh	r5, [r4, #14]
  406858:	9619      	str	r6, [sp, #100]	; 0x64
  40685a:	f021 0102 	bic.w	r1, r1, #2
  40685e:	4606      	mov	r6, r0
  406860:	69e0      	ldr	r0, [r4, #28]
  406862:	f8ad 100c 	strh.w	r1, [sp, #12]
  406866:	4617      	mov	r7, r2
  406868:	f44f 6180 	mov.w	r1, #1024	; 0x400
  40686c:	6a62      	ldr	r2, [r4, #36]	; 0x24
  40686e:	f8ad 500e 	strh.w	r5, [sp, #14]
  406872:	4698      	mov	r8, r3
  406874:	ad1a      	add	r5, sp, #104	; 0x68
  406876:	2300      	movs	r3, #0
  406878:	9007      	str	r0, [sp, #28]
  40687a:	a816      	add	r0, sp, #88	; 0x58
  40687c:	9209      	str	r2, [sp, #36]	; 0x24
  40687e:	9306      	str	r3, [sp, #24]
  406880:	9500      	str	r5, [sp, #0]
  406882:	9504      	str	r5, [sp, #16]
  406884:	9102      	str	r1, [sp, #8]
  406886:	9105      	str	r1, [sp, #20]
  406888:	f001 fd16 	bl	4082b8 <__retarget_lock_init_recursive>
  40688c:	4643      	mov	r3, r8
  40688e:	463a      	mov	r2, r7
  406890:	4669      	mov	r1, sp
  406892:	4630      	mov	r0, r6
  406894:	f7ff f990 	bl	405bb8 <_vfiprintf_r>
  406898:	1e05      	subs	r5, r0, #0
  40689a:	db07      	blt.n	4068ac <__sbprintf+0x64>
  40689c:	4630      	mov	r0, r6
  40689e:	4669      	mov	r1, sp
  4068a0:	f001 f8e8 	bl	407a74 <_fflush_r>
  4068a4:	2800      	cmp	r0, #0
  4068a6:	bf18      	it	ne
  4068a8:	f04f 35ff 	movne.w	r5, #4294967295
  4068ac:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4068b0:	065b      	lsls	r3, r3, #25
  4068b2:	d503      	bpl.n	4068bc <__sbprintf+0x74>
  4068b4:	89a3      	ldrh	r3, [r4, #12]
  4068b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4068ba:	81a3      	strh	r3, [r4, #12]
  4068bc:	9816      	ldr	r0, [sp, #88]	; 0x58
  4068be:	f001 fcfd 	bl	4082bc <__retarget_lock_close_recursive>
  4068c2:	4628      	mov	r0, r5
  4068c4:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4068c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004068cc <__swsetup_r>:
  4068cc:	b538      	push	{r3, r4, r5, lr}
  4068ce:	4b30      	ldr	r3, [pc, #192]	; (406990 <__swsetup_r+0xc4>)
  4068d0:	681b      	ldr	r3, [r3, #0]
  4068d2:	4605      	mov	r5, r0
  4068d4:	460c      	mov	r4, r1
  4068d6:	b113      	cbz	r3, 4068de <__swsetup_r+0x12>
  4068d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4068da:	2a00      	cmp	r2, #0
  4068dc:	d038      	beq.n	406950 <__swsetup_r+0x84>
  4068de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4068e2:	b293      	uxth	r3, r2
  4068e4:	0718      	lsls	r0, r3, #28
  4068e6:	d50c      	bpl.n	406902 <__swsetup_r+0x36>
  4068e8:	6920      	ldr	r0, [r4, #16]
  4068ea:	b1a8      	cbz	r0, 406918 <__swsetup_r+0x4c>
  4068ec:	f013 0201 	ands.w	r2, r3, #1
  4068f0:	d01e      	beq.n	406930 <__swsetup_r+0x64>
  4068f2:	6963      	ldr	r3, [r4, #20]
  4068f4:	2200      	movs	r2, #0
  4068f6:	425b      	negs	r3, r3
  4068f8:	61a3      	str	r3, [r4, #24]
  4068fa:	60a2      	str	r2, [r4, #8]
  4068fc:	b1f0      	cbz	r0, 40693c <__swsetup_r+0x70>
  4068fe:	2000      	movs	r0, #0
  406900:	bd38      	pop	{r3, r4, r5, pc}
  406902:	06d9      	lsls	r1, r3, #27
  406904:	d53c      	bpl.n	406980 <__swsetup_r+0xb4>
  406906:	0758      	lsls	r0, r3, #29
  406908:	d426      	bmi.n	406958 <__swsetup_r+0x8c>
  40690a:	6920      	ldr	r0, [r4, #16]
  40690c:	f042 0308 	orr.w	r3, r2, #8
  406910:	81a3      	strh	r3, [r4, #12]
  406912:	b29b      	uxth	r3, r3
  406914:	2800      	cmp	r0, #0
  406916:	d1e9      	bne.n	4068ec <__swsetup_r+0x20>
  406918:	f403 7220 	and.w	r2, r3, #640	; 0x280
  40691c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  406920:	d0e4      	beq.n	4068ec <__swsetup_r+0x20>
  406922:	4628      	mov	r0, r5
  406924:	4621      	mov	r1, r4
  406926:	f001 fcfd 	bl	408324 <__smakebuf_r>
  40692a:	89a3      	ldrh	r3, [r4, #12]
  40692c:	6920      	ldr	r0, [r4, #16]
  40692e:	e7dd      	b.n	4068ec <__swsetup_r+0x20>
  406930:	0799      	lsls	r1, r3, #30
  406932:	bf58      	it	pl
  406934:	6962      	ldrpl	r2, [r4, #20]
  406936:	60a2      	str	r2, [r4, #8]
  406938:	2800      	cmp	r0, #0
  40693a:	d1e0      	bne.n	4068fe <__swsetup_r+0x32>
  40693c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406940:	061a      	lsls	r2, r3, #24
  406942:	d5dd      	bpl.n	406900 <__swsetup_r+0x34>
  406944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  406948:	81a3      	strh	r3, [r4, #12]
  40694a:	f04f 30ff 	mov.w	r0, #4294967295
  40694e:	bd38      	pop	{r3, r4, r5, pc}
  406950:	4618      	mov	r0, r3
  406952:	f001 f8e7 	bl	407b24 <__sinit>
  406956:	e7c2      	b.n	4068de <__swsetup_r+0x12>
  406958:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40695a:	b151      	cbz	r1, 406972 <__swsetup_r+0xa6>
  40695c:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406960:	4299      	cmp	r1, r3
  406962:	d004      	beq.n	40696e <__swsetup_r+0xa2>
  406964:	4628      	mov	r0, r5
  406966:	f001 fa03 	bl	407d70 <_free_r>
  40696a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40696e:	2300      	movs	r3, #0
  406970:	6323      	str	r3, [r4, #48]	; 0x30
  406972:	2300      	movs	r3, #0
  406974:	6920      	ldr	r0, [r4, #16]
  406976:	6063      	str	r3, [r4, #4]
  406978:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  40697c:	6020      	str	r0, [r4, #0]
  40697e:	e7c5      	b.n	40690c <__swsetup_r+0x40>
  406980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  406984:	2309      	movs	r3, #9
  406986:	602b      	str	r3, [r5, #0]
  406988:	f04f 30ff 	mov.w	r0, #4294967295
  40698c:	81a2      	strh	r2, [r4, #12]
  40698e:	bd38      	pop	{r3, r4, r5, pc}
  406990:	2040000c 	.word	0x2040000c

00406994 <register_fini>:
  406994:	4b02      	ldr	r3, [pc, #8]	; (4069a0 <register_fini+0xc>)
  406996:	b113      	cbz	r3, 40699e <register_fini+0xa>
  406998:	4802      	ldr	r0, [pc, #8]	; (4069a4 <register_fini+0x10>)
  40699a:	f000 b805 	b.w	4069a8 <atexit>
  40699e:	4770      	bx	lr
  4069a0:	00000000 	.word	0x00000000
  4069a4:	00407b95 	.word	0x00407b95

004069a8 <atexit>:
  4069a8:	2300      	movs	r3, #0
  4069aa:	4601      	mov	r1, r0
  4069ac:	461a      	mov	r2, r3
  4069ae:	4618      	mov	r0, r3
  4069b0:	f002 bbda 	b.w	409168 <__register_exitproc>

004069b4 <quorem>:
  4069b4:	6902      	ldr	r2, [r0, #16]
  4069b6:	690b      	ldr	r3, [r1, #16]
  4069b8:	4293      	cmp	r3, r2
  4069ba:	f300 808d 	bgt.w	406ad8 <quorem+0x124>
  4069be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4069c2:	f103 38ff 	add.w	r8, r3, #4294967295
  4069c6:	f101 0714 	add.w	r7, r1, #20
  4069ca:	f100 0b14 	add.w	fp, r0, #20
  4069ce:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  4069d2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  4069d6:	ea4f 0488 	mov.w	r4, r8, lsl #2
  4069da:	b083      	sub	sp, #12
  4069dc:	3201      	adds	r2, #1
  4069de:	fbb3 f9f2 	udiv	r9, r3, r2
  4069e2:	eb0b 0304 	add.w	r3, fp, r4
  4069e6:	9400      	str	r4, [sp, #0]
  4069e8:	eb07 0a04 	add.w	sl, r7, r4
  4069ec:	9301      	str	r3, [sp, #4]
  4069ee:	f1b9 0f00 	cmp.w	r9, #0
  4069f2:	d039      	beq.n	406a68 <quorem+0xb4>
  4069f4:	2500      	movs	r5, #0
  4069f6:	462e      	mov	r6, r5
  4069f8:	46bc      	mov	ip, r7
  4069fa:	46de      	mov	lr, fp
  4069fc:	f85c 4b04 	ldr.w	r4, [ip], #4
  406a00:	f8de 3000 	ldr.w	r3, [lr]
  406a04:	b2a2      	uxth	r2, r4
  406a06:	fb09 5502 	mla	r5, r9, r2, r5
  406a0a:	0c22      	lsrs	r2, r4, #16
  406a0c:	0c2c      	lsrs	r4, r5, #16
  406a0e:	fb09 4202 	mla	r2, r9, r2, r4
  406a12:	b2ad      	uxth	r5, r5
  406a14:	1b75      	subs	r5, r6, r5
  406a16:	b296      	uxth	r6, r2
  406a18:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  406a1c:	fa15 f383 	uxtah	r3, r5, r3
  406a20:	eb06 4623 	add.w	r6, r6, r3, asr #16
  406a24:	b29b      	uxth	r3, r3
  406a26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  406a2a:	45e2      	cmp	sl, ip
  406a2c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  406a30:	f84e 3b04 	str.w	r3, [lr], #4
  406a34:	ea4f 4626 	mov.w	r6, r6, asr #16
  406a38:	d2e0      	bcs.n	4069fc <quorem+0x48>
  406a3a:	9b00      	ldr	r3, [sp, #0]
  406a3c:	f85b 3003 	ldr.w	r3, [fp, r3]
  406a40:	b993      	cbnz	r3, 406a68 <quorem+0xb4>
  406a42:	9c01      	ldr	r4, [sp, #4]
  406a44:	1f23      	subs	r3, r4, #4
  406a46:	459b      	cmp	fp, r3
  406a48:	d20c      	bcs.n	406a64 <quorem+0xb0>
  406a4a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  406a4e:	b94b      	cbnz	r3, 406a64 <quorem+0xb0>
  406a50:	f1a4 0308 	sub.w	r3, r4, #8
  406a54:	e002      	b.n	406a5c <quorem+0xa8>
  406a56:	681a      	ldr	r2, [r3, #0]
  406a58:	3b04      	subs	r3, #4
  406a5a:	b91a      	cbnz	r2, 406a64 <quorem+0xb0>
  406a5c:	459b      	cmp	fp, r3
  406a5e:	f108 38ff 	add.w	r8, r8, #4294967295
  406a62:	d3f8      	bcc.n	406a56 <quorem+0xa2>
  406a64:	f8c0 8010 	str.w	r8, [r0, #16]
  406a68:	4604      	mov	r4, r0
  406a6a:	f001 ff73 	bl	408954 <__mcmp>
  406a6e:	2800      	cmp	r0, #0
  406a70:	db2e      	blt.n	406ad0 <quorem+0x11c>
  406a72:	f109 0901 	add.w	r9, r9, #1
  406a76:	465d      	mov	r5, fp
  406a78:	2300      	movs	r3, #0
  406a7a:	f857 1b04 	ldr.w	r1, [r7], #4
  406a7e:	6828      	ldr	r0, [r5, #0]
  406a80:	b28a      	uxth	r2, r1
  406a82:	1a9a      	subs	r2, r3, r2
  406a84:	0c0b      	lsrs	r3, r1, #16
  406a86:	fa12 f280 	uxtah	r2, r2, r0
  406a8a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  406a8e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  406a92:	b292      	uxth	r2, r2
  406a94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  406a98:	45ba      	cmp	sl, r7
  406a9a:	f845 2b04 	str.w	r2, [r5], #4
  406a9e:	ea4f 4323 	mov.w	r3, r3, asr #16
  406aa2:	d2ea      	bcs.n	406a7a <quorem+0xc6>
  406aa4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  406aa8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  406aac:	b982      	cbnz	r2, 406ad0 <quorem+0x11c>
  406aae:	1f1a      	subs	r2, r3, #4
  406ab0:	4593      	cmp	fp, r2
  406ab2:	d20b      	bcs.n	406acc <quorem+0x118>
  406ab4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  406ab8:	b942      	cbnz	r2, 406acc <quorem+0x118>
  406aba:	3b08      	subs	r3, #8
  406abc:	e002      	b.n	406ac4 <quorem+0x110>
  406abe:	681a      	ldr	r2, [r3, #0]
  406ac0:	3b04      	subs	r3, #4
  406ac2:	b91a      	cbnz	r2, 406acc <quorem+0x118>
  406ac4:	459b      	cmp	fp, r3
  406ac6:	f108 38ff 	add.w	r8, r8, #4294967295
  406aca:	d3f8      	bcc.n	406abe <quorem+0x10a>
  406acc:	f8c4 8010 	str.w	r8, [r4, #16]
  406ad0:	4648      	mov	r0, r9
  406ad2:	b003      	add	sp, #12
  406ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406ad8:	2000      	movs	r0, #0
  406ada:	4770      	bx	lr
  406adc:	0000      	movs	r0, r0
	...

00406ae0 <_dtoa_r>:
  406ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406ae4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  406ae6:	b09b      	sub	sp, #108	; 0x6c
  406ae8:	4604      	mov	r4, r0
  406aea:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  406aec:	4692      	mov	sl, r2
  406aee:	469b      	mov	fp, r3
  406af0:	b141      	cbz	r1, 406b04 <_dtoa_r+0x24>
  406af2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  406af4:	604a      	str	r2, [r1, #4]
  406af6:	2301      	movs	r3, #1
  406af8:	4093      	lsls	r3, r2
  406afa:	608b      	str	r3, [r1, #8]
  406afc:	f001 fd52 	bl	4085a4 <_Bfree>
  406b00:	2300      	movs	r3, #0
  406b02:	6423      	str	r3, [r4, #64]	; 0x40
  406b04:	f1bb 0f00 	cmp.w	fp, #0
  406b08:	465d      	mov	r5, fp
  406b0a:	db35      	blt.n	406b78 <_dtoa_r+0x98>
  406b0c:	2300      	movs	r3, #0
  406b0e:	6033      	str	r3, [r6, #0]
  406b10:	4b9d      	ldr	r3, [pc, #628]	; (406d88 <_dtoa_r+0x2a8>)
  406b12:	43ab      	bics	r3, r5
  406b14:	d015      	beq.n	406b42 <_dtoa_r+0x62>
  406b16:	4650      	mov	r0, sl
  406b18:	4659      	mov	r1, fp
  406b1a:	2200      	movs	r2, #0
  406b1c:	2300      	movs	r3, #0
  406b1e:	f003 f89b 	bl	409c58 <__aeabi_dcmpeq>
  406b22:	4680      	mov	r8, r0
  406b24:	2800      	cmp	r0, #0
  406b26:	d02d      	beq.n	406b84 <_dtoa_r+0xa4>
  406b28:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406b2a:	2301      	movs	r3, #1
  406b2c:	6013      	str	r3, [r2, #0]
  406b2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406b30:	2b00      	cmp	r3, #0
  406b32:	f000 80bd 	beq.w	406cb0 <_dtoa_r+0x1d0>
  406b36:	4895      	ldr	r0, [pc, #596]	; (406d8c <_dtoa_r+0x2ac>)
  406b38:	6018      	str	r0, [r3, #0]
  406b3a:	3801      	subs	r0, #1
  406b3c:	b01b      	add	sp, #108	; 0x6c
  406b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b42:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406b44:	f242 730f 	movw	r3, #9999	; 0x270f
  406b48:	6013      	str	r3, [r2, #0]
  406b4a:	f1ba 0f00 	cmp.w	sl, #0
  406b4e:	d10d      	bne.n	406b6c <_dtoa_r+0x8c>
  406b50:	f3c5 0513 	ubfx	r5, r5, #0, #20
  406b54:	b955      	cbnz	r5, 406b6c <_dtoa_r+0x8c>
  406b56:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406b58:	488d      	ldr	r0, [pc, #564]	; (406d90 <_dtoa_r+0x2b0>)
  406b5a:	2b00      	cmp	r3, #0
  406b5c:	d0ee      	beq.n	406b3c <_dtoa_r+0x5c>
  406b5e:	f100 0308 	add.w	r3, r0, #8
  406b62:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  406b64:	6013      	str	r3, [r2, #0]
  406b66:	b01b      	add	sp, #108	; 0x6c
  406b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406b6c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406b6e:	4889      	ldr	r0, [pc, #548]	; (406d94 <_dtoa_r+0x2b4>)
  406b70:	2b00      	cmp	r3, #0
  406b72:	d0e3      	beq.n	406b3c <_dtoa_r+0x5c>
  406b74:	1cc3      	adds	r3, r0, #3
  406b76:	e7f4      	b.n	406b62 <_dtoa_r+0x82>
  406b78:	2301      	movs	r3, #1
  406b7a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  406b7e:	6033      	str	r3, [r6, #0]
  406b80:	46ab      	mov	fp, r5
  406b82:	e7c5      	b.n	406b10 <_dtoa_r+0x30>
  406b84:	aa18      	add	r2, sp, #96	; 0x60
  406b86:	ab19      	add	r3, sp, #100	; 0x64
  406b88:	9201      	str	r2, [sp, #4]
  406b8a:	9300      	str	r3, [sp, #0]
  406b8c:	4652      	mov	r2, sl
  406b8e:	465b      	mov	r3, fp
  406b90:	4620      	mov	r0, r4
  406b92:	f001 ff7f 	bl	408a94 <__d2b>
  406b96:	0d2b      	lsrs	r3, r5, #20
  406b98:	4681      	mov	r9, r0
  406b9a:	d071      	beq.n	406c80 <_dtoa_r+0x1a0>
  406b9c:	f3cb 0213 	ubfx	r2, fp, #0, #20
  406ba0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  406ba4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  406ba6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  406baa:	4650      	mov	r0, sl
  406bac:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  406bb0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  406bb4:	2200      	movs	r2, #0
  406bb6:	4b78      	ldr	r3, [pc, #480]	; (406d98 <_dtoa_r+0x2b8>)
  406bb8:	f002 fc32 	bl	409420 <__aeabi_dsub>
  406bbc:	a36c      	add	r3, pc, #432	; (adr r3, 406d70 <_dtoa_r+0x290>)
  406bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
  406bc2:	f002 fde1 	bl	409788 <__aeabi_dmul>
  406bc6:	a36c      	add	r3, pc, #432	; (adr r3, 406d78 <_dtoa_r+0x298>)
  406bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
  406bcc:	f002 fc2a 	bl	409424 <__adddf3>
  406bd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  406bd4:	4630      	mov	r0, r6
  406bd6:	f002 fd71 	bl	4096bc <__aeabi_i2d>
  406bda:	a369      	add	r3, pc, #420	; (adr r3, 406d80 <_dtoa_r+0x2a0>)
  406bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
  406be0:	f002 fdd2 	bl	409788 <__aeabi_dmul>
  406be4:	4602      	mov	r2, r0
  406be6:	460b      	mov	r3, r1
  406be8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  406bec:	f002 fc1a 	bl	409424 <__adddf3>
  406bf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
  406bf4:	f003 f878 	bl	409ce8 <__aeabi_d2iz>
  406bf8:	2200      	movs	r2, #0
  406bfa:	9002      	str	r0, [sp, #8]
  406bfc:	2300      	movs	r3, #0
  406bfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406c02:	f003 f833 	bl	409c6c <__aeabi_dcmplt>
  406c06:	2800      	cmp	r0, #0
  406c08:	f040 8173 	bne.w	406ef2 <_dtoa_r+0x412>
  406c0c:	9d02      	ldr	r5, [sp, #8]
  406c0e:	2d16      	cmp	r5, #22
  406c10:	f200 815d 	bhi.w	406ece <_dtoa_r+0x3ee>
  406c14:	4b61      	ldr	r3, [pc, #388]	; (406d9c <_dtoa_r+0x2bc>)
  406c16:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  406c1a:	e9d3 0100 	ldrd	r0, r1, [r3]
  406c1e:	4652      	mov	r2, sl
  406c20:	465b      	mov	r3, fp
  406c22:	f003 f841 	bl	409ca8 <__aeabi_dcmpgt>
  406c26:	2800      	cmp	r0, #0
  406c28:	f000 81c5 	beq.w	406fb6 <_dtoa_r+0x4d6>
  406c2c:	1e6b      	subs	r3, r5, #1
  406c2e:	9302      	str	r3, [sp, #8]
  406c30:	2300      	movs	r3, #0
  406c32:	930e      	str	r3, [sp, #56]	; 0x38
  406c34:	1bbf      	subs	r7, r7, r6
  406c36:	1e7b      	subs	r3, r7, #1
  406c38:	9306      	str	r3, [sp, #24]
  406c3a:	f100 8154 	bmi.w	406ee6 <_dtoa_r+0x406>
  406c3e:	2300      	movs	r3, #0
  406c40:	9308      	str	r3, [sp, #32]
  406c42:	9b02      	ldr	r3, [sp, #8]
  406c44:	2b00      	cmp	r3, #0
  406c46:	f2c0 8145 	blt.w	406ed4 <_dtoa_r+0x3f4>
  406c4a:	9a06      	ldr	r2, [sp, #24]
  406c4c:	930d      	str	r3, [sp, #52]	; 0x34
  406c4e:	4611      	mov	r1, r2
  406c50:	4419      	add	r1, r3
  406c52:	2300      	movs	r3, #0
  406c54:	9106      	str	r1, [sp, #24]
  406c56:	930c      	str	r3, [sp, #48]	; 0x30
  406c58:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406c5a:	2b09      	cmp	r3, #9
  406c5c:	d82a      	bhi.n	406cb4 <_dtoa_r+0x1d4>
  406c5e:	2b05      	cmp	r3, #5
  406c60:	f340 865b 	ble.w	40791a <_dtoa_r+0xe3a>
  406c64:	3b04      	subs	r3, #4
  406c66:	9324      	str	r3, [sp, #144]	; 0x90
  406c68:	2500      	movs	r5, #0
  406c6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406c6c:	3b02      	subs	r3, #2
  406c6e:	2b03      	cmp	r3, #3
  406c70:	f200 8642 	bhi.w	4078f8 <_dtoa_r+0xe18>
  406c74:	e8df f013 	tbh	[pc, r3, lsl #1]
  406c78:	02c903d4 	.word	0x02c903d4
  406c7c:	046103df 	.word	0x046103df
  406c80:	9f18      	ldr	r7, [sp, #96]	; 0x60
  406c82:	9e19      	ldr	r6, [sp, #100]	; 0x64
  406c84:	443e      	add	r6, r7
  406c86:	f206 4332 	addw	r3, r6, #1074	; 0x432
  406c8a:	2b20      	cmp	r3, #32
  406c8c:	f340 818e 	ble.w	406fac <_dtoa_r+0x4cc>
  406c90:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  406c94:	f206 4012 	addw	r0, r6, #1042	; 0x412
  406c98:	409d      	lsls	r5, r3
  406c9a:	fa2a f000 	lsr.w	r0, sl, r0
  406c9e:	4328      	orrs	r0, r5
  406ca0:	f002 fcfc 	bl	40969c <__aeabi_ui2d>
  406ca4:	2301      	movs	r3, #1
  406ca6:	3e01      	subs	r6, #1
  406ca8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  406cac:	9314      	str	r3, [sp, #80]	; 0x50
  406cae:	e781      	b.n	406bb4 <_dtoa_r+0xd4>
  406cb0:	483b      	ldr	r0, [pc, #236]	; (406da0 <_dtoa_r+0x2c0>)
  406cb2:	e743      	b.n	406b3c <_dtoa_r+0x5c>
  406cb4:	2100      	movs	r1, #0
  406cb6:	6461      	str	r1, [r4, #68]	; 0x44
  406cb8:	4620      	mov	r0, r4
  406cba:	9125      	str	r1, [sp, #148]	; 0x94
  406cbc:	f001 fc4c 	bl	408558 <_Balloc>
  406cc0:	f04f 33ff 	mov.w	r3, #4294967295
  406cc4:	930a      	str	r3, [sp, #40]	; 0x28
  406cc6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  406cc8:	930f      	str	r3, [sp, #60]	; 0x3c
  406cca:	2301      	movs	r3, #1
  406ccc:	9004      	str	r0, [sp, #16]
  406cce:	6420      	str	r0, [r4, #64]	; 0x40
  406cd0:	9224      	str	r2, [sp, #144]	; 0x90
  406cd2:	930b      	str	r3, [sp, #44]	; 0x2c
  406cd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  406cd6:	2b00      	cmp	r3, #0
  406cd8:	f2c0 80d9 	blt.w	406e8e <_dtoa_r+0x3ae>
  406cdc:	9a02      	ldr	r2, [sp, #8]
  406cde:	2a0e      	cmp	r2, #14
  406ce0:	f300 80d5 	bgt.w	406e8e <_dtoa_r+0x3ae>
  406ce4:	4b2d      	ldr	r3, [pc, #180]	; (406d9c <_dtoa_r+0x2bc>)
  406ce6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  406cea:	e9d3 2300 	ldrd	r2, r3, [r3]
  406cee:	e9cd 2308 	strd	r2, r3, [sp, #32]
  406cf2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  406cf4:	2b00      	cmp	r3, #0
  406cf6:	f2c0 83ba 	blt.w	40746e <_dtoa_r+0x98e>
  406cfa:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  406cfe:	4650      	mov	r0, sl
  406d00:	462a      	mov	r2, r5
  406d02:	4633      	mov	r3, r6
  406d04:	4659      	mov	r1, fp
  406d06:	f002 fe69 	bl	4099dc <__aeabi_ddiv>
  406d0a:	f002 ffed 	bl	409ce8 <__aeabi_d2iz>
  406d0e:	4680      	mov	r8, r0
  406d10:	f002 fcd4 	bl	4096bc <__aeabi_i2d>
  406d14:	462a      	mov	r2, r5
  406d16:	4633      	mov	r3, r6
  406d18:	f002 fd36 	bl	409788 <__aeabi_dmul>
  406d1c:	460b      	mov	r3, r1
  406d1e:	4602      	mov	r2, r0
  406d20:	4659      	mov	r1, fp
  406d22:	4650      	mov	r0, sl
  406d24:	f002 fb7c 	bl	409420 <__aeabi_dsub>
  406d28:	9d04      	ldr	r5, [sp, #16]
  406d2a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  406d2e:	702b      	strb	r3, [r5, #0]
  406d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406d32:	2b01      	cmp	r3, #1
  406d34:	4606      	mov	r6, r0
  406d36:	460f      	mov	r7, r1
  406d38:	f105 0501 	add.w	r5, r5, #1
  406d3c:	d068      	beq.n	406e10 <_dtoa_r+0x330>
  406d3e:	2200      	movs	r2, #0
  406d40:	4b18      	ldr	r3, [pc, #96]	; (406da4 <_dtoa_r+0x2c4>)
  406d42:	f002 fd21 	bl	409788 <__aeabi_dmul>
  406d46:	2200      	movs	r2, #0
  406d48:	2300      	movs	r3, #0
  406d4a:	4606      	mov	r6, r0
  406d4c:	460f      	mov	r7, r1
  406d4e:	f002 ff83 	bl	409c58 <__aeabi_dcmpeq>
  406d52:	2800      	cmp	r0, #0
  406d54:	f040 8088 	bne.w	406e68 <_dtoa_r+0x388>
  406d58:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  406d5c:	f04f 0a00 	mov.w	sl, #0
  406d60:	f8df b040 	ldr.w	fp, [pc, #64]	; 406da4 <_dtoa_r+0x2c4>
  406d64:	940c      	str	r4, [sp, #48]	; 0x30
  406d66:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  406d6a:	e028      	b.n	406dbe <_dtoa_r+0x2de>
  406d6c:	f3af 8000 	nop.w
  406d70:	636f4361 	.word	0x636f4361
  406d74:	3fd287a7 	.word	0x3fd287a7
  406d78:	8b60c8b3 	.word	0x8b60c8b3
  406d7c:	3fc68a28 	.word	0x3fc68a28
  406d80:	509f79fb 	.word	0x509f79fb
  406d84:	3fd34413 	.word	0x3fd34413
  406d88:	7ff00000 	.word	0x7ff00000
  406d8c:	0040a1e9 	.word	0x0040a1e9
  406d90:	0040a22c 	.word	0x0040a22c
  406d94:	0040a238 	.word	0x0040a238
  406d98:	3ff80000 	.word	0x3ff80000
  406d9c:	0040a278 	.word	0x0040a278
  406da0:	0040a1e8 	.word	0x0040a1e8
  406da4:	40240000 	.word	0x40240000
  406da8:	f002 fcee 	bl	409788 <__aeabi_dmul>
  406dac:	2200      	movs	r2, #0
  406dae:	2300      	movs	r3, #0
  406db0:	4606      	mov	r6, r0
  406db2:	460f      	mov	r7, r1
  406db4:	f002 ff50 	bl	409c58 <__aeabi_dcmpeq>
  406db8:	2800      	cmp	r0, #0
  406dba:	f040 83c1 	bne.w	407540 <_dtoa_r+0xa60>
  406dbe:	4642      	mov	r2, r8
  406dc0:	464b      	mov	r3, r9
  406dc2:	4630      	mov	r0, r6
  406dc4:	4639      	mov	r1, r7
  406dc6:	f002 fe09 	bl	4099dc <__aeabi_ddiv>
  406dca:	f002 ff8d 	bl	409ce8 <__aeabi_d2iz>
  406dce:	4604      	mov	r4, r0
  406dd0:	f002 fc74 	bl	4096bc <__aeabi_i2d>
  406dd4:	4642      	mov	r2, r8
  406dd6:	464b      	mov	r3, r9
  406dd8:	f002 fcd6 	bl	409788 <__aeabi_dmul>
  406ddc:	4602      	mov	r2, r0
  406dde:	460b      	mov	r3, r1
  406de0:	4630      	mov	r0, r6
  406de2:	4639      	mov	r1, r7
  406de4:	f002 fb1c 	bl	409420 <__aeabi_dsub>
  406de8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  406dec:	9e04      	ldr	r6, [sp, #16]
  406dee:	f805 eb01 	strb.w	lr, [r5], #1
  406df2:	eba5 0e06 	sub.w	lr, r5, r6
  406df6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  406df8:	45b6      	cmp	lr, r6
  406dfa:	e9cd 0106 	strd	r0, r1, [sp, #24]
  406dfe:	4652      	mov	r2, sl
  406e00:	465b      	mov	r3, fp
  406e02:	d1d1      	bne.n	406da8 <_dtoa_r+0x2c8>
  406e04:	46a0      	mov	r8, r4
  406e06:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  406e0a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  406e0c:	4606      	mov	r6, r0
  406e0e:	460f      	mov	r7, r1
  406e10:	4632      	mov	r2, r6
  406e12:	463b      	mov	r3, r7
  406e14:	4630      	mov	r0, r6
  406e16:	4639      	mov	r1, r7
  406e18:	f002 fb04 	bl	409424 <__adddf3>
  406e1c:	4606      	mov	r6, r0
  406e1e:	460f      	mov	r7, r1
  406e20:	4602      	mov	r2, r0
  406e22:	460b      	mov	r3, r1
  406e24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406e28:	f002 ff20 	bl	409c6c <__aeabi_dcmplt>
  406e2c:	b948      	cbnz	r0, 406e42 <_dtoa_r+0x362>
  406e2e:	4632      	mov	r2, r6
  406e30:	463b      	mov	r3, r7
  406e32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  406e36:	f002 ff0f 	bl	409c58 <__aeabi_dcmpeq>
  406e3a:	b1a8      	cbz	r0, 406e68 <_dtoa_r+0x388>
  406e3c:	f018 0f01 	tst.w	r8, #1
  406e40:	d012      	beq.n	406e68 <_dtoa_r+0x388>
  406e42:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  406e46:	9a04      	ldr	r2, [sp, #16]
  406e48:	1e6b      	subs	r3, r5, #1
  406e4a:	e004      	b.n	406e56 <_dtoa_r+0x376>
  406e4c:	429a      	cmp	r2, r3
  406e4e:	f000 8401 	beq.w	407654 <_dtoa_r+0xb74>
  406e52:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  406e56:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  406e5a:	f103 0501 	add.w	r5, r3, #1
  406e5e:	d0f5      	beq.n	406e4c <_dtoa_r+0x36c>
  406e60:	f108 0801 	add.w	r8, r8, #1
  406e64:	f883 8000 	strb.w	r8, [r3]
  406e68:	4649      	mov	r1, r9
  406e6a:	4620      	mov	r0, r4
  406e6c:	f001 fb9a 	bl	4085a4 <_Bfree>
  406e70:	2200      	movs	r2, #0
  406e72:	9b02      	ldr	r3, [sp, #8]
  406e74:	702a      	strb	r2, [r5, #0]
  406e76:	9a26      	ldr	r2, [sp, #152]	; 0x98
  406e78:	3301      	adds	r3, #1
  406e7a:	6013      	str	r3, [r2, #0]
  406e7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  406e7e:	2b00      	cmp	r3, #0
  406e80:	f000 839e 	beq.w	4075c0 <_dtoa_r+0xae0>
  406e84:	9804      	ldr	r0, [sp, #16]
  406e86:	601d      	str	r5, [r3, #0]
  406e88:	b01b      	add	sp, #108	; 0x6c
  406e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406e8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  406e90:	2a00      	cmp	r2, #0
  406e92:	d03e      	beq.n	406f12 <_dtoa_r+0x432>
  406e94:	9a24      	ldr	r2, [sp, #144]	; 0x90
  406e96:	2a01      	cmp	r2, #1
  406e98:	f340 8311 	ble.w	4074be <_dtoa_r+0x9de>
  406e9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406e9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  406ea0:	1e5f      	subs	r7, r3, #1
  406ea2:	42ba      	cmp	r2, r7
  406ea4:	f2c0 838f 	blt.w	4075c6 <_dtoa_r+0xae6>
  406ea8:	1bd7      	subs	r7, r2, r7
  406eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406eac:	2b00      	cmp	r3, #0
  406eae:	f2c0 848b 	blt.w	4077c8 <_dtoa_r+0xce8>
  406eb2:	9d08      	ldr	r5, [sp, #32]
  406eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  406eb6:	9a08      	ldr	r2, [sp, #32]
  406eb8:	441a      	add	r2, r3
  406eba:	9208      	str	r2, [sp, #32]
  406ebc:	9a06      	ldr	r2, [sp, #24]
  406ebe:	2101      	movs	r1, #1
  406ec0:	441a      	add	r2, r3
  406ec2:	4620      	mov	r0, r4
  406ec4:	9206      	str	r2, [sp, #24]
  406ec6:	f001 fc07 	bl	4086d8 <__i2b>
  406eca:	4606      	mov	r6, r0
  406ecc:	e024      	b.n	406f18 <_dtoa_r+0x438>
  406ece:	2301      	movs	r3, #1
  406ed0:	930e      	str	r3, [sp, #56]	; 0x38
  406ed2:	e6af      	b.n	406c34 <_dtoa_r+0x154>
  406ed4:	9a08      	ldr	r2, [sp, #32]
  406ed6:	9b02      	ldr	r3, [sp, #8]
  406ed8:	1ad2      	subs	r2, r2, r3
  406eda:	425b      	negs	r3, r3
  406edc:	930c      	str	r3, [sp, #48]	; 0x30
  406ede:	2300      	movs	r3, #0
  406ee0:	9208      	str	r2, [sp, #32]
  406ee2:	930d      	str	r3, [sp, #52]	; 0x34
  406ee4:	e6b8      	b.n	406c58 <_dtoa_r+0x178>
  406ee6:	f1c7 0301 	rsb	r3, r7, #1
  406eea:	9308      	str	r3, [sp, #32]
  406eec:	2300      	movs	r3, #0
  406eee:	9306      	str	r3, [sp, #24]
  406ef0:	e6a7      	b.n	406c42 <_dtoa_r+0x162>
  406ef2:	9d02      	ldr	r5, [sp, #8]
  406ef4:	4628      	mov	r0, r5
  406ef6:	f002 fbe1 	bl	4096bc <__aeabi_i2d>
  406efa:	4602      	mov	r2, r0
  406efc:	460b      	mov	r3, r1
  406efe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  406f02:	f002 fea9 	bl	409c58 <__aeabi_dcmpeq>
  406f06:	2800      	cmp	r0, #0
  406f08:	f47f ae80 	bne.w	406c0c <_dtoa_r+0x12c>
  406f0c:	1e6b      	subs	r3, r5, #1
  406f0e:	9302      	str	r3, [sp, #8]
  406f10:	e67c      	b.n	406c0c <_dtoa_r+0x12c>
  406f12:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  406f14:	9d08      	ldr	r5, [sp, #32]
  406f16:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  406f18:	2d00      	cmp	r5, #0
  406f1a:	dd0c      	ble.n	406f36 <_dtoa_r+0x456>
  406f1c:	9906      	ldr	r1, [sp, #24]
  406f1e:	2900      	cmp	r1, #0
  406f20:	460b      	mov	r3, r1
  406f22:	dd08      	ble.n	406f36 <_dtoa_r+0x456>
  406f24:	42a9      	cmp	r1, r5
  406f26:	9a08      	ldr	r2, [sp, #32]
  406f28:	bfa8      	it	ge
  406f2a:	462b      	movge	r3, r5
  406f2c:	1ad2      	subs	r2, r2, r3
  406f2e:	1aed      	subs	r5, r5, r3
  406f30:	1acb      	subs	r3, r1, r3
  406f32:	9208      	str	r2, [sp, #32]
  406f34:	9306      	str	r3, [sp, #24]
  406f36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406f38:	b1d3      	cbz	r3, 406f70 <_dtoa_r+0x490>
  406f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  406f3c:	2b00      	cmp	r3, #0
  406f3e:	f000 82b7 	beq.w	4074b0 <_dtoa_r+0x9d0>
  406f42:	2f00      	cmp	r7, #0
  406f44:	dd10      	ble.n	406f68 <_dtoa_r+0x488>
  406f46:	4631      	mov	r1, r6
  406f48:	463a      	mov	r2, r7
  406f4a:	4620      	mov	r0, r4
  406f4c:	f001 fc60 	bl	408810 <__pow5mult>
  406f50:	464a      	mov	r2, r9
  406f52:	4601      	mov	r1, r0
  406f54:	4606      	mov	r6, r0
  406f56:	4620      	mov	r0, r4
  406f58:	f001 fbc8 	bl	4086ec <__multiply>
  406f5c:	4649      	mov	r1, r9
  406f5e:	4680      	mov	r8, r0
  406f60:	4620      	mov	r0, r4
  406f62:	f001 fb1f 	bl	4085a4 <_Bfree>
  406f66:	46c1      	mov	r9, r8
  406f68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  406f6a:	1bda      	subs	r2, r3, r7
  406f6c:	f040 82a1 	bne.w	4074b2 <_dtoa_r+0x9d2>
  406f70:	2101      	movs	r1, #1
  406f72:	4620      	mov	r0, r4
  406f74:	f001 fbb0 	bl	4086d8 <__i2b>
  406f78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406f7a:	2b00      	cmp	r3, #0
  406f7c:	4680      	mov	r8, r0
  406f7e:	dd1c      	ble.n	406fba <_dtoa_r+0x4da>
  406f80:	4601      	mov	r1, r0
  406f82:	461a      	mov	r2, r3
  406f84:	4620      	mov	r0, r4
  406f86:	f001 fc43 	bl	408810 <__pow5mult>
  406f8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406f8c:	2b01      	cmp	r3, #1
  406f8e:	4680      	mov	r8, r0
  406f90:	f340 8254 	ble.w	40743c <_dtoa_r+0x95c>
  406f94:	2300      	movs	r3, #0
  406f96:	930c      	str	r3, [sp, #48]	; 0x30
  406f98:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406f9c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  406fa0:	6918      	ldr	r0, [r3, #16]
  406fa2:	f001 fb49 	bl	408638 <__hi0bits>
  406fa6:	f1c0 0020 	rsb	r0, r0, #32
  406faa:	e010      	b.n	406fce <_dtoa_r+0x4ee>
  406fac:	f1c3 0520 	rsb	r5, r3, #32
  406fb0:	fa0a f005 	lsl.w	r0, sl, r5
  406fb4:	e674      	b.n	406ca0 <_dtoa_r+0x1c0>
  406fb6:	900e      	str	r0, [sp, #56]	; 0x38
  406fb8:	e63c      	b.n	406c34 <_dtoa_r+0x154>
  406fba:	9b24      	ldr	r3, [sp, #144]	; 0x90
  406fbc:	2b01      	cmp	r3, #1
  406fbe:	f340 8287 	ble.w	4074d0 <_dtoa_r+0x9f0>
  406fc2:	2300      	movs	r3, #0
  406fc4:	930c      	str	r3, [sp, #48]	; 0x30
  406fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  406fc8:	2001      	movs	r0, #1
  406fca:	2b00      	cmp	r3, #0
  406fcc:	d1e4      	bne.n	406f98 <_dtoa_r+0x4b8>
  406fce:	9a06      	ldr	r2, [sp, #24]
  406fd0:	4410      	add	r0, r2
  406fd2:	f010 001f 	ands.w	r0, r0, #31
  406fd6:	f000 80a1 	beq.w	40711c <_dtoa_r+0x63c>
  406fda:	f1c0 0320 	rsb	r3, r0, #32
  406fde:	2b04      	cmp	r3, #4
  406fe0:	f340 849e 	ble.w	407920 <_dtoa_r+0xe40>
  406fe4:	9b08      	ldr	r3, [sp, #32]
  406fe6:	f1c0 001c 	rsb	r0, r0, #28
  406fea:	4403      	add	r3, r0
  406fec:	9308      	str	r3, [sp, #32]
  406fee:	4613      	mov	r3, r2
  406ff0:	4403      	add	r3, r0
  406ff2:	4405      	add	r5, r0
  406ff4:	9306      	str	r3, [sp, #24]
  406ff6:	9b08      	ldr	r3, [sp, #32]
  406ff8:	2b00      	cmp	r3, #0
  406ffa:	dd05      	ble.n	407008 <_dtoa_r+0x528>
  406ffc:	4649      	mov	r1, r9
  406ffe:	461a      	mov	r2, r3
  407000:	4620      	mov	r0, r4
  407002:	f001 fc55 	bl	4088b0 <__lshift>
  407006:	4681      	mov	r9, r0
  407008:	9b06      	ldr	r3, [sp, #24]
  40700a:	2b00      	cmp	r3, #0
  40700c:	dd05      	ble.n	40701a <_dtoa_r+0x53a>
  40700e:	4641      	mov	r1, r8
  407010:	461a      	mov	r2, r3
  407012:	4620      	mov	r0, r4
  407014:	f001 fc4c 	bl	4088b0 <__lshift>
  407018:	4680      	mov	r8, r0
  40701a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40701c:	2b00      	cmp	r3, #0
  40701e:	f040 8086 	bne.w	40712e <_dtoa_r+0x64e>
  407022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407024:	2b00      	cmp	r3, #0
  407026:	f340 8266 	ble.w	4074f6 <_dtoa_r+0xa16>
  40702a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40702c:	2b00      	cmp	r3, #0
  40702e:	f000 8098 	beq.w	407162 <_dtoa_r+0x682>
  407032:	2d00      	cmp	r5, #0
  407034:	dd05      	ble.n	407042 <_dtoa_r+0x562>
  407036:	4631      	mov	r1, r6
  407038:	462a      	mov	r2, r5
  40703a:	4620      	mov	r0, r4
  40703c:	f001 fc38 	bl	4088b0 <__lshift>
  407040:	4606      	mov	r6, r0
  407042:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  407044:	2b00      	cmp	r3, #0
  407046:	f040 8337 	bne.w	4076b8 <_dtoa_r+0xbd8>
  40704a:	9606      	str	r6, [sp, #24]
  40704c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40704e:	9a04      	ldr	r2, [sp, #16]
  407050:	f8dd b018 	ldr.w	fp, [sp, #24]
  407054:	3b01      	subs	r3, #1
  407056:	18d3      	adds	r3, r2, r3
  407058:	930b      	str	r3, [sp, #44]	; 0x2c
  40705a:	f00a 0301 	and.w	r3, sl, #1
  40705e:	930c      	str	r3, [sp, #48]	; 0x30
  407060:	4617      	mov	r7, r2
  407062:	46c2      	mov	sl, r8
  407064:	4651      	mov	r1, sl
  407066:	4648      	mov	r0, r9
  407068:	f7ff fca4 	bl	4069b4 <quorem>
  40706c:	4631      	mov	r1, r6
  40706e:	4605      	mov	r5, r0
  407070:	4648      	mov	r0, r9
  407072:	f001 fc6f 	bl	408954 <__mcmp>
  407076:	465a      	mov	r2, fp
  407078:	900a      	str	r0, [sp, #40]	; 0x28
  40707a:	4651      	mov	r1, sl
  40707c:	4620      	mov	r0, r4
  40707e:	f001 fc85 	bl	40898c <__mdiff>
  407082:	68c2      	ldr	r2, [r0, #12]
  407084:	4680      	mov	r8, r0
  407086:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40708a:	2a00      	cmp	r2, #0
  40708c:	f040 822b 	bne.w	4074e6 <_dtoa_r+0xa06>
  407090:	4601      	mov	r1, r0
  407092:	4648      	mov	r0, r9
  407094:	9308      	str	r3, [sp, #32]
  407096:	f001 fc5d 	bl	408954 <__mcmp>
  40709a:	4641      	mov	r1, r8
  40709c:	9006      	str	r0, [sp, #24]
  40709e:	4620      	mov	r0, r4
  4070a0:	f001 fa80 	bl	4085a4 <_Bfree>
  4070a4:	9a06      	ldr	r2, [sp, #24]
  4070a6:	9b08      	ldr	r3, [sp, #32]
  4070a8:	b932      	cbnz	r2, 4070b8 <_dtoa_r+0x5d8>
  4070aa:	9924      	ldr	r1, [sp, #144]	; 0x90
  4070ac:	b921      	cbnz	r1, 4070b8 <_dtoa_r+0x5d8>
  4070ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4070b0:	2a00      	cmp	r2, #0
  4070b2:	f000 83ef 	beq.w	407894 <_dtoa_r+0xdb4>
  4070b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4070b8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4070ba:	2900      	cmp	r1, #0
  4070bc:	f2c0 829f 	blt.w	4075fe <_dtoa_r+0xb1e>
  4070c0:	d105      	bne.n	4070ce <_dtoa_r+0x5ee>
  4070c2:	9924      	ldr	r1, [sp, #144]	; 0x90
  4070c4:	b919      	cbnz	r1, 4070ce <_dtoa_r+0x5ee>
  4070c6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4070c8:	2900      	cmp	r1, #0
  4070ca:	f000 8298 	beq.w	4075fe <_dtoa_r+0xb1e>
  4070ce:	2a00      	cmp	r2, #0
  4070d0:	f300 8306 	bgt.w	4076e0 <_dtoa_r+0xc00>
  4070d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4070d6:	703b      	strb	r3, [r7, #0]
  4070d8:	f107 0801 	add.w	r8, r7, #1
  4070dc:	4297      	cmp	r7, r2
  4070de:	4645      	mov	r5, r8
  4070e0:	f000 830c 	beq.w	4076fc <_dtoa_r+0xc1c>
  4070e4:	4649      	mov	r1, r9
  4070e6:	2300      	movs	r3, #0
  4070e8:	220a      	movs	r2, #10
  4070ea:	4620      	mov	r0, r4
  4070ec:	f001 fa64 	bl	4085b8 <__multadd>
  4070f0:	455e      	cmp	r6, fp
  4070f2:	4681      	mov	r9, r0
  4070f4:	4631      	mov	r1, r6
  4070f6:	f04f 0300 	mov.w	r3, #0
  4070fa:	f04f 020a 	mov.w	r2, #10
  4070fe:	4620      	mov	r0, r4
  407100:	f000 81eb 	beq.w	4074da <_dtoa_r+0x9fa>
  407104:	f001 fa58 	bl	4085b8 <__multadd>
  407108:	4659      	mov	r1, fp
  40710a:	4606      	mov	r6, r0
  40710c:	2300      	movs	r3, #0
  40710e:	220a      	movs	r2, #10
  407110:	4620      	mov	r0, r4
  407112:	f001 fa51 	bl	4085b8 <__multadd>
  407116:	4647      	mov	r7, r8
  407118:	4683      	mov	fp, r0
  40711a:	e7a3      	b.n	407064 <_dtoa_r+0x584>
  40711c:	201c      	movs	r0, #28
  40711e:	9b08      	ldr	r3, [sp, #32]
  407120:	4403      	add	r3, r0
  407122:	9308      	str	r3, [sp, #32]
  407124:	9b06      	ldr	r3, [sp, #24]
  407126:	4403      	add	r3, r0
  407128:	4405      	add	r5, r0
  40712a:	9306      	str	r3, [sp, #24]
  40712c:	e763      	b.n	406ff6 <_dtoa_r+0x516>
  40712e:	4641      	mov	r1, r8
  407130:	4648      	mov	r0, r9
  407132:	f001 fc0f 	bl	408954 <__mcmp>
  407136:	2800      	cmp	r0, #0
  407138:	f6bf af73 	bge.w	407022 <_dtoa_r+0x542>
  40713c:	9f02      	ldr	r7, [sp, #8]
  40713e:	4649      	mov	r1, r9
  407140:	2300      	movs	r3, #0
  407142:	220a      	movs	r2, #10
  407144:	4620      	mov	r0, r4
  407146:	3f01      	subs	r7, #1
  407148:	9702      	str	r7, [sp, #8]
  40714a:	f001 fa35 	bl	4085b8 <__multadd>
  40714e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  407150:	4681      	mov	r9, r0
  407152:	2b00      	cmp	r3, #0
  407154:	f040 83b6 	bne.w	4078c4 <_dtoa_r+0xde4>
  407158:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40715a:	2b00      	cmp	r3, #0
  40715c:	f340 83bf 	ble.w	4078de <_dtoa_r+0xdfe>
  407160:	930a      	str	r3, [sp, #40]	; 0x28
  407162:	f8dd b010 	ldr.w	fp, [sp, #16]
  407166:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  407168:	465d      	mov	r5, fp
  40716a:	e002      	b.n	407172 <_dtoa_r+0x692>
  40716c:	f001 fa24 	bl	4085b8 <__multadd>
  407170:	4681      	mov	r9, r0
  407172:	4641      	mov	r1, r8
  407174:	4648      	mov	r0, r9
  407176:	f7ff fc1d 	bl	4069b4 <quorem>
  40717a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40717e:	f805 ab01 	strb.w	sl, [r5], #1
  407182:	eba5 030b 	sub.w	r3, r5, fp
  407186:	42bb      	cmp	r3, r7
  407188:	f04f 020a 	mov.w	r2, #10
  40718c:	f04f 0300 	mov.w	r3, #0
  407190:	4649      	mov	r1, r9
  407192:	4620      	mov	r0, r4
  407194:	dbea      	blt.n	40716c <_dtoa_r+0x68c>
  407196:	9b04      	ldr	r3, [sp, #16]
  407198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40719a:	2a01      	cmp	r2, #1
  40719c:	bfac      	ite	ge
  40719e:	189b      	addge	r3, r3, r2
  4071a0:	3301      	addlt	r3, #1
  4071a2:	461d      	mov	r5, r3
  4071a4:	f04f 0b00 	mov.w	fp, #0
  4071a8:	4649      	mov	r1, r9
  4071aa:	2201      	movs	r2, #1
  4071ac:	4620      	mov	r0, r4
  4071ae:	f001 fb7f 	bl	4088b0 <__lshift>
  4071b2:	4641      	mov	r1, r8
  4071b4:	4681      	mov	r9, r0
  4071b6:	f001 fbcd 	bl	408954 <__mcmp>
  4071ba:	2800      	cmp	r0, #0
  4071bc:	f340 823d 	ble.w	40763a <_dtoa_r+0xb5a>
  4071c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4071c4:	9904      	ldr	r1, [sp, #16]
  4071c6:	1e6b      	subs	r3, r5, #1
  4071c8:	e004      	b.n	4071d4 <_dtoa_r+0x6f4>
  4071ca:	428b      	cmp	r3, r1
  4071cc:	f000 81ae 	beq.w	40752c <_dtoa_r+0xa4c>
  4071d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4071d4:	2a39      	cmp	r2, #57	; 0x39
  4071d6:	f103 0501 	add.w	r5, r3, #1
  4071da:	d0f6      	beq.n	4071ca <_dtoa_r+0x6ea>
  4071dc:	3201      	adds	r2, #1
  4071de:	701a      	strb	r2, [r3, #0]
  4071e0:	4641      	mov	r1, r8
  4071e2:	4620      	mov	r0, r4
  4071e4:	f001 f9de 	bl	4085a4 <_Bfree>
  4071e8:	2e00      	cmp	r6, #0
  4071ea:	f43f ae3d 	beq.w	406e68 <_dtoa_r+0x388>
  4071ee:	f1bb 0f00 	cmp.w	fp, #0
  4071f2:	d005      	beq.n	407200 <_dtoa_r+0x720>
  4071f4:	45b3      	cmp	fp, r6
  4071f6:	d003      	beq.n	407200 <_dtoa_r+0x720>
  4071f8:	4659      	mov	r1, fp
  4071fa:	4620      	mov	r0, r4
  4071fc:	f001 f9d2 	bl	4085a4 <_Bfree>
  407200:	4631      	mov	r1, r6
  407202:	4620      	mov	r0, r4
  407204:	f001 f9ce 	bl	4085a4 <_Bfree>
  407208:	e62e      	b.n	406e68 <_dtoa_r+0x388>
  40720a:	2300      	movs	r3, #0
  40720c:	930b      	str	r3, [sp, #44]	; 0x2c
  40720e:	9b02      	ldr	r3, [sp, #8]
  407210:	9a25      	ldr	r2, [sp, #148]	; 0x94
  407212:	4413      	add	r3, r2
  407214:	930f      	str	r3, [sp, #60]	; 0x3c
  407216:	3301      	adds	r3, #1
  407218:	2b01      	cmp	r3, #1
  40721a:	461f      	mov	r7, r3
  40721c:	461e      	mov	r6, r3
  40721e:	930a      	str	r3, [sp, #40]	; 0x28
  407220:	bfb8      	it	lt
  407222:	2701      	movlt	r7, #1
  407224:	2100      	movs	r1, #0
  407226:	2f17      	cmp	r7, #23
  407228:	6461      	str	r1, [r4, #68]	; 0x44
  40722a:	d90a      	bls.n	407242 <_dtoa_r+0x762>
  40722c:	2201      	movs	r2, #1
  40722e:	2304      	movs	r3, #4
  407230:	005b      	lsls	r3, r3, #1
  407232:	f103 0014 	add.w	r0, r3, #20
  407236:	4287      	cmp	r7, r0
  407238:	4611      	mov	r1, r2
  40723a:	f102 0201 	add.w	r2, r2, #1
  40723e:	d2f7      	bcs.n	407230 <_dtoa_r+0x750>
  407240:	6461      	str	r1, [r4, #68]	; 0x44
  407242:	4620      	mov	r0, r4
  407244:	f001 f988 	bl	408558 <_Balloc>
  407248:	2e0e      	cmp	r6, #14
  40724a:	9004      	str	r0, [sp, #16]
  40724c:	6420      	str	r0, [r4, #64]	; 0x40
  40724e:	f63f ad41 	bhi.w	406cd4 <_dtoa_r+0x1f4>
  407252:	2d00      	cmp	r5, #0
  407254:	f43f ad3e 	beq.w	406cd4 <_dtoa_r+0x1f4>
  407258:	9902      	ldr	r1, [sp, #8]
  40725a:	2900      	cmp	r1, #0
  40725c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  407260:	f340 8202 	ble.w	407668 <_dtoa_r+0xb88>
  407264:	4bb8      	ldr	r3, [pc, #736]	; (407548 <_dtoa_r+0xa68>)
  407266:	f001 020f 	and.w	r2, r1, #15
  40726a:	110d      	asrs	r5, r1, #4
  40726c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  407270:	06e9      	lsls	r1, r5, #27
  407272:	e9d3 6700 	ldrd	r6, r7, [r3]
  407276:	f140 81ae 	bpl.w	4075d6 <_dtoa_r+0xaf6>
  40727a:	4bb4      	ldr	r3, [pc, #720]	; (40754c <_dtoa_r+0xa6c>)
  40727c:	4650      	mov	r0, sl
  40727e:	4659      	mov	r1, fp
  407280:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  407284:	f002 fbaa 	bl	4099dc <__aeabi_ddiv>
  407288:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40728c:	f005 050f 	and.w	r5, r5, #15
  407290:	f04f 0a03 	mov.w	sl, #3
  407294:	b18d      	cbz	r5, 4072ba <_dtoa_r+0x7da>
  407296:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40754c <_dtoa_r+0xa6c>
  40729a:	07ea      	lsls	r2, r5, #31
  40729c:	d509      	bpl.n	4072b2 <_dtoa_r+0x7d2>
  40729e:	4630      	mov	r0, r6
  4072a0:	4639      	mov	r1, r7
  4072a2:	e9d8 2300 	ldrd	r2, r3, [r8]
  4072a6:	f002 fa6f 	bl	409788 <__aeabi_dmul>
  4072aa:	f10a 0a01 	add.w	sl, sl, #1
  4072ae:	4606      	mov	r6, r0
  4072b0:	460f      	mov	r7, r1
  4072b2:	106d      	asrs	r5, r5, #1
  4072b4:	f108 0808 	add.w	r8, r8, #8
  4072b8:	d1ef      	bne.n	40729a <_dtoa_r+0x7ba>
  4072ba:	463b      	mov	r3, r7
  4072bc:	4632      	mov	r2, r6
  4072be:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4072c2:	f002 fb8b 	bl	4099dc <__aeabi_ddiv>
  4072c6:	4607      	mov	r7, r0
  4072c8:	4688      	mov	r8, r1
  4072ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4072cc:	b143      	cbz	r3, 4072e0 <_dtoa_r+0x800>
  4072ce:	2200      	movs	r2, #0
  4072d0:	4b9f      	ldr	r3, [pc, #636]	; (407550 <_dtoa_r+0xa70>)
  4072d2:	4638      	mov	r0, r7
  4072d4:	4641      	mov	r1, r8
  4072d6:	f002 fcc9 	bl	409c6c <__aeabi_dcmplt>
  4072da:	2800      	cmp	r0, #0
  4072dc:	f040 8286 	bne.w	4077ec <_dtoa_r+0xd0c>
  4072e0:	4650      	mov	r0, sl
  4072e2:	f002 f9eb 	bl	4096bc <__aeabi_i2d>
  4072e6:	463a      	mov	r2, r7
  4072e8:	4643      	mov	r3, r8
  4072ea:	f002 fa4d 	bl	409788 <__aeabi_dmul>
  4072ee:	4b99      	ldr	r3, [pc, #612]	; (407554 <_dtoa_r+0xa74>)
  4072f0:	2200      	movs	r2, #0
  4072f2:	f002 f897 	bl	409424 <__adddf3>
  4072f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4072f8:	4605      	mov	r5, r0
  4072fa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4072fe:	2b00      	cmp	r3, #0
  407300:	f000 813e 	beq.w	407580 <_dtoa_r+0xaa0>
  407304:	9b02      	ldr	r3, [sp, #8]
  407306:	9315      	str	r3, [sp, #84]	; 0x54
  407308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40730a:	9312      	str	r3, [sp, #72]	; 0x48
  40730c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40730e:	2b00      	cmp	r3, #0
  407310:	f000 81fa 	beq.w	407708 <_dtoa_r+0xc28>
  407314:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407316:	4b8c      	ldr	r3, [pc, #560]	; (407548 <_dtoa_r+0xa68>)
  407318:	498f      	ldr	r1, [pc, #572]	; (407558 <_dtoa_r+0xa78>)
  40731a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40731e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  407322:	2000      	movs	r0, #0
  407324:	f002 fb5a 	bl	4099dc <__aeabi_ddiv>
  407328:	462a      	mov	r2, r5
  40732a:	4633      	mov	r3, r6
  40732c:	f002 f878 	bl	409420 <__aeabi_dsub>
  407330:	4682      	mov	sl, r0
  407332:	468b      	mov	fp, r1
  407334:	4638      	mov	r0, r7
  407336:	4641      	mov	r1, r8
  407338:	f002 fcd6 	bl	409ce8 <__aeabi_d2iz>
  40733c:	4605      	mov	r5, r0
  40733e:	f002 f9bd 	bl	4096bc <__aeabi_i2d>
  407342:	4602      	mov	r2, r0
  407344:	460b      	mov	r3, r1
  407346:	4638      	mov	r0, r7
  407348:	4641      	mov	r1, r8
  40734a:	f002 f869 	bl	409420 <__aeabi_dsub>
  40734e:	3530      	adds	r5, #48	; 0x30
  407350:	fa5f f885 	uxtb.w	r8, r5
  407354:	9d04      	ldr	r5, [sp, #16]
  407356:	4606      	mov	r6, r0
  407358:	460f      	mov	r7, r1
  40735a:	f885 8000 	strb.w	r8, [r5]
  40735e:	4602      	mov	r2, r0
  407360:	460b      	mov	r3, r1
  407362:	4650      	mov	r0, sl
  407364:	4659      	mov	r1, fp
  407366:	3501      	adds	r5, #1
  407368:	f002 fc9e 	bl	409ca8 <__aeabi_dcmpgt>
  40736c:	2800      	cmp	r0, #0
  40736e:	d154      	bne.n	40741a <_dtoa_r+0x93a>
  407370:	4632      	mov	r2, r6
  407372:	463b      	mov	r3, r7
  407374:	2000      	movs	r0, #0
  407376:	4976      	ldr	r1, [pc, #472]	; (407550 <_dtoa_r+0xa70>)
  407378:	f002 f852 	bl	409420 <__aeabi_dsub>
  40737c:	4602      	mov	r2, r0
  40737e:	460b      	mov	r3, r1
  407380:	4650      	mov	r0, sl
  407382:	4659      	mov	r1, fp
  407384:	f002 fc90 	bl	409ca8 <__aeabi_dcmpgt>
  407388:	2800      	cmp	r0, #0
  40738a:	f040 8270 	bne.w	40786e <_dtoa_r+0xd8e>
  40738e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  407390:	2a01      	cmp	r2, #1
  407392:	f000 8111 	beq.w	4075b8 <_dtoa_r+0xad8>
  407396:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407398:	9a04      	ldr	r2, [sp, #16]
  40739a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40739e:	4413      	add	r3, r2
  4073a0:	4699      	mov	r9, r3
  4073a2:	e00d      	b.n	4073c0 <_dtoa_r+0x8e0>
  4073a4:	2000      	movs	r0, #0
  4073a6:	496a      	ldr	r1, [pc, #424]	; (407550 <_dtoa_r+0xa70>)
  4073a8:	f002 f83a 	bl	409420 <__aeabi_dsub>
  4073ac:	4652      	mov	r2, sl
  4073ae:	465b      	mov	r3, fp
  4073b0:	f002 fc5c 	bl	409c6c <__aeabi_dcmplt>
  4073b4:	2800      	cmp	r0, #0
  4073b6:	f040 8258 	bne.w	40786a <_dtoa_r+0xd8a>
  4073ba:	454d      	cmp	r5, r9
  4073bc:	f000 80fa 	beq.w	4075b4 <_dtoa_r+0xad4>
  4073c0:	4650      	mov	r0, sl
  4073c2:	4659      	mov	r1, fp
  4073c4:	2200      	movs	r2, #0
  4073c6:	4b65      	ldr	r3, [pc, #404]	; (40755c <_dtoa_r+0xa7c>)
  4073c8:	f002 f9de 	bl	409788 <__aeabi_dmul>
  4073cc:	2200      	movs	r2, #0
  4073ce:	4b63      	ldr	r3, [pc, #396]	; (40755c <_dtoa_r+0xa7c>)
  4073d0:	4682      	mov	sl, r0
  4073d2:	468b      	mov	fp, r1
  4073d4:	4630      	mov	r0, r6
  4073d6:	4639      	mov	r1, r7
  4073d8:	f002 f9d6 	bl	409788 <__aeabi_dmul>
  4073dc:	460f      	mov	r7, r1
  4073de:	4606      	mov	r6, r0
  4073e0:	f002 fc82 	bl	409ce8 <__aeabi_d2iz>
  4073e4:	4680      	mov	r8, r0
  4073e6:	f002 f969 	bl	4096bc <__aeabi_i2d>
  4073ea:	4602      	mov	r2, r0
  4073ec:	460b      	mov	r3, r1
  4073ee:	4630      	mov	r0, r6
  4073f0:	4639      	mov	r1, r7
  4073f2:	f002 f815 	bl	409420 <__aeabi_dsub>
  4073f6:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4073fa:	fa5f f888 	uxtb.w	r8, r8
  4073fe:	4652      	mov	r2, sl
  407400:	465b      	mov	r3, fp
  407402:	f805 8b01 	strb.w	r8, [r5], #1
  407406:	4606      	mov	r6, r0
  407408:	460f      	mov	r7, r1
  40740a:	f002 fc2f 	bl	409c6c <__aeabi_dcmplt>
  40740e:	4632      	mov	r2, r6
  407410:	463b      	mov	r3, r7
  407412:	2800      	cmp	r0, #0
  407414:	d0c6      	beq.n	4073a4 <_dtoa_r+0x8c4>
  407416:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40741a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40741c:	9302      	str	r3, [sp, #8]
  40741e:	e523      	b.n	406e68 <_dtoa_r+0x388>
  407420:	2300      	movs	r3, #0
  407422:	930b      	str	r3, [sp, #44]	; 0x2c
  407424:	9b25      	ldr	r3, [sp, #148]	; 0x94
  407426:	2b00      	cmp	r3, #0
  407428:	f340 80dc 	ble.w	4075e4 <_dtoa_r+0xb04>
  40742c:	461f      	mov	r7, r3
  40742e:	461e      	mov	r6, r3
  407430:	930f      	str	r3, [sp, #60]	; 0x3c
  407432:	930a      	str	r3, [sp, #40]	; 0x28
  407434:	e6f6      	b.n	407224 <_dtoa_r+0x744>
  407436:	2301      	movs	r3, #1
  407438:	930b      	str	r3, [sp, #44]	; 0x2c
  40743a:	e7f3      	b.n	407424 <_dtoa_r+0x944>
  40743c:	f1ba 0f00 	cmp.w	sl, #0
  407440:	f47f ada8 	bne.w	406f94 <_dtoa_r+0x4b4>
  407444:	f3cb 0313 	ubfx	r3, fp, #0, #20
  407448:	2b00      	cmp	r3, #0
  40744a:	f47f adba 	bne.w	406fc2 <_dtoa_r+0x4e2>
  40744e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  407452:	0d3f      	lsrs	r7, r7, #20
  407454:	053f      	lsls	r7, r7, #20
  407456:	2f00      	cmp	r7, #0
  407458:	f000 820d 	beq.w	407876 <_dtoa_r+0xd96>
  40745c:	9b08      	ldr	r3, [sp, #32]
  40745e:	3301      	adds	r3, #1
  407460:	9308      	str	r3, [sp, #32]
  407462:	9b06      	ldr	r3, [sp, #24]
  407464:	3301      	adds	r3, #1
  407466:	9306      	str	r3, [sp, #24]
  407468:	2301      	movs	r3, #1
  40746a:	930c      	str	r3, [sp, #48]	; 0x30
  40746c:	e5ab      	b.n	406fc6 <_dtoa_r+0x4e6>
  40746e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407470:	2b00      	cmp	r3, #0
  407472:	f73f ac42 	bgt.w	406cfa <_dtoa_r+0x21a>
  407476:	f040 8221 	bne.w	4078bc <_dtoa_r+0xddc>
  40747a:	2200      	movs	r2, #0
  40747c:	4b38      	ldr	r3, [pc, #224]	; (407560 <_dtoa_r+0xa80>)
  40747e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  407482:	f002 f981 	bl	409788 <__aeabi_dmul>
  407486:	4652      	mov	r2, sl
  407488:	465b      	mov	r3, fp
  40748a:	f002 fc03 	bl	409c94 <__aeabi_dcmpge>
  40748e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  407492:	4646      	mov	r6, r8
  407494:	2800      	cmp	r0, #0
  407496:	d041      	beq.n	40751c <_dtoa_r+0xa3c>
  407498:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40749a:	9d04      	ldr	r5, [sp, #16]
  40749c:	43db      	mvns	r3, r3
  40749e:	9302      	str	r3, [sp, #8]
  4074a0:	4641      	mov	r1, r8
  4074a2:	4620      	mov	r0, r4
  4074a4:	f001 f87e 	bl	4085a4 <_Bfree>
  4074a8:	2e00      	cmp	r6, #0
  4074aa:	f43f acdd 	beq.w	406e68 <_dtoa_r+0x388>
  4074ae:	e6a7      	b.n	407200 <_dtoa_r+0x720>
  4074b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4074b2:	4649      	mov	r1, r9
  4074b4:	4620      	mov	r0, r4
  4074b6:	f001 f9ab 	bl	408810 <__pow5mult>
  4074ba:	4681      	mov	r9, r0
  4074bc:	e558      	b.n	406f70 <_dtoa_r+0x490>
  4074be:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4074c0:	2a00      	cmp	r2, #0
  4074c2:	f000 8187 	beq.w	4077d4 <_dtoa_r+0xcf4>
  4074c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4074ca:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4074cc:	9d08      	ldr	r5, [sp, #32]
  4074ce:	e4f2      	b.n	406eb6 <_dtoa_r+0x3d6>
  4074d0:	f1ba 0f00 	cmp.w	sl, #0
  4074d4:	f47f ad75 	bne.w	406fc2 <_dtoa_r+0x4e2>
  4074d8:	e7b4      	b.n	407444 <_dtoa_r+0x964>
  4074da:	f001 f86d 	bl	4085b8 <__multadd>
  4074de:	4647      	mov	r7, r8
  4074e0:	4606      	mov	r6, r0
  4074e2:	4683      	mov	fp, r0
  4074e4:	e5be      	b.n	407064 <_dtoa_r+0x584>
  4074e6:	4601      	mov	r1, r0
  4074e8:	4620      	mov	r0, r4
  4074ea:	9306      	str	r3, [sp, #24]
  4074ec:	f001 f85a 	bl	4085a4 <_Bfree>
  4074f0:	2201      	movs	r2, #1
  4074f2:	9b06      	ldr	r3, [sp, #24]
  4074f4:	e5e0      	b.n	4070b8 <_dtoa_r+0x5d8>
  4074f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4074f8:	2b02      	cmp	r3, #2
  4074fa:	f77f ad96 	ble.w	40702a <_dtoa_r+0x54a>
  4074fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  407500:	2b00      	cmp	r3, #0
  407502:	d1c9      	bne.n	407498 <_dtoa_r+0x9b8>
  407504:	4641      	mov	r1, r8
  407506:	2205      	movs	r2, #5
  407508:	4620      	mov	r0, r4
  40750a:	f001 f855 	bl	4085b8 <__multadd>
  40750e:	4601      	mov	r1, r0
  407510:	4680      	mov	r8, r0
  407512:	4648      	mov	r0, r9
  407514:	f001 fa1e 	bl	408954 <__mcmp>
  407518:	2800      	cmp	r0, #0
  40751a:	ddbd      	ble.n	407498 <_dtoa_r+0x9b8>
  40751c:	9a02      	ldr	r2, [sp, #8]
  40751e:	9904      	ldr	r1, [sp, #16]
  407520:	2331      	movs	r3, #49	; 0x31
  407522:	3201      	adds	r2, #1
  407524:	9202      	str	r2, [sp, #8]
  407526:	700b      	strb	r3, [r1, #0]
  407528:	1c4d      	adds	r5, r1, #1
  40752a:	e7b9      	b.n	4074a0 <_dtoa_r+0x9c0>
  40752c:	9a02      	ldr	r2, [sp, #8]
  40752e:	3201      	adds	r2, #1
  407530:	9202      	str	r2, [sp, #8]
  407532:	9a04      	ldr	r2, [sp, #16]
  407534:	2331      	movs	r3, #49	; 0x31
  407536:	7013      	strb	r3, [r2, #0]
  407538:	e652      	b.n	4071e0 <_dtoa_r+0x700>
  40753a:	2301      	movs	r3, #1
  40753c:	930b      	str	r3, [sp, #44]	; 0x2c
  40753e:	e666      	b.n	40720e <_dtoa_r+0x72e>
  407540:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  407544:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  407546:	e48f      	b.n	406e68 <_dtoa_r+0x388>
  407548:	0040a278 	.word	0x0040a278
  40754c:	0040a250 	.word	0x0040a250
  407550:	3ff00000 	.word	0x3ff00000
  407554:	401c0000 	.word	0x401c0000
  407558:	3fe00000 	.word	0x3fe00000
  40755c:	40240000 	.word	0x40240000
  407560:	40140000 	.word	0x40140000
  407564:	4650      	mov	r0, sl
  407566:	f002 f8a9 	bl	4096bc <__aeabi_i2d>
  40756a:	463a      	mov	r2, r7
  40756c:	4643      	mov	r3, r8
  40756e:	f002 f90b 	bl	409788 <__aeabi_dmul>
  407572:	2200      	movs	r2, #0
  407574:	4bc1      	ldr	r3, [pc, #772]	; (40787c <_dtoa_r+0xd9c>)
  407576:	f001 ff55 	bl	409424 <__adddf3>
  40757a:	4605      	mov	r5, r0
  40757c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407580:	4641      	mov	r1, r8
  407582:	2200      	movs	r2, #0
  407584:	4bbe      	ldr	r3, [pc, #760]	; (407880 <_dtoa_r+0xda0>)
  407586:	4638      	mov	r0, r7
  407588:	f001 ff4a 	bl	409420 <__aeabi_dsub>
  40758c:	462a      	mov	r2, r5
  40758e:	4633      	mov	r3, r6
  407590:	4682      	mov	sl, r0
  407592:	468b      	mov	fp, r1
  407594:	f002 fb88 	bl	409ca8 <__aeabi_dcmpgt>
  407598:	4680      	mov	r8, r0
  40759a:	2800      	cmp	r0, #0
  40759c:	f040 8110 	bne.w	4077c0 <_dtoa_r+0xce0>
  4075a0:	462a      	mov	r2, r5
  4075a2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4075a6:	4650      	mov	r0, sl
  4075a8:	4659      	mov	r1, fp
  4075aa:	f002 fb5f 	bl	409c6c <__aeabi_dcmplt>
  4075ae:	b118      	cbz	r0, 4075b8 <_dtoa_r+0xad8>
  4075b0:	4646      	mov	r6, r8
  4075b2:	e771      	b.n	407498 <_dtoa_r+0x9b8>
  4075b4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4075b8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4075bc:	f7ff bb8a 	b.w	406cd4 <_dtoa_r+0x1f4>
  4075c0:	9804      	ldr	r0, [sp, #16]
  4075c2:	f7ff babb 	b.w	406b3c <_dtoa_r+0x5c>
  4075c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4075c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4075ca:	970c      	str	r7, [sp, #48]	; 0x30
  4075cc:	1afb      	subs	r3, r7, r3
  4075ce:	441a      	add	r2, r3
  4075d0:	920d      	str	r2, [sp, #52]	; 0x34
  4075d2:	2700      	movs	r7, #0
  4075d4:	e469      	b.n	406eaa <_dtoa_r+0x3ca>
  4075d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  4075da:	f04f 0a02 	mov.w	sl, #2
  4075de:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4075e2:	e657      	b.n	407294 <_dtoa_r+0x7b4>
  4075e4:	2100      	movs	r1, #0
  4075e6:	2301      	movs	r3, #1
  4075e8:	6461      	str	r1, [r4, #68]	; 0x44
  4075ea:	4620      	mov	r0, r4
  4075ec:	9325      	str	r3, [sp, #148]	; 0x94
  4075ee:	f000 ffb3 	bl	408558 <_Balloc>
  4075f2:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4075f4:	9004      	str	r0, [sp, #16]
  4075f6:	6420      	str	r0, [r4, #64]	; 0x40
  4075f8:	930a      	str	r3, [sp, #40]	; 0x28
  4075fa:	930f      	str	r3, [sp, #60]	; 0x3c
  4075fc:	e629      	b.n	407252 <_dtoa_r+0x772>
  4075fe:	2a00      	cmp	r2, #0
  407600:	46d0      	mov	r8, sl
  407602:	f8cd b018 	str.w	fp, [sp, #24]
  407606:	469a      	mov	sl, r3
  407608:	dd11      	ble.n	40762e <_dtoa_r+0xb4e>
  40760a:	4649      	mov	r1, r9
  40760c:	2201      	movs	r2, #1
  40760e:	4620      	mov	r0, r4
  407610:	f001 f94e 	bl	4088b0 <__lshift>
  407614:	4641      	mov	r1, r8
  407616:	4681      	mov	r9, r0
  407618:	f001 f99c 	bl	408954 <__mcmp>
  40761c:	2800      	cmp	r0, #0
  40761e:	f340 8146 	ble.w	4078ae <_dtoa_r+0xdce>
  407622:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  407626:	f000 8106 	beq.w	407836 <_dtoa_r+0xd56>
  40762a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40762e:	46b3      	mov	fp, r6
  407630:	f887 a000 	strb.w	sl, [r7]
  407634:	1c7d      	adds	r5, r7, #1
  407636:	9e06      	ldr	r6, [sp, #24]
  407638:	e5d2      	b.n	4071e0 <_dtoa_r+0x700>
  40763a:	d104      	bne.n	407646 <_dtoa_r+0xb66>
  40763c:	f01a 0f01 	tst.w	sl, #1
  407640:	d001      	beq.n	407646 <_dtoa_r+0xb66>
  407642:	e5bd      	b.n	4071c0 <_dtoa_r+0x6e0>
  407644:	4615      	mov	r5, r2
  407646:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40764a:	2b30      	cmp	r3, #48	; 0x30
  40764c:	f105 32ff 	add.w	r2, r5, #4294967295
  407650:	d0f8      	beq.n	407644 <_dtoa_r+0xb64>
  407652:	e5c5      	b.n	4071e0 <_dtoa_r+0x700>
  407654:	9904      	ldr	r1, [sp, #16]
  407656:	2230      	movs	r2, #48	; 0x30
  407658:	700a      	strb	r2, [r1, #0]
  40765a:	9a02      	ldr	r2, [sp, #8]
  40765c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  407660:	3201      	adds	r2, #1
  407662:	9202      	str	r2, [sp, #8]
  407664:	f7ff bbfc 	b.w	406e60 <_dtoa_r+0x380>
  407668:	f000 80bb 	beq.w	4077e2 <_dtoa_r+0xd02>
  40766c:	9b02      	ldr	r3, [sp, #8]
  40766e:	425d      	negs	r5, r3
  407670:	4b84      	ldr	r3, [pc, #528]	; (407884 <_dtoa_r+0xda4>)
  407672:	f005 020f 	and.w	r2, r5, #15
  407676:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40767a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40767e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  407682:	f002 f881 	bl	409788 <__aeabi_dmul>
  407686:	112d      	asrs	r5, r5, #4
  407688:	4607      	mov	r7, r0
  40768a:	4688      	mov	r8, r1
  40768c:	f000 812c 	beq.w	4078e8 <_dtoa_r+0xe08>
  407690:	4e7d      	ldr	r6, [pc, #500]	; (407888 <_dtoa_r+0xda8>)
  407692:	f04f 0a02 	mov.w	sl, #2
  407696:	07eb      	lsls	r3, r5, #31
  407698:	d509      	bpl.n	4076ae <_dtoa_r+0xbce>
  40769a:	4638      	mov	r0, r7
  40769c:	4641      	mov	r1, r8
  40769e:	e9d6 2300 	ldrd	r2, r3, [r6]
  4076a2:	f002 f871 	bl	409788 <__aeabi_dmul>
  4076a6:	f10a 0a01 	add.w	sl, sl, #1
  4076aa:	4607      	mov	r7, r0
  4076ac:	4688      	mov	r8, r1
  4076ae:	106d      	asrs	r5, r5, #1
  4076b0:	f106 0608 	add.w	r6, r6, #8
  4076b4:	d1ef      	bne.n	407696 <_dtoa_r+0xbb6>
  4076b6:	e608      	b.n	4072ca <_dtoa_r+0x7ea>
  4076b8:	6871      	ldr	r1, [r6, #4]
  4076ba:	4620      	mov	r0, r4
  4076bc:	f000 ff4c 	bl	408558 <_Balloc>
  4076c0:	6933      	ldr	r3, [r6, #16]
  4076c2:	3302      	adds	r3, #2
  4076c4:	009a      	lsls	r2, r3, #2
  4076c6:	4605      	mov	r5, r0
  4076c8:	f106 010c 	add.w	r1, r6, #12
  4076cc:	300c      	adds	r0, #12
  4076ce:	f7fc fd37 	bl	404140 <memcpy>
  4076d2:	4629      	mov	r1, r5
  4076d4:	2201      	movs	r2, #1
  4076d6:	4620      	mov	r0, r4
  4076d8:	f001 f8ea 	bl	4088b0 <__lshift>
  4076dc:	9006      	str	r0, [sp, #24]
  4076de:	e4b5      	b.n	40704c <_dtoa_r+0x56c>
  4076e0:	2b39      	cmp	r3, #57	; 0x39
  4076e2:	f8cd b018 	str.w	fp, [sp, #24]
  4076e6:	46d0      	mov	r8, sl
  4076e8:	f000 80a5 	beq.w	407836 <_dtoa_r+0xd56>
  4076ec:	f103 0a01 	add.w	sl, r3, #1
  4076f0:	46b3      	mov	fp, r6
  4076f2:	f887 a000 	strb.w	sl, [r7]
  4076f6:	1c7d      	adds	r5, r7, #1
  4076f8:	9e06      	ldr	r6, [sp, #24]
  4076fa:	e571      	b.n	4071e0 <_dtoa_r+0x700>
  4076fc:	465a      	mov	r2, fp
  4076fe:	46d0      	mov	r8, sl
  407700:	46b3      	mov	fp, r6
  407702:	469a      	mov	sl, r3
  407704:	4616      	mov	r6, r2
  407706:	e54f      	b.n	4071a8 <_dtoa_r+0x6c8>
  407708:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40770a:	495e      	ldr	r1, [pc, #376]	; (407884 <_dtoa_r+0xda4>)
  40770c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  407710:	462a      	mov	r2, r5
  407712:	4633      	mov	r3, r6
  407714:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  407718:	f002 f836 	bl	409788 <__aeabi_dmul>
  40771c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  407720:	4638      	mov	r0, r7
  407722:	4641      	mov	r1, r8
  407724:	f002 fae0 	bl	409ce8 <__aeabi_d2iz>
  407728:	4605      	mov	r5, r0
  40772a:	f001 ffc7 	bl	4096bc <__aeabi_i2d>
  40772e:	460b      	mov	r3, r1
  407730:	4602      	mov	r2, r0
  407732:	4641      	mov	r1, r8
  407734:	4638      	mov	r0, r7
  407736:	f001 fe73 	bl	409420 <__aeabi_dsub>
  40773a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40773c:	460f      	mov	r7, r1
  40773e:	9904      	ldr	r1, [sp, #16]
  407740:	3530      	adds	r5, #48	; 0x30
  407742:	2b01      	cmp	r3, #1
  407744:	700d      	strb	r5, [r1, #0]
  407746:	4606      	mov	r6, r0
  407748:	f101 0501 	add.w	r5, r1, #1
  40774c:	d026      	beq.n	40779c <_dtoa_r+0xcbc>
  40774e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  407750:	9a04      	ldr	r2, [sp, #16]
  407752:	f8df b13c 	ldr.w	fp, [pc, #316]	; 407890 <_dtoa_r+0xdb0>
  407756:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40775a:	4413      	add	r3, r2
  40775c:	f04f 0a00 	mov.w	sl, #0
  407760:	4699      	mov	r9, r3
  407762:	4652      	mov	r2, sl
  407764:	465b      	mov	r3, fp
  407766:	4630      	mov	r0, r6
  407768:	4639      	mov	r1, r7
  40776a:	f002 f80d 	bl	409788 <__aeabi_dmul>
  40776e:	460f      	mov	r7, r1
  407770:	4606      	mov	r6, r0
  407772:	f002 fab9 	bl	409ce8 <__aeabi_d2iz>
  407776:	4680      	mov	r8, r0
  407778:	f001 ffa0 	bl	4096bc <__aeabi_i2d>
  40777c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  407780:	4602      	mov	r2, r0
  407782:	460b      	mov	r3, r1
  407784:	4630      	mov	r0, r6
  407786:	4639      	mov	r1, r7
  407788:	f001 fe4a 	bl	409420 <__aeabi_dsub>
  40778c:	f805 8b01 	strb.w	r8, [r5], #1
  407790:	454d      	cmp	r5, r9
  407792:	4606      	mov	r6, r0
  407794:	460f      	mov	r7, r1
  407796:	d1e4      	bne.n	407762 <_dtoa_r+0xc82>
  407798:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40779c:	4b3b      	ldr	r3, [pc, #236]	; (40788c <_dtoa_r+0xdac>)
  40779e:	2200      	movs	r2, #0
  4077a0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4077a4:	f001 fe3e 	bl	409424 <__adddf3>
  4077a8:	4632      	mov	r2, r6
  4077aa:	463b      	mov	r3, r7
  4077ac:	f002 fa5e 	bl	409c6c <__aeabi_dcmplt>
  4077b0:	2800      	cmp	r0, #0
  4077b2:	d046      	beq.n	407842 <_dtoa_r+0xd62>
  4077b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4077b6:	9302      	str	r3, [sp, #8]
  4077b8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4077bc:	f7ff bb43 	b.w	406e46 <_dtoa_r+0x366>
  4077c0:	f04f 0800 	mov.w	r8, #0
  4077c4:	4646      	mov	r6, r8
  4077c6:	e6a9      	b.n	40751c <_dtoa_r+0xa3c>
  4077c8:	9b08      	ldr	r3, [sp, #32]
  4077ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4077cc:	1a9d      	subs	r5, r3, r2
  4077ce:	2300      	movs	r3, #0
  4077d0:	f7ff bb71 	b.w	406eb6 <_dtoa_r+0x3d6>
  4077d4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4077d6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4077d8:	9d08      	ldr	r5, [sp, #32]
  4077da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4077de:	f7ff bb6a 	b.w	406eb6 <_dtoa_r+0x3d6>
  4077e2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4077e6:	f04f 0a02 	mov.w	sl, #2
  4077ea:	e56e      	b.n	4072ca <_dtoa_r+0x7ea>
  4077ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4077ee:	2b00      	cmp	r3, #0
  4077f0:	f43f aeb8 	beq.w	407564 <_dtoa_r+0xa84>
  4077f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4077f6:	2b00      	cmp	r3, #0
  4077f8:	f77f aede 	ble.w	4075b8 <_dtoa_r+0xad8>
  4077fc:	2200      	movs	r2, #0
  4077fe:	4b24      	ldr	r3, [pc, #144]	; (407890 <_dtoa_r+0xdb0>)
  407800:	4638      	mov	r0, r7
  407802:	4641      	mov	r1, r8
  407804:	f001 ffc0 	bl	409788 <__aeabi_dmul>
  407808:	4607      	mov	r7, r0
  40780a:	4688      	mov	r8, r1
  40780c:	f10a 0001 	add.w	r0, sl, #1
  407810:	f001 ff54 	bl	4096bc <__aeabi_i2d>
  407814:	463a      	mov	r2, r7
  407816:	4643      	mov	r3, r8
  407818:	f001 ffb6 	bl	409788 <__aeabi_dmul>
  40781c:	2200      	movs	r2, #0
  40781e:	4b17      	ldr	r3, [pc, #92]	; (40787c <_dtoa_r+0xd9c>)
  407820:	f001 fe00 	bl	409424 <__adddf3>
  407824:	9a02      	ldr	r2, [sp, #8]
  407826:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  407828:	9312      	str	r3, [sp, #72]	; 0x48
  40782a:	3a01      	subs	r2, #1
  40782c:	4605      	mov	r5, r0
  40782e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  407832:	9215      	str	r2, [sp, #84]	; 0x54
  407834:	e56a      	b.n	40730c <_dtoa_r+0x82c>
  407836:	2239      	movs	r2, #57	; 0x39
  407838:	46b3      	mov	fp, r6
  40783a:	703a      	strb	r2, [r7, #0]
  40783c:	9e06      	ldr	r6, [sp, #24]
  40783e:	1c7d      	adds	r5, r7, #1
  407840:	e4c0      	b.n	4071c4 <_dtoa_r+0x6e4>
  407842:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  407846:	2000      	movs	r0, #0
  407848:	4910      	ldr	r1, [pc, #64]	; (40788c <_dtoa_r+0xdac>)
  40784a:	f001 fde9 	bl	409420 <__aeabi_dsub>
  40784e:	4632      	mov	r2, r6
  407850:	463b      	mov	r3, r7
  407852:	f002 fa29 	bl	409ca8 <__aeabi_dcmpgt>
  407856:	b908      	cbnz	r0, 40785c <_dtoa_r+0xd7c>
  407858:	e6ae      	b.n	4075b8 <_dtoa_r+0xad8>
  40785a:	4615      	mov	r5, r2
  40785c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  407860:	2b30      	cmp	r3, #48	; 0x30
  407862:	f105 32ff 	add.w	r2, r5, #4294967295
  407866:	d0f8      	beq.n	40785a <_dtoa_r+0xd7a>
  407868:	e5d7      	b.n	40741a <_dtoa_r+0x93a>
  40786a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40786e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  407870:	9302      	str	r3, [sp, #8]
  407872:	f7ff bae8 	b.w	406e46 <_dtoa_r+0x366>
  407876:	970c      	str	r7, [sp, #48]	; 0x30
  407878:	f7ff bba5 	b.w	406fc6 <_dtoa_r+0x4e6>
  40787c:	401c0000 	.word	0x401c0000
  407880:	40140000 	.word	0x40140000
  407884:	0040a278 	.word	0x0040a278
  407888:	0040a250 	.word	0x0040a250
  40788c:	3fe00000 	.word	0x3fe00000
  407890:	40240000 	.word	0x40240000
  407894:	2b39      	cmp	r3, #57	; 0x39
  407896:	f8cd b018 	str.w	fp, [sp, #24]
  40789a:	46d0      	mov	r8, sl
  40789c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4078a0:	469a      	mov	sl, r3
  4078a2:	d0c8      	beq.n	407836 <_dtoa_r+0xd56>
  4078a4:	f1bb 0f00 	cmp.w	fp, #0
  4078a8:	f73f aebf 	bgt.w	40762a <_dtoa_r+0xb4a>
  4078ac:	e6bf      	b.n	40762e <_dtoa_r+0xb4e>
  4078ae:	f47f aebe 	bne.w	40762e <_dtoa_r+0xb4e>
  4078b2:	f01a 0f01 	tst.w	sl, #1
  4078b6:	f43f aeba 	beq.w	40762e <_dtoa_r+0xb4e>
  4078ba:	e6b2      	b.n	407622 <_dtoa_r+0xb42>
  4078bc:	f04f 0800 	mov.w	r8, #0
  4078c0:	4646      	mov	r6, r8
  4078c2:	e5e9      	b.n	407498 <_dtoa_r+0x9b8>
  4078c4:	4631      	mov	r1, r6
  4078c6:	2300      	movs	r3, #0
  4078c8:	220a      	movs	r2, #10
  4078ca:	4620      	mov	r0, r4
  4078cc:	f000 fe74 	bl	4085b8 <__multadd>
  4078d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4078d2:	2b00      	cmp	r3, #0
  4078d4:	4606      	mov	r6, r0
  4078d6:	dd0a      	ble.n	4078ee <_dtoa_r+0xe0e>
  4078d8:	930a      	str	r3, [sp, #40]	; 0x28
  4078da:	f7ff bbaa 	b.w	407032 <_dtoa_r+0x552>
  4078de:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4078e0:	2b02      	cmp	r3, #2
  4078e2:	dc23      	bgt.n	40792c <_dtoa_r+0xe4c>
  4078e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4078e6:	e43b      	b.n	407160 <_dtoa_r+0x680>
  4078e8:	f04f 0a02 	mov.w	sl, #2
  4078ec:	e4ed      	b.n	4072ca <_dtoa_r+0x7ea>
  4078ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4078f0:	2b02      	cmp	r3, #2
  4078f2:	dc1b      	bgt.n	40792c <_dtoa_r+0xe4c>
  4078f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4078f6:	e7ef      	b.n	4078d8 <_dtoa_r+0xdf8>
  4078f8:	2500      	movs	r5, #0
  4078fa:	6465      	str	r5, [r4, #68]	; 0x44
  4078fc:	4629      	mov	r1, r5
  4078fe:	4620      	mov	r0, r4
  407900:	f000 fe2a 	bl	408558 <_Balloc>
  407904:	f04f 33ff 	mov.w	r3, #4294967295
  407908:	930a      	str	r3, [sp, #40]	; 0x28
  40790a:	930f      	str	r3, [sp, #60]	; 0x3c
  40790c:	2301      	movs	r3, #1
  40790e:	9004      	str	r0, [sp, #16]
  407910:	9525      	str	r5, [sp, #148]	; 0x94
  407912:	6420      	str	r0, [r4, #64]	; 0x40
  407914:	930b      	str	r3, [sp, #44]	; 0x2c
  407916:	f7ff b9dd 	b.w	406cd4 <_dtoa_r+0x1f4>
  40791a:	2501      	movs	r5, #1
  40791c:	f7ff b9a5 	b.w	406c6a <_dtoa_r+0x18a>
  407920:	f43f ab69 	beq.w	406ff6 <_dtoa_r+0x516>
  407924:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  407928:	f7ff bbf9 	b.w	40711e <_dtoa_r+0x63e>
  40792c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40792e:	930a      	str	r3, [sp, #40]	; 0x28
  407930:	e5e5      	b.n	4074fe <_dtoa_r+0xa1e>
  407932:	bf00      	nop

00407934 <__sflush_r>:
  407934:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  407938:	b29a      	uxth	r2, r3
  40793a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40793e:	460d      	mov	r5, r1
  407940:	0711      	lsls	r1, r2, #28
  407942:	4680      	mov	r8, r0
  407944:	d43a      	bmi.n	4079bc <__sflush_r+0x88>
  407946:	686a      	ldr	r2, [r5, #4]
  407948:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  40794c:	2a00      	cmp	r2, #0
  40794e:	81ab      	strh	r3, [r5, #12]
  407950:	dd6f      	ble.n	407a32 <__sflush_r+0xfe>
  407952:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407954:	2c00      	cmp	r4, #0
  407956:	d049      	beq.n	4079ec <__sflush_r+0xb8>
  407958:	2200      	movs	r2, #0
  40795a:	b29b      	uxth	r3, r3
  40795c:	f8d8 6000 	ldr.w	r6, [r8]
  407960:	f8c8 2000 	str.w	r2, [r8]
  407964:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  407968:	d067      	beq.n	407a3a <__sflush_r+0x106>
  40796a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  40796c:	075f      	lsls	r7, r3, #29
  40796e:	d505      	bpl.n	40797c <__sflush_r+0x48>
  407970:	6869      	ldr	r1, [r5, #4]
  407972:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  407974:	1a52      	subs	r2, r2, r1
  407976:	b10b      	cbz	r3, 40797c <__sflush_r+0x48>
  407978:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  40797a:	1ad2      	subs	r2, r2, r3
  40797c:	2300      	movs	r3, #0
  40797e:	69e9      	ldr	r1, [r5, #28]
  407980:	4640      	mov	r0, r8
  407982:	47a0      	blx	r4
  407984:	1c44      	adds	r4, r0, #1
  407986:	d03c      	beq.n	407a02 <__sflush_r+0xce>
  407988:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  40798c:	692a      	ldr	r2, [r5, #16]
  40798e:	602a      	str	r2, [r5, #0]
  407990:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  407994:	2200      	movs	r2, #0
  407996:	81ab      	strh	r3, [r5, #12]
  407998:	04db      	lsls	r3, r3, #19
  40799a:	606a      	str	r2, [r5, #4]
  40799c:	d447      	bmi.n	407a2e <__sflush_r+0xfa>
  40799e:	6b29      	ldr	r1, [r5, #48]	; 0x30
  4079a0:	f8c8 6000 	str.w	r6, [r8]
  4079a4:	b311      	cbz	r1, 4079ec <__sflush_r+0xb8>
  4079a6:	f105 0340 	add.w	r3, r5, #64	; 0x40
  4079aa:	4299      	cmp	r1, r3
  4079ac:	d002      	beq.n	4079b4 <__sflush_r+0x80>
  4079ae:	4640      	mov	r0, r8
  4079b0:	f000 f9de 	bl	407d70 <_free_r>
  4079b4:	2000      	movs	r0, #0
  4079b6:	6328      	str	r0, [r5, #48]	; 0x30
  4079b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4079bc:	692e      	ldr	r6, [r5, #16]
  4079be:	b1ae      	cbz	r6, 4079ec <__sflush_r+0xb8>
  4079c0:	682c      	ldr	r4, [r5, #0]
  4079c2:	602e      	str	r6, [r5, #0]
  4079c4:	0791      	lsls	r1, r2, #30
  4079c6:	bf0c      	ite	eq
  4079c8:	696b      	ldreq	r3, [r5, #20]
  4079ca:	2300      	movne	r3, #0
  4079cc:	1ba4      	subs	r4, r4, r6
  4079ce:	60ab      	str	r3, [r5, #8]
  4079d0:	e00a      	b.n	4079e8 <__sflush_r+0xb4>
  4079d2:	4623      	mov	r3, r4
  4079d4:	4632      	mov	r2, r6
  4079d6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  4079d8:	69e9      	ldr	r1, [r5, #28]
  4079da:	4640      	mov	r0, r8
  4079dc:	47b8      	blx	r7
  4079de:	2800      	cmp	r0, #0
  4079e0:	eba4 0400 	sub.w	r4, r4, r0
  4079e4:	4406      	add	r6, r0
  4079e6:	dd04      	ble.n	4079f2 <__sflush_r+0xbe>
  4079e8:	2c00      	cmp	r4, #0
  4079ea:	dcf2      	bgt.n	4079d2 <__sflush_r+0x9e>
  4079ec:	2000      	movs	r0, #0
  4079ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4079f2:	89ab      	ldrh	r3, [r5, #12]
  4079f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4079f8:	81ab      	strh	r3, [r5, #12]
  4079fa:	f04f 30ff 	mov.w	r0, #4294967295
  4079fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407a02:	f8d8 4000 	ldr.w	r4, [r8]
  407a06:	2c1d      	cmp	r4, #29
  407a08:	d8f3      	bhi.n	4079f2 <__sflush_r+0xbe>
  407a0a:	4b19      	ldr	r3, [pc, #100]	; (407a70 <__sflush_r+0x13c>)
  407a0c:	40e3      	lsrs	r3, r4
  407a0e:	43db      	mvns	r3, r3
  407a10:	f013 0301 	ands.w	r3, r3, #1
  407a14:	d1ed      	bne.n	4079f2 <__sflush_r+0xbe>
  407a16:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  407a1a:	606b      	str	r3, [r5, #4]
  407a1c:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  407a20:	6929      	ldr	r1, [r5, #16]
  407a22:	81ab      	strh	r3, [r5, #12]
  407a24:	04da      	lsls	r2, r3, #19
  407a26:	6029      	str	r1, [r5, #0]
  407a28:	d5b9      	bpl.n	40799e <__sflush_r+0x6a>
  407a2a:	2c00      	cmp	r4, #0
  407a2c:	d1b7      	bne.n	40799e <__sflush_r+0x6a>
  407a2e:	6528      	str	r0, [r5, #80]	; 0x50
  407a30:	e7b5      	b.n	40799e <__sflush_r+0x6a>
  407a32:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  407a34:	2a00      	cmp	r2, #0
  407a36:	dc8c      	bgt.n	407952 <__sflush_r+0x1e>
  407a38:	e7d8      	b.n	4079ec <__sflush_r+0xb8>
  407a3a:	2301      	movs	r3, #1
  407a3c:	69e9      	ldr	r1, [r5, #28]
  407a3e:	4640      	mov	r0, r8
  407a40:	47a0      	blx	r4
  407a42:	1c43      	adds	r3, r0, #1
  407a44:	4602      	mov	r2, r0
  407a46:	d002      	beq.n	407a4e <__sflush_r+0x11a>
  407a48:	89ab      	ldrh	r3, [r5, #12]
  407a4a:	6aac      	ldr	r4, [r5, #40]	; 0x28
  407a4c:	e78e      	b.n	40796c <__sflush_r+0x38>
  407a4e:	f8d8 3000 	ldr.w	r3, [r8]
  407a52:	2b00      	cmp	r3, #0
  407a54:	d0f8      	beq.n	407a48 <__sflush_r+0x114>
  407a56:	2b1d      	cmp	r3, #29
  407a58:	d001      	beq.n	407a5e <__sflush_r+0x12a>
  407a5a:	2b16      	cmp	r3, #22
  407a5c:	d102      	bne.n	407a64 <__sflush_r+0x130>
  407a5e:	f8c8 6000 	str.w	r6, [r8]
  407a62:	e7c3      	b.n	4079ec <__sflush_r+0xb8>
  407a64:	89ab      	ldrh	r3, [r5, #12]
  407a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407a6a:	81ab      	strh	r3, [r5, #12]
  407a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  407a70:	20400001 	.word	0x20400001

00407a74 <_fflush_r>:
  407a74:	b538      	push	{r3, r4, r5, lr}
  407a76:	460d      	mov	r5, r1
  407a78:	4604      	mov	r4, r0
  407a7a:	b108      	cbz	r0, 407a80 <_fflush_r+0xc>
  407a7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  407a7e:	b1bb      	cbz	r3, 407ab0 <_fflush_r+0x3c>
  407a80:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  407a84:	b188      	cbz	r0, 407aaa <_fflush_r+0x36>
  407a86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407a88:	07db      	lsls	r3, r3, #31
  407a8a:	d401      	bmi.n	407a90 <_fflush_r+0x1c>
  407a8c:	0581      	lsls	r1, r0, #22
  407a8e:	d517      	bpl.n	407ac0 <_fflush_r+0x4c>
  407a90:	4620      	mov	r0, r4
  407a92:	4629      	mov	r1, r5
  407a94:	f7ff ff4e 	bl	407934 <__sflush_r>
  407a98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  407a9a:	07da      	lsls	r2, r3, #31
  407a9c:	4604      	mov	r4, r0
  407a9e:	d402      	bmi.n	407aa6 <_fflush_r+0x32>
  407aa0:	89ab      	ldrh	r3, [r5, #12]
  407aa2:	059b      	lsls	r3, r3, #22
  407aa4:	d507      	bpl.n	407ab6 <_fflush_r+0x42>
  407aa6:	4620      	mov	r0, r4
  407aa8:	bd38      	pop	{r3, r4, r5, pc}
  407aaa:	4604      	mov	r4, r0
  407aac:	4620      	mov	r0, r4
  407aae:	bd38      	pop	{r3, r4, r5, pc}
  407ab0:	f000 f838 	bl	407b24 <__sinit>
  407ab4:	e7e4      	b.n	407a80 <_fflush_r+0xc>
  407ab6:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407ab8:	f000 fc04 	bl	4082c4 <__retarget_lock_release_recursive>
  407abc:	4620      	mov	r0, r4
  407abe:	bd38      	pop	{r3, r4, r5, pc}
  407ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
  407ac2:	f000 fbfd 	bl	4082c0 <__retarget_lock_acquire_recursive>
  407ac6:	e7e3      	b.n	407a90 <_fflush_r+0x1c>

00407ac8 <_cleanup_r>:
  407ac8:	4901      	ldr	r1, [pc, #4]	; (407ad0 <_cleanup_r+0x8>)
  407aca:	f000 bbaf 	b.w	40822c <_fwalk_reent>
  407ace:	bf00      	nop
  407ad0:	004092b1 	.word	0x004092b1

00407ad4 <std.isra.0>:
  407ad4:	b510      	push	{r4, lr}
  407ad6:	2300      	movs	r3, #0
  407ad8:	4604      	mov	r4, r0
  407ada:	8181      	strh	r1, [r0, #12]
  407adc:	81c2      	strh	r2, [r0, #14]
  407ade:	6003      	str	r3, [r0, #0]
  407ae0:	6043      	str	r3, [r0, #4]
  407ae2:	6083      	str	r3, [r0, #8]
  407ae4:	6643      	str	r3, [r0, #100]	; 0x64
  407ae6:	6103      	str	r3, [r0, #16]
  407ae8:	6143      	str	r3, [r0, #20]
  407aea:	6183      	str	r3, [r0, #24]
  407aec:	4619      	mov	r1, r3
  407aee:	2208      	movs	r2, #8
  407af0:	305c      	adds	r0, #92	; 0x5c
  407af2:	f7fc fbbf 	bl	404274 <memset>
  407af6:	4807      	ldr	r0, [pc, #28]	; (407b14 <std.isra.0+0x40>)
  407af8:	4907      	ldr	r1, [pc, #28]	; (407b18 <std.isra.0+0x44>)
  407afa:	4a08      	ldr	r2, [pc, #32]	; (407b1c <std.isra.0+0x48>)
  407afc:	4b08      	ldr	r3, [pc, #32]	; (407b20 <std.isra.0+0x4c>)
  407afe:	6220      	str	r0, [r4, #32]
  407b00:	61e4      	str	r4, [r4, #28]
  407b02:	6261      	str	r1, [r4, #36]	; 0x24
  407b04:	62a2      	str	r2, [r4, #40]	; 0x28
  407b06:	62e3      	str	r3, [r4, #44]	; 0x2c
  407b08:	f104 0058 	add.w	r0, r4, #88	; 0x58
  407b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407b10:	f000 bbd2 	b.w	4082b8 <__retarget_lock_init_recursive>
  407b14:	00408e99 	.word	0x00408e99
  407b18:	00408ebd 	.word	0x00408ebd
  407b1c:	00408ef9 	.word	0x00408ef9
  407b20:	00408f19 	.word	0x00408f19

00407b24 <__sinit>:
  407b24:	b510      	push	{r4, lr}
  407b26:	4604      	mov	r4, r0
  407b28:	4812      	ldr	r0, [pc, #72]	; (407b74 <__sinit+0x50>)
  407b2a:	f000 fbc9 	bl	4082c0 <__retarget_lock_acquire_recursive>
  407b2e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  407b30:	b9d2      	cbnz	r2, 407b68 <__sinit+0x44>
  407b32:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  407b36:	4810      	ldr	r0, [pc, #64]	; (407b78 <__sinit+0x54>)
  407b38:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  407b3c:	2103      	movs	r1, #3
  407b3e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  407b42:	63e0      	str	r0, [r4, #60]	; 0x3c
  407b44:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  407b48:	6860      	ldr	r0, [r4, #4]
  407b4a:	2104      	movs	r1, #4
  407b4c:	f7ff ffc2 	bl	407ad4 <std.isra.0>
  407b50:	2201      	movs	r2, #1
  407b52:	2109      	movs	r1, #9
  407b54:	68a0      	ldr	r0, [r4, #8]
  407b56:	f7ff ffbd 	bl	407ad4 <std.isra.0>
  407b5a:	2202      	movs	r2, #2
  407b5c:	2112      	movs	r1, #18
  407b5e:	68e0      	ldr	r0, [r4, #12]
  407b60:	f7ff ffb8 	bl	407ad4 <std.isra.0>
  407b64:	2301      	movs	r3, #1
  407b66:	63a3      	str	r3, [r4, #56]	; 0x38
  407b68:	4802      	ldr	r0, [pc, #8]	; (407b74 <__sinit+0x50>)
  407b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  407b6e:	f000 bba9 	b.w	4082c4 <__retarget_lock_release_recursive>
  407b72:	bf00      	nop
  407b74:	20400d40 	.word	0x20400d40
  407b78:	00407ac9 	.word	0x00407ac9

00407b7c <__sfp_lock_acquire>:
  407b7c:	4801      	ldr	r0, [pc, #4]	; (407b84 <__sfp_lock_acquire+0x8>)
  407b7e:	f000 bb9f 	b.w	4082c0 <__retarget_lock_acquire_recursive>
  407b82:	bf00      	nop
  407b84:	20400d54 	.word	0x20400d54

00407b88 <__sfp_lock_release>:
  407b88:	4801      	ldr	r0, [pc, #4]	; (407b90 <__sfp_lock_release+0x8>)
  407b8a:	f000 bb9b 	b.w	4082c4 <__retarget_lock_release_recursive>
  407b8e:	bf00      	nop
  407b90:	20400d54 	.word	0x20400d54

00407b94 <__libc_fini_array>:
  407b94:	b538      	push	{r3, r4, r5, lr}
  407b96:	4c0a      	ldr	r4, [pc, #40]	; (407bc0 <__libc_fini_array+0x2c>)
  407b98:	4d0a      	ldr	r5, [pc, #40]	; (407bc4 <__libc_fini_array+0x30>)
  407b9a:	1b64      	subs	r4, r4, r5
  407b9c:	10a4      	asrs	r4, r4, #2
  407b9e:	d00a      	beq.n	407bb6 <__libc_fini_array+0x22>
  407ba0:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  407ba4:	3b01      	subs	r3, #1
  407ba6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  407baa:	3c01      	subs	r4, #1
  407bac:	f855 3904 	ldr.w	r3, [r5], #-4
  407bb0:	4798      	blx	r3
  407bb2:	2c00      	cmp	r4, #0
  407bb4:	d1f9      	bne.n	407baa <__libc_fini_array+0x16>
  407bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  407bba:	f002 bc53 	b.w	40a464 <_fini>
  407bbe:	bf00      	nop
  407bc0:	0040a474 	.word	0x0040a474
  407bc4:	0040a470 	.word	0x0040a470

00407bc8 <__fputwc>:
  407bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  407bcc:	b082      	sub	sp, #8
  407bce:	4680      	mov	r8, r0
  407bd0:	4689      	mov	r9, r1
  407bd2:	4614      	mov	r4, r2
  407bd4:	f000 fb54 	bl	408280 <__locale_mb_cur_max>
  407bd8:	2801      	cmp	r0, #1
  407bda:	d036      	beq.n	407c4a <__fputwc+0x82>
  407bdc:	464a      	mov	r2, r9
  407bde:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  407be2:	a901      	add	r1, sp, #4
  407be4:	4640      	mov	r0, r8
  407be6:	f001 fa71 	bl	4090cc <_wcrtomb_r>
  407bea:	1c42      	adds	r2, r0, #1
  407bec:	4606      	mov	r6, r0
  407bee:	d025      	beq.n	407c3c <__fputwc+0x74>
  407bf0:	b3a8      	cbz	r0, 407c5e <__fputwc+0x96>
  407bf2:	f89d e004 	ldrb.w	lr, [sp, #4]
  407bf6:	2500      	movs	r5, #0
  407bf8:	f10d 0a04 	add.w	sl, sp, #4
  407bfc:	e009      	b.n	407c12 <__fputwc+0x4a>
  407bfe:	6823      	ldr	r3, [r4, #0]
  407c00:	1c5a      	adds	r2, r3, #1
  407c02:	6022      	str	r2, [r4, #0]
  407c04:	f883 e000 	strb.w	lr, [r3]
  407c08:	3501      	adds	r5, #1
  407c0a:	42b5      	cmp	r5, r6
  407c0c:	d227      	bcs.n	407c5e <__fputwc+0x96>
  407c0e:	f815 e00a 	ldrb.w	lr, [r5, sl]
  407c12:	68a3      	ldr	r3, [r4, #8]
  407c14:	3b01      	subs	r3, #1
  407c16:	2b00      	cmp	r3, #0
  407c18:	60a3      	str	r3, [r4, #8]
  407c1a:	daf0      	bge.n	407bfe <__fputwc+0x36>
  407c1c:	69a7      	ldr	r7, [r4, #24]
  407c1e:	42bb      	cmp	r3, r7
  407c20:	4671      	mov	r1, lr
  407c22:	4622      	mov	r2, r4
  407c24:	4640      	mov	r0, r8
  407c26:	db02      	blt.n	407c2e <__fputwc+0x66>
  407c28:	f1be 0f0a 	cmp.w	lr, #10
  407c2c:	d1e7      	bne.n	407bfe <__fputwc+0x36>
  407c2e:	f001 f9f5 	bl	40901c <__swbuf_r>
  407c32:	1c43      	adds	r3, r0, #1
  407c34:	d1e8      	bne.n	407c08 <__fputwc+0x40>
  407c36:	b002      	add	sp, #8
  407c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c3c:	89a3      	ldrh	r3, [r4, #12]
  407c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  407c42:	81a3      	strh	r3, [r4, #12]
  407c44:	b002      	add	sp, #8
  407c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c4a:	f109 33ff 	add.w	r3, r9, #4294967295
  407c4e:	2bfe      	cmp	r3, #254	; 0xfe
  407c50:	d8c4      	bhi.n	407bdc <__fputwc+0x14>
  407c52:	fa5f fe89 	uxtb.w	lr, r9
  407c56:	4606      	mov	r6, r0
  407c58:	f88d e004 	strb.w	lr, [sp, #4]
  407c5c:	e7cb      	b.n	407bf6 <__fputwc+0x2e>
  407c5e:	4648      	mov	r0, r9
  407c60:	b002      	add	sp, #8
  407c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  407c66:	bf00      	nop

00407c68 <_fputwc_r>:
  407c68:	b530      	push	{r4, r5, lr}
  407c6a:	6e53      	ldr	r3, [r2, #100]	; 0x64
  407c6c:	f013 0f01 	tst.w	r3, #1
  407c70:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  407c74:	4614      	mov	r4, r2
  407c76:	b083      	sub	sp, #12
  407c78:	4605      	mov	r5, r0
  407c7a:	b29a      	uxth	r2, r3
  407c7c:	d101      	bne.n	407c82 <_fputwc_r+0x1a>
  407c7e:	0590      	lsls	r0, r2, #22
  407c80:	d51c      	bpl.n	407cbc <_fputwc_r+0x54>
  407c82:	0490      	lsls	r0, r2, #18
  407c84:	d406      	bmi.n	407c94 <_fputwc_r+0x2c>
  407c86:	6e62      	ldr	r2, [r4, #100]	; 0x64
  407c88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  407c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  407c90:	81a3      	strh	r3, [r4, #12]
  407c92:	6662      	str	r2, [r4, #100]	; 0x64
  407c94:	4628      	mov	r0, r5
  407c96:	4622      	mov	r2, r4
  407c98:	f7ff ff96 	bl	407bc8 <__fputwc>
  407c9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  407c9e:	07da      	lsls	r2, r3, #31
  407ca0:	4605      	mov	r5, r0
  407ca2:	d402      	bmi.n	407caa <_fputwc_r+0x42>
  407ca4:	89a3      	ldrh	r3, [r4, #12]
  407ca6:	059b      	lsls	r3, r3, #22
  407ca8:	d502      	bpl.n	407cb0 <_fputwc_r+0x48>
  407caa:	4628      	mov	r0, r5
  407cac:	b003      	add	sp, #12
  407cae:	bd30      	pop	{r4, r5, pc}
  407cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407cb2:	f000 fb07 	bl	4082c4 <__retarget_lock_release_recursive>
  407cb6:	4628      	mov	r0, r5
  407cb8:	b003      	add	sp, #12
  407cba:	bd30      	pop	{r4, r5, pc}
  407cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
  407cbe:	9101      	str	r1, [sp, #4]
  407cc0:	f000 fafe 	bl	4082c0 <__retarget_lock_acquire_recursive>
  407cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  407cc8:	9901      	ldr	r1, [sp, #4]
  407cca:	b29a      	uxth	r2, r3
  407ccc:	e7d9      	b.n	407c82 <_fputwc_r+0x1a>
  407cce:	bf00      	nop

00407cd0 <_malloc_trim_r>:
  407cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407cd2:	4f24      	ldr	r7, [pc, #144]	; (407d64 <_malloc_trim_r+0x94>)
  407cd4:	460c      	mov	r4, r1
  407cd6:	4606      	mov	r6, r0
  407cd8:	f7fc fb1a 	bl	404310 <__malloc_lock>
  407cdc:	68bb      	ldr	r3, [r7, #8]
  407cde:	685d      	ldr	r5, [r3, #4]
  407ce0:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  407ce4:	310f      	adds	r1, #15
  407ce6:	f025 0503 	bic.w	r5, r5, #3
  407cea:	4429      	add	r1, r5
  407cec:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  407cf0:	f021 010f 	bic.w	r1, r1, #15
  407cf4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  407cf8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  407cfc:	db07      	blt.n	407d0e <_malloc_trim_r+0x3e>
  407cfe:	2100      	movs	r1, #0
  407d00:	4630      	mov	r0, r6
  407d02:	f7fc fb11 	bl	404328 <_sbrk_r>
  407d06:	68bb      	ldr	r3, [r7, #8]
  407d08:	442b      	add	r3, r5
  407d0a:	4298      	cmp	r0, r3
  407d0c:	d004      	beq.n	407d18 <_malloc_trim_r+0x48>
  407d0e:	4630      	mov	r0, r6
  407d10:	f7fc fb04 	bl	40431c <__malloc_unlock>
  407d14:	2000      	movs	r0, #0
  407d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407d18:	4261      	negs	r1, r4
  407d1a:	4630      	mov	r0, r6
  407d1c:	f7fc fb04 	bl	404328 <_sbrk_r>
  407d20:	3001      	adds	r0, #1
  407d22:	d00d      	beq.n	407d40 <_malloc_trim_r+0x70>
  407d24:	4b10      	ldr	r3, [pc, #64]	; (407d68 <_malloc_trim_r+0x98>)
  407d26:	68ba      	ldr	r2, [r7, #8]
  407d28:	6819      	ldr	r1, [r3, #0]
  407d2a:	1b2d      	subs	r5, r5, r4
  407d2c:	f045 0501 	orr.w	r5, r5, #1
  407d30:	4630      	mov	r0, r6
  407d32:	1b09      	subs	r1, r1, r4
  407d34:	6055      	str	r5, [r2, #4]
  407d36:	6019      	str	r1, [r3, #0]
  407d38:	f7fc faf0 	bl	40431c <__malloc_unlock>
  407d3c:	2001      	movs	r0, #1
  407d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  407d40:	2100      	movs	r1, #0
  407d42:	4630      	mov	r0, r6
  407d44:	f7fc faf0 	bl	404328 <_sbrk_r>
  407d48:	68ba      	ldr	r2, [r7, #8]
  407d4a:	1a83      	subs	r3, r0, r2
  407d4c:	2b0f      	cmp	r3, #15
  407d4e:	ddde      	ble.n	407d0e <_malloc_trim_r+0x3e>
  407d50:	4c06      	ldr	r4, [pc, #24]	; (407d6c <_malloc_trim_r+0x9c>)
  407d52:	4905      	ldr	r1, [pc, #20]	; (407d68 <_malloc_trim_r+0x98>)
  407d54:	6824      	ldr	r4, [r4, #0]
  407d56:	f043 0301 	orr.w	r3, r3, #1
  407d5a:	1b00      	subs	r0, r0, r4
  407d5c:	6053      	str	r3, [r2, #4]
  407d5e:	6008      	str	r0, [r1, #0]
  407d60:	e7d5      	b.n	407d0e <_malloc_trim_r+0x3e>
  407d62:	bf00      	nop
  407d64:	20400438 	.word	0x20400438
  407d68:	20400ca0 	.word	0x20400ca0
  407d6c:	20400840 	.word	0x20400840

00407d70 <_free_r>:
  407d70:	2900      	cmp	r1, #0
  407d72:	d044      	beq.n	407dfe <_free_r+0x8e>
  407d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  407d78:	460d      	mov	r5, r1
  407d7a:	4680      	mov	r8, r0
  407d7c:	f7fc fac8 	bl	404310 <__malloc_lock>
  407d80:	f855 7c04 	ldr.w	r7, [r5, #-4]
  407d84:	4969      	ldr	r1, [pc, #420]	; (407f2c <_free_r+0x1bc>)
  407d86:	f027 0301 	bic.w	r3, r7, #1
  407d8a:	f1a5 0408 	sub.w	r4, r5, #8
  407d8e:	18e2      	adds	r2, r4, r3
  407d90:	688e      	ldr	r6, [r1, #8]
  407d92:	6850      	ldr	r0, [r2, #4]
  407d94:	42b2      	cmp	r2, r6
  407d96:	f020 0003 	bic.w	r0, r0, #3
  407d9a:	d05e      	beq.n	407e5a <_free_r+0xea>
  407d9c:	07fe      	lsls	r6, r7, #31
  407d9e:	6050      	str	r0, [r2, #4]
  407da0:	d40b      	bmi.n	407dba <_free_r+0x4a>
  407da2:	f855 7c08 	ldr.w	r7, [r5, #-8]
  407da6:	1be4      	subs	r4, r4, r7
  407da8:	f101 0e08 	add.w	lr, r1, #8
  407dac:	68a5      	ldr	r5, [r4, #8]
  407dae:	4575      	cmp	r5, lr
  407db0:	443b      	add	r3, r7
  407db2:	d06d      	beq.n	407e90 <_free_r+0x120>
  407db4:	68e7      	ldr	r7, [r4, #12]
  407db6:	60ef      	str	r7, [r5, #12]
  407db8:	60bd      	str	r5, [r7, #8]
  407dba:	1815      	adds	r5, r2, r0
  407dbc:	686d      	ldr	r5, [r5, #4]
  407dbe:	07ed      	lsls	r5, r5, #31
  407dc0:	d53e      	bpl.n	407e40 <_free_r+0xd0>
  407dc2:	f043 0201 	orr.w	r2, r3, #1
  407dc6:	6062      	str	r2, [r4, #4]
  407dc8:	50e3      	str	r3, [r4, r3]
  407dca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  407dce:	d217      	bcs.n	407e00 <_free_r+0x90>
  407dd0:	08db      	lsrs	r3, r3, #3
  407dd2:	1c58      	adds	r0, r3, #1
  407dd4:	109a      	asrs	r2, r3, #2
  407dd6:	684d      	ldr	r5, [r1, #4]
  407dd8:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  407ddc:	60a7      	str	r7, [r4, #8]
  407dde:	2301      	movs	r3, #1
  407de0:	4093      	lsls	r3, r2
  407de2:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  407de6:	432b      	orrs	r3, r5
  407de8:	3a08      	subs	r2, #8
  407dea:	60e2      	str	r2, [r4, #12]
  407dec:	604b      	str	r3, [r1, #4]
  407dee:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  407df2:	60fc      	str	r4, [r7, #12]
  407df4:	4640      	mov	r0, r8
  407df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407dfa:	f7fc ba8f 	b.w	40431c <__malloc_unlock>
  407dfe:	4770      	bx	lr
  407e00:	0a5a      	lsrs	r2, r3, #9
  407e02:	2a04      	cmp	r2, #4
  407e04:	d852      	bhi.n	407eac <_free_r+0x13c>
  407e06:	099a      	lsrs	r2, r3, #6
  407e08:	f102 0739 	add.w	r7, r2, #57	; 0x39
  407e0c:	00ff      	lsls	r7, r7, #3
  407e0e:	f102 0538 	add.w	r5, r2, #56	; 0x38
  407e12:	19c8      	adds	r0, r1, r7
  407e14:	59ca      	ldr	r2, [r1, r7]
  407e16:	3808      	subs	r0, #8
  407e18:	4290      	cmp	r0, r2
  407e1a:	d04f      	beq.n	407ebc <_free_r+0x14c>
  407e1c:	6851      	ldr	r1, [r2, #4]
  407e1e:	f021 0103 	bic.w	r1, r1, #3
  407e22:	428b      	cmp	r3, r1
  407e24:	d232      	bcs.n	407e8c <_free_r+0x11c>
  407e26:	6892      	ldr	r2, [r2, #8]
  407e28:	4290      	cmp	r0, r2
  407e2a:	d1f7      	bne.n	407e1c <_free_r+0xac>
  407e2c:	68c3      	ldr	r3, [r0, #12]
  407e2e:	60a0      	str	r0, [r4, #8]
  407e30:	60e3      	str	r3, [r4, #12]
  407e32:	609c      	str	r4, [r3, #8]
  407e34:	60c4      	str	r4, [r0, #12]
  407e36:	4640      	mov	r0, r8
  407e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  407e3c:	f7fc ba6e 	b.w	40431c <__malloc_unlock>
  407e40:	6895      	ldr	r5, [r2, #8]
  407e42:	4f3b      	ldr	r7, [pc, #236]	; (407f30 <_free_r+0x1c0>)
  407e44:	42bd      	cmp	r5, r7
  407e46:	4403      	add	r3, r0
  407e48:	d040      	beq.n	407ecc <_free_r+0x15c>
  407e4a:	68d0      	ldr	r0, [r2, #12]
  407e4c:	60e8      	str	r0, [r5, #12]
  407e4e:	f043 0201 	orr.w	r2, r3, #1
  407e52:	6085      	str	r5, [r0, #8]
  407e54:	6062      	str	r2, [r4, #4]
  407e56:	50e3      	str	r3, [r4, r3]
  407e58:	e7b7      	b.n	407dca <_free_r+0x5a>
  407e5a:	07ff      	lsls	r7, r7, #31
  407e5c:	4403      	add	r3, r0
  407e5e:	d407      	bmi.n	407e70 <_free_r+0x100>
  407e60:	f855 2c08 	ldr.w	r2, [r5, #-8]
  407e64:	1aa4      	subs	r4, r4, r2
  407e66:	4413      	add	r3, r2
  407e68:	68a0      	ldr	r0, [r4, #8]
  407e6a:	68e2      	ldr	r2, [r4, #12]
  407e6c:	60c2      	str	r2, [r0, #12]
  407e6e:	6090      	str	r0, [r2, #8]
  407e70:	4a30      	ldr	r2, [pc, #192]	; (407f34 <_free_r+0x1c4>)
  407e72:	6812      	ldr	r2, [r2, #0]
  407e74:	f043 0001 	orr.w	r0, r3, #1
  407e78:	4293      	cmp	r3, r2
  407e7a:	6060      	str	r0, [r4, #4]
  407e7c:	608c      	str	r4, [r1, #8]
  407e7e:	d3b9      	bcc.n	407df4 <_free_r+0x84>
  407e80:	4b2d      	ldr	r3, [pc, #180]	; (407f38 <_free_r+0x1c8>)
  407e82:	4640      	mov	r0, r8
  407e84:	6819      	ldr	r1, [r3, #0]
  407e86:	f7ff ff23 	bl	407cd0 <_malloc_trim_r>
  407e8a:	e7b3      	b.n	407df4 <_free_r+0x84>
  407e8c:	4610      	mov	r0, r2
  407e8e:	e7cd      	b.n	407e2c <_free_r+0xbc>
  407e90:	1811      	adds	r1, r2, r0
  407e92:	6849      	ldr	r1, [r1, #4]
  407e94:	07c9      	lsls	r1, r1, #31
  407e96:	d444      	bmi.n	407f22 <_free_r+0x1b2>
  407e98:	6891      	ldr	r1, [r2, #8]
  407e9a:	68d2      	ldr	r2, [r2, #12]
  407e9c:	60ca      	str	r2, [r1, #12]
  407e9e:	4403      	add	r3, r0
  407ea0:	f043 0001 	orr.w	r0, r3, #1
  407ea4:	6091      	str	r1, [r2, #8]
  407ea6:	6060      	str	r0, [r4, #4]
  407ea8:	50e3      	str	r3, [r4, r3]
  407eaa:	e7a3      	b.n	407df4 <_free_r+0x84>
  407eac:	2a14      	cmp	r2, #20
  407eae:	d816      	bhi.n	407ede <_free_r+0x16e>
  407eb0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  407eb4:	00ff      	lsls	r7, r7, #3
  407eb6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  407eba:	e7aa      	b.n	407e12 <_free_r+0xa2>
  407ebc:	10aa      	asrs	r2, r5, #2
  407ebe:	2301      	movs	r3, #1
  407ec0:	684d      	ldr	r5, [r1, #4]
  407ec2:	4093      	lsls	r3, r2
  407ec4:	432b      	orrs	r3, r5
  407ec6:	604b      	str	r3, [r1, #4]
  407ec8:	4603      	mov	r3, r0
  407eca:	e7b0      	b.n	407e2e <_free_r+0xbe>
  407ecc:	f043 0201 	orr.w	r2, r3, #1
  407ed0:	614c      	str	r4, [r1, #20]
  407ed2:	610c      	str	r4, [r1, #16]
  407ed4:	60e5      	str	r5, [r4, #12]
  407ed6:	60a5      	str	r5, [r4, #8]
  407ed8:	6062      	str	r2, [r4, #4]
  407eda:	50e3      	str	r3, [r4, r3]
  407edc:	e78a      	b.n	407df4 <_free_r+0x84>
  407ede:	2a54      	cmp	r2, #84	; 0x54
  407ee0:	d806      	bhi.n	407ef0 <_free_r+0x180>
  407ee2:	0b1a      	lsrs	r2, r3, #12
  407ee4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  407ee8:	00ff      	lsls	r7, r7, #3
  407eea:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  407eee:	e790      	b.n	407e12 <_free_r+0xa2>
  407ef0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  407ef4:	d806      	bhi.n	407f04 <_free_r+0x194>
  407ef6:	0bda      	lsrs	r2, r3, #15
  407ef8:	f102 0778 	add.w	r7, r2, #120	; 0x78
  407efc:	00ff      	lsls	r7, r7, #3
  407efe:	f102 0577 	add.w	r5, r2, #119	; 0x77
  407f02:	e786      	b.n	407e12 <_free_r+0xa2>
  407f04:	f240 5054 	movw	r0, #1364	; 0x554
  407f08:	4282      	cmp	r2, r0
  407f0a:	d806      	bhi.n	407f1a <_free_r+0x1aa>
  407f0c:	0c9a      	lsrs	r2, r3, #18
  407f0e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  407f12:	00ff      	lsls	r7, r7, #3
  407f14:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  407f18:	e77b      	b.n	407e12 <_free_r+0xa2>
  407f1a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  407f1e:	257e      	movs	r5, #126	; 0x7e
  407f20:	e777      	b.n	407e12 <_free_r+0xa2>
  407f22:	f043 0101 	orr.w	r1, r3, #1
  407f26:	6061      	str	r1, [r4, #4]
  407f28:	6013      	str	r3, [r2, #0]
  407f2a:	e763      	b.n	407df4 <_free_r+0x84>
  407f2c:	20400438 	.word	0x20400438
  407f30:	20400440 	.word	0x20400440
  407f34:	20400844 	.word	0x20400844
  407f38:	20400cd0 	.word	0x20400cd0

00407f3c <__sfvwrite_r>:
  407f3c:	6893      	ldr	r3, [r2, #8]
  407f3e:	2b00      	cmp	r3, #0
  407f40:	d073      	beq.n	40802a <__sfvwrite_r+0xee>
  407f42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  407f46:	898b      	ldrh	r3, [r1, #12]
  407f48:	b083      	sub	sp, #12
  407f4a:	460c      	mov	r4, r1
  407f4c:	0719      	lsls	r1, r3, #28
  407f4e:	9000      	str	r0, [sp, #0]
  407f50:	4616      	mov	r6, r2
  407f52:	d526      	bpl.n	407fa2 <__sfvwrite_r+0x66>
  407f54:	6922      	ldr	r2, [r4, #16]
  407f56:	b322      	cbz	r2, 407fa2 <__sfvwrite_r+0x66>
  407f58:	f013 0002 	ands.w	r0, r3, #2
  407f5c:	6835      	ldr	r5, [r6, #0]
  407f5e:	d02c      	beq.n	407fba <__sfvwrite_r+0x7e>
  407f60:	f04f 0900 	mov.w	r9, #0
  407f64:	4fb0      	ldr	r7, [pc, #704]	; (408228 <__sfvwrite_r+0x2ec>)
  407f66:	46c8      	mov	r8, r9
  407f68:	46b2      	mov	sl, r6
  407f6a:	45b8      	cmp	r8, r7
  407f6c:	4643      	mov	r3, r8
  407f6e:	464a      	mov	r2, r9
  407f70:	bf28      	it	cs
  407f72:	463b      	movcs	r3, r7
  407f74:	9800      	ldr	r0, [sp, #0]
  407f76:	f1b8 0f00 	cmp.w	r8, #0
  407f7a:	d050      	beq.n	40801e <__sfvwrite_r+0xe2>
  407f7c:	69e1      	ldr	r1, [r4, #28]
  407f7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
  407f80:	47b0      	blx	r6
  407f82:	2800      	cmp	r0, #0
  407f84:	dd58      	ble.n	408038 <__sfvwrite_r+0xfc>
  407f86:	f8da 3008 	ldr.w	r3, [sl, #8]
  407f8a:	1a1b      	subs	r3, r3, r0
  407f8c:	4481      	add	r9, r0
  407f8e:	eba8 0800 	sub.w	r8, r8, r0
  407f92:	f8ca 3008 	str.w	r3, [sl, #8]
  407f96:	2b00      	cmp	r3, #0
  407f98:	d1e7      	bne.n	407f6a <__sfvwrite_r+0x2e>
  407f9a:	2000      	movs	r0, #0
  407f9c:	b003      	add	sp, #12
  407f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  407fa2:	4621      	mov	r1, r4
  407fa4:	9800      	ldr	r0, [sp, #0]
  407fa6:	f7fe fc91 	bl	4068cc <__swsetup_r>
  407faa:	2800      	cmp	r0, #0
  407fac:	f040 8133 	bne.w	408216 <__sfvwrite_r+0x2da>
  407fb0:	89a3      	ldrh	r3, [r4, #12]
  407fb2:	6835      	ldr	r5, [r6, #0]
  407fb4:	f013 0002 	ands.w	r0, r3, #2
  407fb8:	d1d2      	bne.n	407f60 <__sfvwrite_r+0x24>
  407fba:	f013 0901 	ands.w	r9, r3, #1
  407fbe:	d145      	bne.n	40804c <__sfvwrite_r+0x110>
  407fc0:	464f      	mov	r7, r9
  407fc2:	9601      	str	r6, [sp, #4]
  407fc4:	b337      	cbz	r7, 408014 <__sfvwrite_r+0xd8>
  407fc6:	059a      	lsls	r2, r3, #22
  407fc8:	f8d4 8008 	ldr.w	r8, [r4, #8]
  407fcc:	f140 8083 	bpl.w	4080d6 <__sfvwrite_r+0x19a>
  407fd0:	4547      	cmp	r7, r8
  407fd2:	46c3      	mov	fp, r8
  407fd4:	f0c0 80ab 	bcc.w	40812e <__sfvwrite_r+0x1f2>
  407fd8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  407fdc:	f040 80ac 	bne.w	408138 <__sfvwrite_r+0x1fc>
  407fe0:	6820      	ldr	r0, [r4, #0]
  407fe2:	46ba      	mov	sl, r7
  407fe4:	465a      	mov	r2, fp
  407fe6:	4649      	mov	r1, r9
  407fe8:	f000 fa52 	bl	408490 <memmove>
  407fec:	68a2      	ldr	r2, [r4, #8]
  407fee:	6823      	ldr	r3, [r4, #0]
  407ff0:	eba2 0208 	sub.w	r2, r2, r8
  407ff4:	445b      	add	r3, fp
  407ff6:	60a2      	str	r2, [r4, #8]
  407ff8:	6023      	str	r3, [r4, #0]
  407ffa:	9a01      	ldr	r2, [sp, #4]
  407ffc:	6893      	ldr	r3, [r2, #8]
  407ffe:	eba3 030a 	sub.w	r3, r3, sl
  408002:	44d1      	add	r9, sl
  408004:	eba7 070a 	sub.w	r7, r7, sl
  408008:	6093      	str	r3, [r2, #8]
  40800a:	2b00      	cmp	r3, #0
  40800c:	d0c5      	beq.n	407f9a <__sfvwrite_r+0x5e>
  40800e:	89a3      	ldrh	r3, [r4, #12]
  408010:	2f00      	cmp	r7, #0
  408012:	d1d8      	bne.n	407fc6 <__sfvwrite_r+0x8a>
  408014:	f8d5 9000 	ldr.w	r9, [r5]
  408018:	686f      	ldr	r7, [r5, #4]
  40801a:	3508      	adds	r5, #8
  40801c:	e7d2      	b.n	407fc4 <__sfvwrite_r+0x88>
  40801e:	f8d5 9000 	ldr.w	r9, [r5]
  408022:	f8d5 8004 	ldr.w	r8, [r5, #4]
  408026:	3508      	adds	r5, #8
  408028:	e79f      	b.n	407f6a <__sfvwrite_r+0x2e>
  40802a:	2000      	movs	r0, #0
  40802c:	4770      	bx	lr
  40802e:	4621      	mov	r1, r4
  408030:	9800      	ldr	r0, [sp, #0]
  408032:	f7ff fd1f 	bl	407a74 <_fflush_r>
  408036:	b370      	cbz	r0, 408096 <__sfvwrite_r+0x15a>
  408038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40803c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408040:	f04f 30ff 	mov.w	r0, #4294967295
  408044:	81a3      	strh	r3, [r4, #12]
  408046:	b003      	add	sp, #12
  408048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40804c:	4681      	mov	r9, r0
  40804e:	4633      	mov	r3, r6
  408050:	464e      	mov	r6, r9
  408052:	46a8      	mov	r8, r5
  408054:	469a      	mov	sl, r3
  408056:	464d      	mov	r5, r9
  408058:	b34e      	cbz	r6, 4080ae <__sfvwrite_r+0x172>
  40805a:	b380      	cbz	r0, 4080be <__sfvwrite_r+0x182>
  40805c:	6820      	ldr	r0, [r4, #0]
  40805e:	6923      	ldr	r3, [r4, #16]
  408060:	6962      	ldr	r2, [r4, #20]
  408062:	45b1      	cmp	r9, r6
  408064:	46cb      	mov	fp, r9
  408066:	bf28      	it	cs
  408068:	46b3      	movcs	fp, r6
  40806a:	4298      	cmp	r0, r3
  40806c:	465f      	mov	r7, fp
  40806e:	d904      	bls.n	40807a <__sfvwrite_r+0x13e>
  408070:	68a3      	ldr	r3, [r4, #8]
  408072:	4413      	add	r3, r2
  408074:	459b      	cmp	fp, r3
  408076:	f300 80a6 	bgt.w	4081c6 <__sfvwrite_r+0x28a>
  40807a:	4593      	cmp	fp, r2
  40807c:	db4b      	blt.n	408116 <__sfvwrite_r+0x1da>
  40807e:	4613      	mov	r3, r2
  408080:	6a67      	ldr	r7, [r4, #36]	; 0x24
  408082:	69e1      	ldr	r1, [r4, #28]
  408084:	9800      	ldr	r0, [sp, #0]
  408086:	462a      	mov	r2, r5
  408088:	47b8      	blx	r7
  40808a:	1e07      	subs	r7, r0, #0
  40808c:	ddd4      	ble.n	408038 <__sfvwrite_r+0xfc>
  40808e:	ebb9 0907 	subs.w	r9, r9, r7
  408092:	d0cc      	beq.n	40802e <__sfvwrite_r+0xf2>
  408094:	2001      	movs	r0, #1
  408096:	f8da 3008 	ldr.w	r3, [sl, #8]
  40809a:	1bdb      	subs	r3, r3, r7
  40809c:	443d      	add	r5, r7
  40809e:	1bf6      	subs	r6, r6, r7
  4080a0:	f8ca 3008 	str.w	r3, [sl, #8]
  4080a4:	2b00      	cmp	r3, #0
  4080a6:	f43f af78 	beq.w	407f9a <__sfvwrite_r+0x5e>
  4080aa:	2e00      	cmp	r6, #0
  4080ac:	d1d5      	bne.n	40805a <__sfvwrite_r+0x11e>
  4080ae:	f108 0308 	add.w	r3, r8, #8
  4080b2:	e913 0060 	ldmdb	r3, {r5, r6}
  4080b6:	4698      	mov	r8, r3
  4080b8:	3308      	adds	r3, #8
  4080ba:	2e00      	cmp	r6, #0
  4080bc:	d0f9      	beq.n	4080b2 <__sfvwrite_r+0x176>
  4080be:	4632      	mov	r2, r6
  4080c0:	210a      	movs	r1, #10
  4080c2:	4628      	mov	r0, r5
  4080c4:	f000 f994 	bl	4083f0 <memchr>
  4080c8:	2800      	cmp	r0, #0
  4080ca:	f000 80a1 	beq.w	408210 <__sfvwrite_r+0x2d4>
  4080ce:	3001      	adds	r0, #1
  4080d0:	eba0 0905 	sub.w	r9, r0, r5
  4080d4:	e7c2      	b.n	40805c <__sfvwrite_r+0x120>
  4080d6:	6820      	ldr	r0, [r4, #0]
  4080d8:	6923      	ldr	r3, [r4, #16]
  4080da:	4298      	cmp	r0, r3
  4080dc:	d802      	bhi.n	4080e4 <__sfvwrite_r+0x1a8>
  4080de:	6963      	ldr	r3, [r4, #20]
  4080e0:	429f      	cmp	r7, r3
  4080e2:	d25d      	bcs.n	4081a0 <__sfvwrite_r+0x264>
  4080e4:	45b8      	cmp	r8, r7
  4080e6:	bf28      	it	cs
  4080e8:	46b8      	movcs	r8, r7
  4080ea:	4642      	mov	r2, r8
  4080ec:	4649      	mov	r1, r9
  4080ee:	f000 f9cf 	bl	408490 <memmove>
  4080f2:	68a3      	ldr	r3, [r4, #8]
  4080f4:	6822      	ldr	r2, [r4, #0]
  4080f6:	eba3 0308 	sub.w	r3, r3, r8
  4080fa:	4442      	add	r2, r8
  4080fc:	60a3      	str	r3, [r4, #8]
  4080fe:	6022      	str	r2, [r4, #0]
  408100:	b10b      	cbz	r3, 408106 <__sfvwrite_r+0x1ca>
  408102:	46c2      	mov	sl, r8
  408104:	e779      	b.n	407ffa <__sfvwrite_r+0xbe>
  408106:	4621      	mov	r1, r4
  408108:	9800      	ldr	r0, [sp, #0]
  40810a:	f7ff fcb3 	bl	407a74 <_fflush_r>
  40810e:	2800      	cmp	r0, #0
  408110:	d192      	bne.n	408038 <__sfvwrite_r+0xfc>
  408112:	46c2      	mov	sl, r8
  408114:	e771      	b.n	407ffa <__sfvwrite_r+0xbe>
  408116:	465a      	mov	r2, fp
  408118:	4629      	mov	r1, r5
  40811a:	f000 f9b9 	bl	408490 <memmove>
  40811e:	68a2      	ldr	r2, [r4, #8]
  408120:	6823      	ldr	r3, [r4, #0]
  408122:	eba2 020b 	sub.w	r2, r2, fp
  408126:	445b      	add	r3, fp
  408128:	60a2      	str	r2, [r4, #8]
  40812a:	6023      	str	r3, [r4, #0]
  40812c:	e7af      	b.n	40808e <__sfvwrite_r+0x152>
  40812e:	6820      	ldr	r0, [r4, #0]
  408130:	46b8      	mov	r8, r7
  408132:	46ba      	mov	sl, r7
  408134:	46bb      	mov	fp, r7
  408136:	e755      	b.n	407fe4 <__sfvwrite_r+0xa8>
  408138:	6962      	ldr	r2, [r4, #20]
  40813a:	6820      	ldr	r0, [r4, #0]
  40813c:	6921      	ldr	r1, [r4, #16]
  40813e:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  408142:	eba0 0a01 	sub.w	sl, r0, r1
  408146:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  40814a:	f10a 0001 	add.w	r0, sl, #1
  40814e:	ea4f 0868 	mov.w	r8, r8, asr #1
  408152:	4438      	add	r0, r7
  408154:	4540      	cmp	r0, r8
  408156:	4642      	mov	r2, r8
  408158:	bf84      	itt	hi
  40815a:	4680      	movhi	r8, r0
  40815c:	4642      	movhi	r2, r8
  40815e:	055b      	lsls	r3, r3, #21
  408160:	d544      	bpl.n	4081ec <__sfvwrite_r+0x2b0>
  408162:	4611      	mov	r1, r2
  408164:	9800      	ldr	r0, [sp, #0]
  408166:	f7fb fd3b 	bl	403be0 <_malloc_r>
  40816a:	4683      	mov	fp, r0
  40816c:	2800      	cmp	r0, #0
  40816e:	d055      	beq.n	40821c <__sfvwrite_r+0x2e0>
  408170:	4652      	mov	r2, sl
  408172:	6921      	ldr	r1, [r4, #16]
  408174:	f7fb ffe4 	bl	404140 <memcpy>
  408178:	89a3      	ldrh	r3, [r4, #12]
  40817a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  40817e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408182:	81a3      	strh	r3, [r4, #12]
  408184:	eb0b 000a 	add.w	r0, fp, sl
  408188:	eba8 030a 	sub.w	r3, r8, sl
  40818c:	f8c4 b010 	str.w	fp, [r4, #16]
  408190:	f8c4 8014 	str.w	r8, [r4, #20]
  408194:	6020      	str	r0, [r4, #0]
  408196:	60a3      	str	r3, [r4, #8]
  408198:	46b8      	mov	r8, r7
  40819a:	46ba      	mov	sl, r7
  40819c:	46bb      	mov	fp, r7
  40819e:	e721      	b.n	407fe4 <__sfvwrite_r+0xa8>
  4081a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  4081a4:	42b9      	cmp	r1, r7
  4081a6:	bf28      	it	cs
  4081a8:	4639      	movcs	r1, r7
  4081aa:	464a      	mov	r2, r9
  4081ac:	fb91 f1f3 	sdiv	r1, r1, r3
  4081b0:	9800      	ldr	r0, [sp, #0]
  4081b2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4081b4:	fb03 f301 	mul.w	r3, r3, r1
  4081b8:	69e1      	ldr	r1, [r4, #28]
  4081ba:	47b0      	blx	r6
  4081bc:	f1b0 0a00 	subs.w	sl, r0, #0
  4081c0:	f73f af1b 	bgt.w	407ffa <__sfvwrite_r+0xbe>
  4081c4:	e738      	b.n	408038 <__sfvwrite_r+0xfc>
  4081c6:	461a      	mov	r2, r3
  4081c8:	4629      	mov	r1, r5
  4081ca:	9301      	str	r3, [sp, #4]
  4081cc:	f000 f960 	bl	408490 <memmove>
  4081d0:	6822      	ldr	r2, [r4, #0]
  4081d2:	9b01      	ldr	r3, [sp, #4]
  4081d4:	9800      	ldr	r0, [sp, #0]
  4081d6:	441a      	add	r2, r3
  4081d8:	6022      	str	r2, [r4, #0]
  4081da:	4621      	mov	r1, r4
  4081dc:	f7ff fc4a 	bl	407a74 <_fflush_r>
  4081e0:	9b01      	ldr	r3, [sp, #4]
  4081e2:	2800      	cmp	r0, #0
  4081e4:	f47f af28 	bne.w	408038 <__sfvwrite_r+0xfc>
  4081e8:	461f      	mov	r7, r3
  4081ea:	e750      	b.n	40808e <__sfvwrite_r+0x152>
  4081ec:	9800      	ldr	r0, [sp, #0]
  4081ee:	f000 fcad 	bl	408b4c <_realloc_r>
  4081f2:	4683      	mov	fp, r0
  4081f4:	2800      	cmp	r0, #0
  4081f6:	d1c5      	bne.n	408184 <__sfvwrite_r+0x248>
  4081f8:	9d00      	ldr	r5, [sp, #0]
  4081fa:	6921      	ldr	r1, [r4, #16]
  4081fc:	4628      	mov	r0, r5
  4081fe:	f7ff fdb7 	bl	407d70 <_free_r>
  408202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408206:	220c      	movs	r2, #12
  408208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  40820c:	602a      	str	r2, [r5, #0]
  40820e:	e715      	b.n	40803c <__sfvwrite_r+0x100>
  408210:	f106 0901 	add.w	r9, r6, #1
  408214:	e722      	b.n	40805c <__sfvwrite_r+0x120>
  408216:	f04f 30ff 	mov.w	r0, #4294967295
  40821a:	e6bf      	b.n	407f9c <__sfvwrite_r+0x60>
  40821c:	9a00      	ldr	r2, [sp, #0]
  40821e:	230c      	movs	r3, #12
  408220:	6013      	str	r3, [r2, #0]
  408222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408226:	e709      	b.n	40803c <__sfvwrite_r+0x100>
  408228:	7ffffc00 	.word	0x7ffffc00

0040822c <_fwalk_reent>:
  40822c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  408230:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  408234:	d01f      	beq.n	408276 <_fwalk_reent+0x4a>
  408236:	4688      	mov	r8, r1
  408238:	4606      	mov	r6, r0
  40823a:	f04f 0900 	mov.w	r9, #0
  40823e:	687d      	ldr	r5, [r7, #4]
  408240:	68bc      	ldr	r4, [r7, #8]
  408242:	3d01      	subs	r5, #1
  408244:	d411      	bmi.n	40826a <_fwalk_reent+0x3e>
  408246:	89a3      	ldrh	r3, [r4, #12]
  408248:	2b01      	cmp	r3, #1
  40824a:	f105 35ff 	add.w	r5, r5, #4294967295
  40824e:	d908      	bls.n	408262 <_fwalk_reent+0x36>
  408250:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  408254:	3301      	adds	r3, #1
  408256:	4621      	mov	r1, r4
  408258:	4630      	mov	r0, r6
  40825a:	d002      	beq.n	408262 <_fwalk_reent+0x36>
  40825c:	47c0      	blx	r8
  40825e:	ea49 0900 	orr.w	r9, r9, r0
  408262:	1c6b      	adds	r3, r5, #1
  408264:	f104 0468 	add.w	r4, r4, #104	; 0x68
  408268:	d1ed      	bne.n	408246 <_fwalk_reent+0x1a>
  40826a:	683f      	ldr	r7, [r7, #0]
  40826c:	2f00      	cmp	r7, #0
  40826e:	d1e6      	bne.n	40823e <_fwalk_reent+0x12>
  408270:	4648      	mov	r0, r9
  408272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408276:	46b9      	mov	r9, r7
  408278:	4648      	mov	r0, r9
  40827a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40827e:	bf00      	nop

00408280 <__locale_mb_cur_max>:
  408280:	4b04      	ldr	r3, [pc, #16]	; (408294 <__locale_mb_cur_max+0x14>)
  408282:	4a05      	ldr	r2, [pc, #20]	; (408298 <__locale_mb_cur_max+0x18>)
  408284:	681b      	ldr	r3, [r3, #0]
  408286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  408288:	2b00      	cmp	r3, #0
  40828a:	bf08      	it	eq
  40828c:	4613      	moveq	r3, r2
  40828e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  408292:	4770      	bx	lr
  408294:	2040000c 	.word	0x2040000c
  408298:	2040084c 	.word	0x2040084c

0040829c <_localeconv_r>:
  40829c:	4a04      	ldr	r2, [pc, #16]	; (4082b0 <_localeconv_r+0x14>)
  40829e:	4b05      	ldr	r3, [pc, #20]	; (4082b4 <_localeconv_r+0x18>)
  4082a0:	6812      	ldr	r2, [r2, #0]
  4082a2:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4082a4:	2800      	cmp	r0, #0
  4082a6:	bf08      	it	eq
  4082a8:	4618      	moveq	r0, r3
  4082aa:	30f0      	adds	r0, #240	; 0xf0
  4082ac:	4770      	bx	lr
  4082ae:	bf00      	nop
  4082b0:	2040000c 	.word	0x2040000c
  4082b4:	2040084c 	.word	0x2040084c

004082b8 <__retarget_lock_init_recursive>:
  4082b8:	4770      	bx	lr
  4082ba:	bf00      	nop

004082bc <__retarget_lock_close_recursive>:
  4082bc:	4770      	bx	lr
  4082be:	bf00      	nop

004082c0 <__retarget_lock_acquire_recursive>:
  4082c0:	4770      	bx	lr
  4082c2:	bf00      	nop

004082c4 <__retarget_lock_release_recursive>:
  4082c4:	4770      	bx	lr
  4082c6:	bf00      	nop

004082c8 <__swhatbuf_r>:
  4082c8:	b570      	push	{r4, r5, r6, lr}
  4082ca:	460c      	mov	r4, r1
  4082cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4082d0:	2900      	cmp	r1, #0
  4082d2:	b090      	sub	sp, #64	; 0x40
  4082d4:	4615      	mov	r5, r2
  4082d6:	461e      	mov	r6, r3
  4082d8:	db14      	blt.n	408304 <__swhatbuf_r+0x3c>
  4082da:	aa01      	add	r2, sp, #4
  4082dc:	f001 f84a 	bl	409374 <_fstat_r>
  4082e0:	2800      	cmp	r0, #0
  4082e2:	db0f      	blt.n	408304 <__swhatbuf_r+0x3c>
  4082e4:	9a02      	ldr	r2, [sp, #8]
  4082e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  4082ea:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  4082ee:	fab2 f282 	clz	r2, r2
  4082f2:	0952      	lsrs	r2, r2, #5
  4082f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4082f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
  4082fc:	6032      	str	r2, [r6, #0]
  4082fe:	602b      	str	r3, [r5, #0]
  408300:	b010      	add	sp, #64	; 0x40
  408302:	bd70      	pop	{r4, r5, r6, pc}
  408304:	89a2      	ldrh	r2, [r4, #12]
  408306:	2300      	movs	r3, #0
  408308:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  40830c:	6033      	str	r3, [r6, #0]
  40830e:	d004      	beq.n	40831a <__swhatbuf_r+0x52>
  408310:	2240      	movs	r2, #64	; 0x40
  408312:	4618      	mov	r0, r3
  408314:	602a      	str	r2, [r5, #0]
  408316:	b010      	add	sp, #64	; 0x40
  408318:	bd70      	pop	{r4, r5, r6, pc}
  40831a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40831e:	602b      	str	r3, [r5, #0]
  408320:	b010      	add	sp, #64	; 0x40
  408322:	bd70      	pop	{r4, r5, r6, pc}

00408324 <__smakebuf_r>:
  408324:	898a      	ldrh	r2, [r1, #12]
  408326:	0792      	lsls	r2, r2, #30
  408328:	460b      	mov	r3, r1
  40832a:	d506      	bpl.n	40833a <__smakebuf_r+0x16>
  40832c:	f101 0243 	add.w	r2, r1, #67	; 0x43
  408330:	2101      	movs	r1, #1
  408332:	601a      	str	r2, [r3, #0]
  408334:	611a      	str	r2, [r3, #16]
  408336:	6159      	str	r1, [r3, #20]
  408338:	4770      	bx	lr
  40833a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40833c:	b083      	sub	sp, #12
  40833e:	ab01      	add	r3, sp, #4
  408340:	466a      	mov	r2, sp
  408342:	460c      	mov	r4, r1
  408344:	4606      	mov	r6, r0
  408346:	f7ff ffbf 	bl	4082c8 <__swhatbuf_r>
  40834a:	9900      	ldr	r1, [sp, #0]
  40834c:	4605      	mov	r5, r0
  40834e:	4630      	mov	r0, r6
  408350:	f7fb fc46 	bl	403be0 <_malloc_r>
  408354:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  408358:	b1d8      	cbz	r0, 408392 <__smakebuf_r+0x6e>
  40835a:	9a01      	ldr	r2, [sp, #4]
  40835c:	4f15      	ldr	r7, [pc, #84]	; (4083b4 <__smakebuf_r+0x90>)
  40835e:	9900      	ldr	r1, [sp, #0]
  408360:	63f7      	str	r7, [r6, #60]	; 0x3c
  408362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  408366:	81a3      	strh	r3, [r4, #12]
  408368:	6020      	str	r0, [r4, #0]
  40836a:	6120      	str	r0, [r4, #16]
  40836c:	6161      	str	r1, [r4, #20]
  40836e:	b91a      	cbnz	r2, 408378 <__smakebuf_r+0x54>
  408370:	432b      	orrs	r3, r5
  408372:	81a3      	strh	r3, [r4, #12]
  408374:	b003      	add	sp, #12
  408376:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408378:	4630      	mov	r0, r6
  40837a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  40837e:	f001 f80d 	bl	40939c <_isatty_r>
  408382:	b1a0      	cbz	r0, 4083ae <__smakebuf_r+0x8a>
  408384:	89a3      	ldrh	r3, [r4, #12]
  408386:	f023 0303 	bic.w	r3, r3, #3
  40838a:	f043 0301 	orr.w	r3, r3, #1
  40838e:	b21b      	sxth	r3, r3
  408390:	e7ee      	b.n	408370 <__smakebuf_r+0x4c>
  408392:	059a      	lsls	r2, r3, #22
  408394:	d4ee      	bmi.n	408374 <__smakebuf_r+0x50>
  408396:	f023 0303 	bic.w	r3, r3, #3
  40839a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40839e:	f043 0302 	orr.w	r3, r3, #2
  4083a2:	2101      	movs	r1, #1
  4083a4:	81a3      	strh	r3, [r4, #12]
  4083a6:	6022      	str	r2, [r4, #0]
  4083a8:	6122      	str	r2, [r4, #16]
  4083aa:	6161      	str	r1, [r4, #20]
  4083ac:	e7e2      	b.n	408374 <__smakebuf_r+0x50>
  4083ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4083b2:	e7dd      	b.n	408370 <__smakebuf_r+0x4c>
  4083b4:	00407ac9 	.word	0x00407ac9

004083b8 <__ascii_mbtowc>:
  4083b8:	b082      	sub	sp, #8
  4083ba:	b149      	cbz	r1, 4083d0 <__ascii_mbtowc+0x18>
  4083bc:	b15a      	cbz	r2, 4083d6 <__ascii_mbtowc+0x1e>
  4083be:	b16b      	cbz	r3, 4083dc <__ascii_mbtowc+0x24>
  4083c0:	7813      	ldrb	r3, [r2, #0]
  4083c2:	600b      	str	r3, [r1, #0]
  4083c4:	7812      	ldrb	r2, [r2, #0]
  4083c6:	1c10      	adds	r0, r2, #0
  4083c8:	bf18      	it	ne
  4083ca:	2001      	movne	r0, #1
  4083cc:	b002      	add	sp, #8
  4083ce:	4770      	bx	lr
  4083d0:	a901      	add	r1, sp, #4
  4083d2:	2a00      	cmp	r2, #0
  4083d4:	d1f3      	bne.n	4083be <__ascii_mbtowc+0x6>
  4083d6:	4610      	mov	r0, r2
  4083d8:	b002      	add	sp, #8
  4083da:	4770      	bx	lr
  4083dc:	f06f 0001 	mvn.w	r0, #1
  4083e0:	e7f4      	b.n	4083cc <__ascii_mbtowc+0x14>
  4083e2:	bf00      	nop
	...

004083f0 <memchr>:
  4083f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4083f4:	2a10      	cmp	r2, #16
  4083f6:	db2b      	blt.n	408450 <memchr+0x60>
  4083f8:	f010 0f07 	tst.w	r0, #7
  4083fc:	d008      	beq.n	408410 <memchr+0x20>
  4083fe:	f810 3b01 	ldrb.w	r3, [r0], #1
  408402:	3a01      	subs	r2, #1
  408404:	428b      	cmp	r3, r1
  408406:	d02d      	beq.n	408464 <memchr+0x74>
  408408:	f010 0f07 	tst.w	r0, #7
  40840c:	b342      	cbz	r2, 408460 <memchr+0x70>
  40840e:	d1f6      	bne.n	4083fe <memchr+0xe>
  408410:	b4f0      	push	{r4, r5, r6, r7}
  408412:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  408416:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40841a:	f022 0407 	bic.w	r4, r2, #7
  40841e:	f07f 0700 	mvns.w	r7, #0
  408422:	2300      	movs	r3, #0
  408424:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  408428:	3c08      	subs	r4, #8
  40842a:	ea85 0501 	eor.w	r5, r5, r1
  40842e:	ea86 0601 	eor.w	r6, r6, r1
  408432:	fa85 f547 	uadd8	r5, r5, r7
  408436:	faa3 f587 	sel	r5, r3, r7
  40843a:	fa86 f647 	uadd8	r6, r6, r7
  40843e:	faa5 f687 	sel	r6, r5, r7
  408442:	b98e      	cbnz	r6, 408468 <memchr+0x78>
  408444:	d1ee      	bne.n	408424 <memchr+0x34>
  408446:	bcf0      	pop	{r4, r5, r6, r7}
  408448:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40844c:	f002 0207 	and.w	r2, r2, #7
  408450:	b132      	cbz	r2, 408460 <memchr+0x70>
  408452:	f810 3b01 	ldrb.w	r3, [r0], #1
  408456:	3a01      	subs	r2, #1
  408458:	ea83 0301 	eor.w	r3, r3, r1
  40845c:	b113      	cbz	r3, 408464 <memchr+0x74>
  40845e:	d1f8      	bne.n	408452 <memchr+0x62>
  408460:	2000      	movs	r0, #0
  408462:	4770      	bx	lr
  408464:	3801      	subs	r0, #1
  408466:	4770      	bx	lr
  408468:	2d00      	cmp	r5, #0
  40846a:	bf06      	itte	eq
  40846c:	4635      	moveq	r5, r6
  40846e:	3803      	subeq	r0, #3
  408470:	3807      	subne	r0, #7
  408472:	f015 0f01 	tst.w	r5, #1
  408476:	d107      	bne.n	408488 <memchr+0x98>
  408478:	3001      	adds	r0, #1
  40847a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40847e:	bf02      	ittt	eq
  408480:	3001      	addeq	r0, #1
  408482:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  408486:	3001      	addeq	r0, #1
  408488:	bcf0      	pop	{r4, r5, r6, r7}
  40848a:	3801      	subs	r0, #1
  40848c:	4770      	bx	lr
  40848e:	bf00      	nop

00408490 <memmove>:
  408490:	4288      	cmp	r0, r1
  408492:	b5f0      	push	{r4, r5, r6, r7, lr}
  408494:	d90d      	bls.n	4084b2 <memmove+0x22>
  408496:	188b      	adds	r3, r1, r2
  408498:	4298      	cmp	r0, r3
  40849a:	d20a      	bcs.n	4084b2 <memmove+0x22>
  40849c:	1884      	adds	r4, r0, r2
  40849e:	2a00      	cmp	r2, #0
  4084a0:	d051      	beq.n	408546 <memmove+0xb6>
  4084a2:	4622      	mov	r2, r4
  4084a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4084a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4084ac:	4299      	cmp	r1, r3
  4084ae:	d1f9      	bne.n	4084a4 <memmove+0x14>
  4084b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4084b2:	2a0f      	cmp	r2, #15
  4084b4:	d948      	bls.n	408548 <memmove+0xb8>
  4084b6:	ea41 0300 	orr.w	r3, r1, r0
  4084ba:	079b      	lsls	r3, r3, #30
  4084bc:	d146      	bne.n	40854c <memmove+0xbc>
  4084be:	f100 0410 	add.w	r4, r0, #16
  4084c2:	f101 0310 	add.w	r3, r1, #16
  4084c6:	4615      	mov	r5, r2
  4084c8:	f853 6c10 	ldr.w	r6, [r3, #-16]
  4084cc:	f844 6c10 	str.w	r6, [r4, #-16]
  4084d0:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  4084d4:	f844 6c0c 	str.w	r6, [r4, #-12]
  4084d8:	f853 6c08 	ldr.w	r6, [r3, #-8]
  4084dc:	f844 6c08 	str.w	r6, [r4, #-8]
  4084e0:	3d10      	subs	r5, #16
  4084e2:	f853 6c04 	ldr.w	r6, [r3, #-4]
  4084e6:	f844 6c04 	str.w	r6, [r4, #-4]
  4084ea:	2d0f      	cmp	r5, #15
  4084ec:	f103 0310 	add.w	r3, r3, #16
  4084f0:	f104 0410 	add.w	r4, r4, #16
  4084f4:	d8e8      	bhi.n	4084c8 <memmove+0x38>
  4084f6:	f1a2 0310 	sub.w	r3, r2, #16
  4084fa:	f023 030f 	bic.w	r3, r3, #15
  4084fe:	f002 0e0f 	and.w	lr, r2, #15
  408502:	3310      	adds	r3, #16
  408504:	f1be 0f03 	cmp.w	lr, #3
  408508:	4419      	add	r1, r3
  40850a:	4403      	add	r3, r0
  40850c:	d921      	bls.n	408552 <memmove+0xc2>
  40850e:	1f1e      	subs	r6, r3, #4
  408510:	460d      	mov	r5, r1
  408512:	4674      	mov	r4, lr
  408514:	3c04      	subs	r4, #4
  408516:	f855 7b04 	ldr.w	r7, [r5], #4
  40851a:	f846 7f04 	str.w	r7, [r6, #4]!
  40851e:	2c03      	cmp	r4, #3
  408520:	d8f8      	bhi.n	408514 <memmove+0x84>
  408522:	f1ae 0404 	sub.w	r4, lr, #4
  408526:	f024 0403 	bic.w	r4, r4, #3
  40852a:	3404      	adds	r4, #4
  40852c:	4421      	add	r1, r4
  40852e:	4423      	add	r3, r4
  408530:	f002 0203 	and.w	r2, r2, #3
  408534:	b162      	cbz	r2, 408550 <memmove+0xc0>
  408536:	3b01      	subs	r3, #1
  408538:	440a      	add	r2, r1
  40853a:	f811 4b01 	ldrb.w	r4, [r1], #1
  40853e:	f803 4f01 	strb.w	r4, [r3, #1]!
  408542:	428a      	cmp	r2, r1
  408544:	d1f9      	bne.n	40853a <memmove+0xaa>
  408546:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408548:	4603      	mov	r3, r0
  40854a:	e7f3      	b.n	408534 <memmove+0xa4>
  40854c:	4603      	mov	r3, r0
  40854e:	e7f2      	b.n	408536 <memmove+0xa6>
  408550:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408552:	4672      	mov	r2, lr
  408554:	e7ee      	b.n	408534 <memmove+0xa4>
  408556:	bf00      	nop

00408558 <_Balloc>:
  408558:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40855a:	b570      	push	{r4, r5, r6, lr}
  40855c:	4605      	mov	r5, r0
  40855e:	460c      	mov	r4, r1
  408560:	b14b      	cbz	r3, 408576 <_Balloc+0x1e>
  408562:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  408566:	b180      	cbz	r0, 40858a <_Balloc+0x32>
  408568:	6802      	ldr	r2, [r0, #0]
  40856a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  40856e:	2300      	movs	r3, #0
  408570:	6103      	str	r3, [r0, #16]
  408572:	60c3      	str	r3, [r0, #12]
  408574:	bd70      	pop	{r4, r5, r6, pc}
  408576:	2221      	movs	r2, #33	; 0x21
  408578:	2104      	movs	r1, #4
  40857a:	f000 fe57 	bl	40922c <_calloc_r>
  40857e:	64e8      	str	r0, [r5, #76]	; 0x4c
  408580:	4603      	mov	r3, r0
  408582:	2800      	cmp	r0, #0
  408584:	d1ed      	bne.n	408562 <_Balloc+0xa>
  408586:	2000      	movs	r0, #0
  408588:	bd70      	pop	{r4, r5, r6, pc}
  40858a:	2101      	movs	r1, #1
  40858c:	fa01 f604 	lsl.w	r6, r1, r4
  408590:	1d72      	adds	r2, r6, #5
  408592:	4628      	mov	r0, r5
  408594:	0092      	lsls	r2, r2, #2
  408596:	f000 fe49 	bl	40922c <_calloc_r>
  40859a:	2800      	cmp	r0, #0
  40859c:	d0f3      	beq.n	408586 <_Balloc+0x2e>
  40859e:	6044      	str	r4, [r0, #4]
  4085a0:	6086      	str	r6, [r0, #8]
  4085a2:	e7e4      	b.n	40856e <_Balloc+0x16>

004085a4 <_Bfree>:
  4085a4:	b131      	cbz	r1, 4085b4 <_Bfree+0x10>
  4085a6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4085a8:	684a      	ldr	r2, [r1, #4]
  4085aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4085ae:	6008      	str	r0, [r1, #0]
  4085b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4085b4:	4770      	bx	lr
  4085b6:	bf00      	nop

004085b8 <__multadd>:
  4085b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  4085ba:	690c      	ldr	r4, [r1, #16]
  4085bc:	b083      	sub	sp, #12
  4085be:	460d      	mov	r5, r1
  4085c0:	4606      	mov	r6, r0
  4085c2:	f101 0e14 	add.w	lr, r1, #20
  4085c6:	2700      	movs	r7, #0
  4085c8:	f8de 0000 	ldr.w	r0, [lr]
  4085cc:	b281      	uxth	r1, r0
  4085ce:	fb02 3301 	mla	r3, r2, r1, r3
  4085d2:	0c01      	lsrs	r1, r0, #16
  4085d4:	0c18      	lsrs	r0, r3, #16
  4085d6:	fb02 0101 	mla	r1, r2, r1, r0
  4085da:	b29b      	uxth	r3, r3
  4085dc:	3701      	adds	r7, #1
  4085de:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4085e2:	42bc      	cmp	r4, r7
  4085e4:	f84e 3b04 	str.w	r3, [lr], #4
  4085e8:	ea4f 4311 	mov.w	r3, r1, lsr #16
  4085ec:	dcec      	bgt.n	4085c8 <__multadd+0x10>
  4085ee:	b13b      	cbz	r3, 408600 <__multadd+0x48>
  4085f0:	68aa      	ldr	r2, [r5, #8]
  4085f2:	4294      	cmp	r4, r2
  4085f4:	da07      	bge.n	408606 <__multadd+0x4e>
  4085f6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  4085fa:	3401      	adds	r4, #1
  4085fc:	6153      	str	r3, [r2, #20]
  4085fe:	612c      	str	r4, [r5, #16]
  408600:	4628      	mov	r0, r5
  408602:	b003      	add	sp, #12
  408604:	bdf0      	pop	{r4, r5, r6, r7, pc}
  408606:	6869      	ldr	r1, [r5, #4]
  408608:	9301      	str	r3, [sp, #4]
  40860a:	3101      	adds	r1, #1
  40860c:	4630      	mov	r0, r6
  40860e:	f7ff ffa3 	bl	408558 <_Balloc>
  408612:	692a      	ldr	r2, [r5, #16]
  408614:	3202      	adds	r2, #2
  408616:	f105 010c 	add.w	r1, r5, #12
  40861a:	4607      	mov	r7, r0
  40861c:	0092      	lsls	r2, r2, #2
  40861e:	300c      	adds	r0, #12
  408620:	f7fb fd8e 	bl	404140 <memcpy>
  408624:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  408626:	6869      	ldr	r1, [r5, #4]
  408628:	9b01      	ldr	r3, [sp, #4]
  40862a:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  40862e:	6028      	str	r0, [r5, #0]
  408630:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  408634:	463d      	mov	r5, r7
  408636:	e7de      	b.n	4085f6 <__multadd+0x3e>

00408638 <__hi0bits>:
  408638:	0c02      	lsrs	r2, r0, #16
  40863a:	0412      	lsls	r2, r2, #16
  40863c:	4603      	mov	r3, r0
  40863e:	b9b2      	cbnz	r2, 40866e <__hi0bits+0x36>
  408640:	0403      	lsls	r3, r0, #16
  408642:	2010      	movs	r0, #16
  408644:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  408648:	bf04      	itt	eq
  40864a:	021b      	lsleq	r3, r3, #8
  40864c:	3008      	addeq	r0, #8
  40864e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  408652:	bf04      	itt	eq
  408654:	011b      	lsleq	r3, r3, #4
  408656:	3004      	addeq	r0, #4
  408658:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  40865c:	bf04      	itt	eq
  40865e:	009b      	lsleq	r3, r3, #2
  408660:	3002      	addeq	r0, #2
  408662:	2b00      	cmp	r3, #0
  408664:	db02      	blt.n	40866c <__hi0bits+0x34>
  408666:	005b      	lsls	r3, r3, #1
  408668:	d403      	bmi.n	408672 <__hi0bits+0x3a>
  40866a:	2020      	movs	r0, #32
  40866c:	4770      	bx	lr
  40866e:	2000      	movs	r0, #0
  408670:	e7e8      	b.n	408644 <__hi0bits+0xc>
  408672:	3001      	adds	r0, #1
  408674:	4770      	bx	lr
  408676:	bf00      	nop

00408678 <__lo0bits>:
  408678:	6803      	ldr	r3, [r0, #0]
  40867a:	f013 0207 	ands.w	r2, r3, #7
  40867e:	4601      	mov	r1, r0
  408680:	d007      	beq.n	408692 <__lo0bits+0x1a>
  408682:	07da      	lsls	r2, r3, #31
  408684:	d421      	bmi.n	4086ca <__lo0bits+0x52>
  408686:	0798      	lsls	r0, r3, #30
  408688:	d421      	bmi.n	4086ce <__lo0bits+0x56>
  40868a:	089b      	lsrs	r3, r3, #2
  40868c:	600b      	str	r3, [r1, #0]
  40868e:	2002      	movs	r0, #2
  408690:	4770      	bx	lr
  408692:	b298      	uxth	r0, r3
  408694:	b198      	cbz	r0, 4086be <__lo0bits+0x46>
  408696:	4610      	mov	r0, r2
  408698:	f013 0fff 	tst.w	r3, #255	; 0xff
  40869c:	bf04      	itt	eq
  40869e:	0a1b      	lsreq	r3, r3, #8
  4086a0:	3008      	addeq	r0, #8
  4086a2:	071a      	lsls	r2, r3, #28
  4086a4:	bf04      	itt	eq
  4086a6:	091b      	lsreq	r3, r3, #4
  4086a8:	3004      	addeq	r0, #4
  4086aa:	079a      	lsls	r2, r3, #30
  4086ac:	bf04      	itt	eq
  4086ae:	089b      	lsreq	r3, r3, #2
  4086b0:	3002      	addeq	r0, #2
  4086b2:	07da      	lsls	r2, r3, #31
  4086b4:	d407      	bmi.n	4086c6 <__lo0bits+0x4e>
  4086b6:	085b      	lsrs	r3, r3, #1
  4086b8:	d104      	bne.n	4086c4 <__lo0bits+0x4c>
  4086ba:	2020      	movs	r0, #32
  4086bc:	4770      	bx	lr
  4086be:	0c1b      	lsrs	r3, r3, #16
  4086c0:	2010      	movs	r0, #16
  4086c2:	e7e9      	b.n	408698 <__lo0bits+0x20>
  4086c4:	3001      	adds	r0, #1
  4086c6:	600b      	str	r3, [r1, #0]
  4086c8:	4770      	bx	lr
  4086ca:	2000      	movs	r0, #0
  4086cc:	4770      	bx	lr
  4086ce:	085b      	lsrs	r3, r3, #1
  4086d0:	600b      	str	r3, [r1, #0]
  4086d2:	2001      	movs	r0, #1
  4086d4:	4770      	bx	lr
  4086d6:	bf00      	nop

004086d8 <__i2b>:
  4086d8:	b510      	push	{r4, lr}
  4086da:	460c      	mov	r4, r1
  4086dc:	2101      	movs	r1, #1
  4086de:	f7ff ff3b 	bl	408558 <_Balloc>
  4086e2:	2201      	movs	r2, #1
  4086e4:	6144      	str	r4, [r0, #20]
  4086e6:	6102      	str	r2, [r0, #16]
  4086e8:	bd10      	pop	{r4, pc}
  4086ea:	bf00      	nop

004086ec <__multiply>:
  4086ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4086f0:	690c      	ldr	r4, [r1, #16]
  4086f2:	6915      	ldr	r5, [r2, #16]
  4086f4:	42ac      	cmp	r4, r5
  4086f6:	b083      	sub	sp, #12
  4086f8:	468b      	mov	fp, r1
  4086fa:	4616      	mov	r6, r2
  4086fc:	da04      	bge.n	408708 <__multiply+0x1c>
  4086fe:	4622      	mov	r2, r4
  408700:	46b3      	mov	fp, r6
  408702:	462c      	mov	r4, r5
  408704:	460e      	mov	r6, r1
  408706:	4615      	mov	r5, r2
  408708:	f8db 3008 	ldr.w	r3, [fp, #8]
  40870c:	f8db 1004 	ldr.w	r1, [fp, #4]
  408710:	eb04 0805 	add.w	r8, r4, r5
  408714:	4598      	cmp	r8, r3
  408716:	bfc8      	it	gt
  408718:	3101      	addgt	r1, #1
  40871a:	f7ff ff1d 	bl	408558 <_Balloc>
  40871e:	f100 0914 	add.w	r9, r0, #20
  408722:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  408726:	45d1      	cmp	r9, sl
  408728:	9000      	str	r0, [sp, #0]
  40872a:	d205      	bcs.n	408738 <__multiply+0x4c>
  40872c:	464b      	mov	r3, r9
  40872e:	2100      	movs	r1, #0
  408730:	f843 1b04 	str.w	r1, [r3], #4
  408734:	459a      	cmp	sl, r3
  408736:	d8fb      	bhi.n	408730 <__multiply+0x44>
  408738:	f106 0c14 	add.w	ip, r6, #20
  40873c:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  408740:	f10b 0b14 	add.w	fp, fp, #20
  408744:	459c      	cmp	ip, r3
  408746:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40874a:	d24c      	bcs.n	4087e6 <__multiply+0xfa>
  40874c:	f8cd a004 	str.w	sl, [sp, #4]
  408750:	469a      	mov	sl, r3
  408752:	f8dc 5000 	ldr.w	r5, [ip]
  408756:	b2af      	uxth	r7, r5
  408758:	b1ef      	cbz	r7, 408796 <__multiply+0xaa>
  40875a:	2100      	movs	r1, #0
  40875c:	464d      	mov	r5, r9
  40875e:	465e      	mov	r6, fp
  408760:	460c      	mov	r4, r1
  408762:	f856 2b04 	ldr.w	r2, [r6], #4
  408766:	6828      	ldr	r0, [r5, #0]
  408768:	b293      	uxth	r3, r2
  40876a:	b281      	uxth	r1, r0
  40876c:	fb07 1303 	mla	r3, r7, r3, r1
  408770:	0c12      	lsrs	r2, r2, #16
  408772:	0c01      	lsrs	r1, r0, #16
  408774:	4423      	add	r3, r4
  408776:	fb07 1102 	mla	r1, r7, r2, r1
  40877a:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  40877e:	b29b      	uxth	r3, r3
  408780:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  408784:	45b6      	cmp	lr, r6
  408786:	f845 3b04 	str.w	r3, [r5], #4
  40878a:	ea4f 4411 	mov.w	r4, r1, lsr #16
  40878e:	d8e8      	bhi.n	408762 <__multiply+0x76>
  408790:	602c      	str	r4, [r5, #0]
  408792:	f8dc 5000 	ldr.w	r5, [ip]
  408796:	0c2d      	lsrs	r5, r5, #16
  408798:	d01d      	beq.n	4087d6 <__multiply+0xea>
  40879a:	f8d9 3000 	ldr.w	r3, [r9]
  40879e:	4648      	mov	r0, r9
  4087a0:	461c      	mov	r4, r3
  4087a2:	4659      	mov	r1, fp
  4087a4:	2200      	movs	r2, #0
  4087a6:	880e      	ldrh	r6, [r1, #0]
  4087a8:	0c24      	lsrs	r4, r4, #16
  4087aa:	fb05 4406 	mla	r4, r5, r6, r4
  4087ae:	4422      	add	r2, r4
  4087b0:	b29b      	uxth	r3, r3
  4087b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4087b6:	f840 3b04 	str.w	r3, [r0], #4
  4087ba:	f851 3b04 	ldr.w	r3, [r1], #4
  4087be:	6804      	ldr	r4, [r0, #0]
  4087c0:	0c1b      	lsrs	r3, r3, #16
  4087c2:	b2a6      	uxth	r6, r4
  4087c4:	fb05 6303 	mla	r3, r5, r3, r6
  4087c8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4087cc:	458e      	cmp	lr, r1
  4087ce:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4087d2:	d8e8      	bhi.n	4087a6 <__multiply+0xba>
  4087d4:	6003      	str	r3, [r0, #0]
  4087d6:	f10c 0c04 	add.w	ip, ip, #4
  4087da:	45e2      	cmp	sl, ip
  4087dc:	f109 0904 	add.w	r9, r9, #4
  4087e0:	d8b7      	bhi.n	408752 <__multiply+0x66>
  4087e2:	f8dd a004 	ldr.w	sl, [sp, #4]
  4087e6:	f1b8 0f00 	cmp.w	r8, #0
  4087ea:	dd0b      	ble.n	408804 <__multiply+0x118>
  4087ec:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  4087f0:	f1aa 0a04 	sub.w	sl, sl, #4
  4087f4:	b11b      	cbz	r3, 4087fe <__multiply+0x112>
  4087f6:	e005      	b.n	408804 <__multiply+0x118>
  4087f8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  4087fc:	b913      	cbnz	r3, 408804 <__multiply+0x118>
  4087fe:	f1b8 0801 	subs.w	r8, r8, #1
  408802:	d1f9      	bne.n	4087f8 <__multiply+0x10c>
  408804:	9800      	ldr	r0, [sp, #0]
  408806:	f8c0 8010 	str.w	r8, [r0, #16]
  40880a:	b003      	add	sp, #12
  40880c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00408810 <__pow5mult>:
  408810:	f012 0303 	ands.w	r3, r2, #3
  408814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408818:	4614      	mov	r4, r2
  40881a:	4607      	mov	r7, r0
  40881c:	d12e      	bne.n	40887c <__pow5mult+0x6c>
  40881e:	460d      	mov	r5, r1
  408820:	10a4      	asrs	r4, r4, #2
  408822:	d01c      	beq.n	40885e <__pow5mult+0x4e>
  408824:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  408826:	b396      	cbz	r6, 40888e <__pow5mult+0x7e>
  408828:	07e3      	lsls	r3, r4, #31
  40882a:	f04f 0800 	mov.w	r8, #0
  40882e:	d406      	bmi.n	40883e <__pow5mult+0x2e>
  408830:	1064      	asrs	r4, r4, #1
  408832:	d014      	beq.n	40885e <__pow5mult+0x4e>
  408834:	6830      	ldr	r0, [r6, #0]
  408836:	b1a8      	cbz	r0, 408864 <__pow5mult+0x54>
  408838:	4606      	mov	r6, r0
  40883a:	07e3      	lsls	r3, r4, #31
  40883c:	d5f8      	bpl.n	408830 <__pow5mult+0x20>
  40883e:	4632      	mov	r2, r6
  408840:	4629      	mov	r1, r5
  408842:	4638      	mov	r0, r7
  408844:	f7ff ff52 	bl	4086ec <__multiply>
  408848:	b1b5      	cbz	r5, 408878 <__pow5mult+0x68>
  40884a:	686a      	ldr	r2, [r5, #4]
  40884c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40884e:	1064      	asrs	r4, r4, #1
  408850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408854:	6029      	str	r1, [r5, #0]
  408856:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40885a:	4605      	mov	r5, r0
  40885c:	d1ea      	bne.n	408834 <__pow5mult+0x24>
  40885e:	4628      	mov	r0, r5
  408860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408864:	4632      	mov	r2, r6
  408866:	4631      	mov	r1, r6
  408868:	4638      	mov	r0, r7
  40886a:	f7ff ff3f 	bl	4086ec <__multiply>
  40886e:	6030      	str	r0, [r6, #0]
  408870:	f8c0 8000 	str.w	r8, [r0]
  408874:	4606      	mov	r6, r0
  408876:	e7e0      	b.n	40883a <__pow5mult+0x2a>
  408878:	4605      	mov	r5, r0
  40887a:	e7d9      	b.n	408830 <__pow5mult+0x20>
  40887c:	1e5a      	subs	r2, r3, #1
  40887e:	4d0b      	ldr	r5, [pc, #44]	; (4088ac <__pow5mult+0x9c>)
  408880:	2300      	movs	r3, #0
  408882:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  408886:	f7ff fe97 	bl	4085b8 <__multadd>
  40888a:	4605      	mov	r5, r0
  40888c:	e7c8      	b.n	408820 <__pow5mult+0x10>
  40888e:	2101      	movs	r1, #1
  408890:	4638      	mov	r0, r7
  408892:	f7ff fe61 	bl	408558 <_Balloc>
  408896:	f240 2171 	movw	r1, #625	; 0x271
  40889a:	2201      	movs	r2, #1
  40889c:	2300      	movs	r3, #0
  40889e:	6141      	str	r1, [r0, #20]
  4088a0:	6102      	str	r2, [r0, #16]
  4088a2:	4606      	mov	r6, r0
  4088a4:	64b8      	str	r0, [r7, #72]	; 0x48
  4088a6:	6003      	str	r3, [r0, #0]
  4088a8:	e7be      	b.n	408828 <__pow5mult+0x18>
  4088aa:	bf00      	nop
  4088ac:	0040a340 	.word	0x0040a340

004088b0 <__lshift>:
  4088b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4088b4:	4691      	mov	r9, r2
  4088b6:	690a      	ldr	r2, [r1, #16]
  4088b8:	688b      	ldr	r3, [r1, #8]
  4088ba:	ea4f 1469 	mov.w	r4, r9, asr #5
  4088be:	eb04 0802 	add.w	r8, r4, r2
  4088c2:	f108 0501 	add.w	r5, r8, #1
  4088c6:	429d      	cmp	r5, r3
  4088c8:	460e      	mov	r6, r1
  4088ca:	4607      	mov	r7, r0
  4088cc:	6849      	ldr	r1, [r1, #4]
  4088ce:	dd04      	ble.n	4088da <__lshift+0x2a>
  4088d0:	005b      	lsls	r3, r3, #1
  4088d2:	429d      	cmp	r5, r3
  4088d4:	f101 0101 	add.w	r1, r1, #1
  4088d8:	dcfa      	bgt.n	4088d0 <__lshift+0x20>
  4088da:	4638      	mov	r0, r7
  4088dc:	f7ff fe3c 	bl	408558 <_Balloc>
  4088e0:	2c00      	cmp	r4, #0
  4088e2:	f100 0314 	add.w	r3, r0, #20
  4088e6:	dd06      	ble.n	4088f6 <__lshift+0x46>
  4088e8:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  4088ec:	2100      	movs	r1, #0
  4088ee:	f843 1b04 	str.w	r1, [r3], #4
  4088f2:	429a      	cmp	r2, r3
  4088f4:	d1fb      	bne.n	4088ee <__lshift+0x3e>
  4088f6:	6934      	ldr	r4, [r6, #16]
  4088f8:	f106 0114 	add.w	r1, r6, #20
  4088fc:	f019 091f 	ands.w	r9, r9, #31
  408900:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  408904:	d01d      	beq.n	408942 <__lshift+0x92>
  408906:	f1c9 0c20 	rsb	ip, r9, #32
  40890a:	2200      	movs	r2, #0
  40890c:	680c      	ldr	r4, [r1, #0]
  40890e:	fa04 f409 	lsl.w	r4, r4, r9
  408912:	4314      	orrs	r4, r2
  408914:	f843 4b04 	str.w	r4, [r3], #4
  408918:	f851 2b04 	ldr.w	r2, [r1], #4
  40891c:	458e      	cmp	lr, r1
  40891e:	fa22 f20c 	lsr.w	r2, r2, ip
  408922:	d8f3      	bhi.n	40890c <__lshift+0x5c>
  408924:	601a      	str	r2, [r3, #0]
  408926:	b10a      	cbz	r2, 40892c <__lshift+0x7c>
  408928:	f108 0502 	add.w	r5, r8, #2
  40892c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  40892e:	6872      	ldr	r2, [r6, #4]
  408930:	3d01      	subs	r5, #1
  408932:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  408936:	6105      	str	r5, [r0, #16]
  408938:	6031      	str	r1, [r6, #0]
  40893a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  40893e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  408942:	3b04      	subs	r3, #4
  408944:	f851 2b04 	ldr.w	r2, [r1], #4
  408948:	f843 2f04 	str.w	r2, [r3, #4]!
  40894c:	458e      	cmp	lr, r1
  40894e:	d8f9      	bhi.n	408944 <__lshift+0x94>
  408950:	e7ec      	b.n	40892c <__lshift+0x7c>
  408952:	bf00      	nop

00408954 <__mcmp>:
  408954:	b430      	push	{r4, r5}
  408956:	690b      	ldr	r3, [r1, #16]
  408958:	4605      	mov	r5, r0
  40895a:	6900      	ldr	r0, [r0, #16]
  40895c:	1ac0      	subs	r0, r0, r3
  40895e:	d10f      	bne.n	408980 <__mcmp+0x2c>
  408960:	009b      	lsls	r3, r3, #2
  408962:	3514      	adds	r5, #20
  408964:	3114      	adds	r1, #20
  408966:	4419      	add	r1, r3
  408968:	442b      	add	r3, r5
  40896a:	e001      	b.n	408970 <__mcmp+0x1c>
  40896c:	429d      	cmp	r5, r3
  40896e:	d207      	bcs.n	408980 <__mcmp+0x2c>
  408970:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  408974:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  408978:	4294      	cmp	r4, r2
  40897a:	d0f7      	beq.n	40896c <__mcmp+0x18>
  40897c:	d302      	bcc.n	408984 <__mcmp+0x30>
  40897e:	2001      	movs	r0, #1
  408980:	bc30      	pop	{r4, r5}
  408982:	4770      	bx	lr
  408984:	f04f 30ff 	mov.w	r0, #4294967295
  408988:	e7fa      	b.n	408980 <__mcmp+0x2c>
  40898a:	bf00      	nop

0040898c <__mdiff>:
  40898c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408990:	690f      	ldr	r7, [r1, #16]
  408992:	460e      	mov	r6, r1
  408994:	6911      	ldr	r1, [r2, #16]
  408996:	1a7f      	subs	r7, r7, r1
  408998:	2f00      	cmp	r7, #0
  40899a:	4690      	mov	r8, r2
  40899c:	d117      	bne.n	4089ce <__mdiff+0x42>
  40899e:	0089      	lsls	r1, r1, #2
  4089a0:	f106 0514 	add.w	r5, r6, #20
  4089a4:	f102 0e14 	add.w	lr, r2, #20
  4089a8:	186b      	adds	r3, r5, r1
  4089aa:	4471      	add	r1, lr
  4089ac:	e001      	b.n	4089b2 <__mdiff+0x26>
  4089ae:	429d      	cmp	r5, r3
  4089b0:	d25c      	bcs.n	408a6c <__mdiff+0xe0>
  4089b2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4089b6:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4089ba:	42a2      	cmp	r2, r4
  4089bc:	d0f7      	beq.n	4089ae <__mdiff+0x22>
  4089be:	d25e      	bcs.n	408a7e <__mdiff+0xf2>
  4089c0:	4633      	mov	r3, r6
  4089c2:	462c      	mov	r4, r5
  4089c4:	4646      	mov	r6, r8
  4089c6:	4675      	mov	r5, lr
  4089c8:	4698      	mov	r8, r3
  4089ca:	2701      	movs	r7, #1
  4089cc:	e005      	b.n	4089da <__mdiff+0x4e>
  4089ce:	db58      	blt.n	408a82 <__mdiff+0xf6>
  4089d0:	f106 0514 	add.w	r5, r6, #20
  4089d4:	f108 0414 	add.w	r4, r8, #20
  4089d8:	2700      	movs	r7, #0
  4089da:	6871      	ldr	r1, [r6, #4]
  4089dc:	f7ff fdbc 	bl	408558 <_Balloc>
  4089e0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4089e4:	6936      	ldr	r6, [r6, #16]
  4089e6:	60c7      	str	r7, [r0, #12]
  4089e8:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  4089ec:	46a6      	mov	lr, r4
  4089ee:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  4089f2:	f100 0414 	add.w	r4, r0, #20
  4089f6:	2300      	movs	r3, #0
  4089f8:	f85e 1b04 	ldr.w	r1, [lr], #4
  4089fc:	f855 8b04 	ldr.w	r8, [r5], #4
  408a00:	b28a      	uxth	r2, r1
  408a02:	fa13 f388 	uxtah	r3, r3, r8
  408a06:	0c09      	lsrs	r1, r1, #16
  408a08:	1a9a      	subs	r2, r3, r2
  408a0a:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  408a0e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  408a12:	b292      	uxth	r2, r2
  408a14:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  408a18:	45f4      	cmp	ip, lr
  408a1a:	f844 2b04 	str.w	r2, [r4], #4
  408a1e:	ea4f 4323 	mov.w	r3, r3, asr #16
  408a22:	d8e9      	bhi.n	4089f8 <__mdiff+0x6c>
  408a24:	42af      	cmp	r7, r5
  408a26:	d917      	bls.n	408a58 <__mdiff+0xcc>
  408a28:	46a4      	mov	ip, r4
  408a2a:	46ae      	mov	lr, r5
  408a2c:	f85e 2b04 	ldr.w	r2, [lr], #4
  408a30:	fa13 f382 	uxtah	r3, r3, r2
  408a34:	1419      	asrs	r1, r3, #16
  408a36:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  408a3a:	b29b      	uxth	r3, r3
  408a3c:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  408a40:	4577      	cmp	r7, lr
  408a42:	f84c 2b04 	str.w	r2, [ip], #4
  408a46:	ea4f 4321 	mov.w	r3, r1, asr #16
  408a4a:	d8ef      	bhi.n	408a2c <__mdiff+0xa0>
  408a4c:	43ed      	mvns	r5, r5
  408a4e:	442f      	add	r7, r5
  408a50:	f027 0703 	bic.w	r7, r7, #3
  408a54:	3704      	adds	r7, #4
  408a56:	443c      	add	r4, r7
  408a58:	3c04      	subs	r4, #4
  408a5a:	b922      	cbnz	r2, 408a66 <__mdiff+0xda>
  408a5c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  408a60:	3e01      	subs	r6, #1
  408a62:	2b00      	cmp	r3, #0
  408a64:	d0fa      	beq.n	408a5c <__mdiff+0xd0>
  408a66:	6106      	str	r6, [r0, #16]
  408a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408a6c:	2100      	movs	r1, #0
  408a6e:	f7ff fd73 	bl	408558 <_Balloc>
  408a72:	2201      	movs	r2, #1
  408a74:	2300      	movs	r3, #0
  408a76:	6102      	str	r2, [r0, #16]
  408a78:	6143      	str	r3, [r0, #20]
  408a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408a7e:	4674      	mov	r4, lr
  408a80:	e7ab      	b.n	4089da <__mdiff+0x4e>
  408a82:	4633      	mov	r3, r6
  408a84:	f106 0414 	add.w	r4, r6, #20
  408a88:	f102 0514 	add.w	r5, r2, #20
  408a8c:	4616      	mov	r6, r2
  408a8e:	2701      	movs	r7, #1
  408a90:	4698      	mov	r8, r3
  408a92:	e7a2      	b.n	4089da <__mdiff+0x4e>

00408a94 <__d2b>:
  408a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408a98:	b082      	sub	sp, #8
  408a9a:	2101      	movs	r1, #1
  408a9c:	461c      	mov	r4, r3
  408a9e:	f3c3 570a 	ubfx	r7, r3, #20, #11
  408aa2:	4615      	mov	r5, r2
  408aa4:	9e08      	ldr	r6, [sp, #32]
  408aa6:	f7ff fd57 	bl	408558 <_Balloc>
  408aaa:	f3c4 0413 	ubfx	r4, r4, #0, #20
  408aae:	4680      	mov	r8, r0
  408ab0:	b10f      	cbz	r7, 408ab6 <__d2b+0x22>
  408ab2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  408ab6:	9401      	str	r4, [sp, #4]
  408ab8:	b31d      	cbz	r5, 408b02 <__d2b+0x6e>
  408aba:	a802      	add	r0, sp, #8
  408abc:	f840 5d08 	str.w	r5, [r0, #-8]!
  408ac0:	f7ff fdda 	bl	408678 <__lo0bits>
  408ac4:	2800      	cmp	r0, #0
  408ac6:	d134      	bne.n	408b32 <__d2b+0x9e>
  408ac8:	e89d 000c 	ldmia.w	sp, {r2, r3}
  408acc:	f8c8 2014 	str.w	r2, [r8, #20]
  408ad0:	2b00      	cmp	r3, #0
  408ad2:	bf0c      	ite	eq
  408ad4:	2101      	moveq	r1, #1
  408ad6:	2102      	movne	r1, #2
  408ad8:	f8c8 3018 	str.w	r3, [r8, #24]
  408adc:	f8c8 1010 	str.w	r1, [r8, #16]
  408ae0:	b9df      	cbnz	r7, 408b1a <__d2b+0x86>
  408ae2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  408ae6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  408aea:	6030      	str	r0, [r6, #0]
  408aec:	6918      	ldr	r0, [r3, #16]
  408aee:	f7ff fda3 	bl	408638 <__hi0bits>
  408af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408af4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  408af8:	6018      	str	r0, [r3, #0]
  408afa:	4640      	mov	r0, r8
  408afc:	b002      	add	sp, #8
  408afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408b02:	a801      	add	r0, sp, #4
  408b04:	f7ff fdb8 	bl	408678 <__lo0bits>
  408b08:	9b01      	ldr	r3, [sp, #4]
  408b0a:	f8c8 3014 	str.w	r3, [r8, #20]
  408b0e:	2101      	movs	r1, #1
  408b10:	3020      	adds	r0, #32
  408b12:	f8c8 1010 	str.w	r1, [r8, #16]
  408b16:	2f00      	cmp	r7, #0
  408b18:	d0e3      	beq.n	408ae2 <__d2b+0x4e>
  408b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  408b1c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  408b20:	4407      	add	r7, r0
  408b22:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  408b26:	6037      	str	r7, [r6, #0]
  408b28:	6018      	str	r0, [r3, #0]
  408b2a:	4640      	mov	r0, r8
  408b2c:	b002      	add	sp, #8
  408b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  408b32:	e89d 000a 	ldmia.w	sp, {r1, r3}
  408b36:	f1c0 0220 	rsb	r2, r0, #32
  408b3a:	fa03 f202 	lsl.w	r2, r3, r2
  408b3e:	430a      	orrs	r2, r1
  408b40:	40c3      	lsrs	r3, r0
  408b42:	9301      	str	r3, [sp, #4]
  408b44:	f8c8 2014 	str.w	r2, [r8, #20]
  408b48:	e7c2      	b.n	408ad0 <__d2b+0x3c>
  408b4a:	bf00      	nop

00408b4c <_realloc_r>:
  408b4c:	2900      	cmp	r1, #0
  408b4e:	f000 8095 	beq.w	408c7c <_realloc_r+0x130>
  408b52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408b56:	460d      	mov	r5, r1
  408b58:	4616      	mov	r6, r2
  408b5a:	b083      	sub	sp, #12
  408b5c:	4680      	mov	r8, r0
  408b5e:	f106 070b 	add.w	r7, r6, #11
  408b62:	f7fb fbd5 	bl	404310 <__malloc_lock>
  408b66:	f855 ec04 	ldr.w	lr, [r5, #-4]
  408b6a:	2f16      	cmp	r7, #22
  408b6c:	f02e 0403 	bic.w	r4, lr, #3
  408b70:	f1a5 0908 	sub.w	r9, r5, #8
  408b74:	d83c      	bhi.n	408bf0 <_realloc_r+0xa4>
  408b76:	2210      	movs	r2, #16
  408b78:	4617      	mov	r7, r2
  408b7a:	42be      	cmp	r6, r7
  408b7c:	d83d      	bhi.n	408bfa <_realloc_r+0xae>
  408b7e:	4294      	cmp	r4, r2
  408b80:	da43      	bge.n	408c0a <_realloc_r+0xbe>
  408b82:	4bc4      	ldr	r3, [pc, #784]	; (408e94 <_realloc_r+0x348>)
  408b84:	6899      	ldr	r1, [r3, #8]
  408b86:	eb09 0004 	add.w	r0, r9, r4
  408b8a:	4288      	cmp	r0, r1
  408b8c:	f000 80b4 	beq.w	408cf8 <_realloc_r+0x1ac>
  408b90:	6843      	ldr	r3, [r0, #4]
  408b92:	f023 0101 	bic.w	r1, r3, #1
  408b96:	4401      	add	r1, r0
  408b98:	6849      	ldr	r1, [r1, #4]
  408b9a:	07c9      	lsls	r1, r1, #31
  408b9c:	d54c      	bpl.n	408c38 <_realloc_r+0xec>
  408b9e:	f01e 0f01 	tst.w	lr, #1
  408ba2:	f000 809b 	beq.w	408cdc <_realloc_r+0x190>
  408ba6:	4631      	mov	r1, r6
  408ba8:	4640      	mov	r0, r8
  408baa:	f7fb f819 	bl	403be0 <_malloc_r>
  408bae:	4606      	mov	r6, r0
  408bb0:	2800      	cmp	r0, #0
  408bb2:	d03a      	beq.n	408c2a <_realloc_r+0xde>
  408bb4:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408bb8:	f023 0301 	bic.w	r3, r3, #1
  408bbc:	444b      	add	r3, r9
  408bbe:	f1a0 0208 	sub.w	r2, r0, #8
  408bc2:	429a      	cmp	r2, r3
  408bc4:	f000 8121 	beq.w	408e0a <_realloc_r+0x2be>
  408bc8:	1f22      	subs	r2, r4, #4
  408bca:	2a24      	cmp	r2, #36	; 0x24
  408bcc:	f200 8107 	bhi.w	408dde <_realloc_r+0x292>
  408bd0:	2a13      	cmp	r2, #19
  408bd2:	f200 80db 	bhi.w	408d8c <_realloc_r+0x240>
  408bd6:	4603      	mov	r3, r0
  408bd8:	462a      	mov	r2, r5
  408bda:	6811      	ldr	r1, [r2, #0]
  408bdc:	6019      	str	r1, [r3, #0]
  408bde:	6851      	ldr	r1, [r2, #4]
  408be0:	6059      	str	r1, [r3, #4]
  408be2:	6892      	ldr	r2, [r2, #8]
  408be4:	609a      	str	r2, [r3, #8]
  408be6:	4629      	mov	r1, r5
  408be8:	4640      	mov	r0, r8
  408bea:	f7ff f8c1 	bl	407d70 <_free_r>
  408bee:	e01c      	b.n	408c2a <_realloc_r+0xde>
  408bf0:	f027 0707 	bic.w	r7, r7, #7
  408bf4:	2f00      	cmp	r7, #0
  408bf6:	463a      	mov	r2, r7
  408bf8:	dabf      	bge.n	408b7a <_realloc_r+0x2e>
  408bfa:	2600      	movs	r6, #0
  408bfc:	230c      	movs	r3, #12
  408bfe:	4630      	mov	r0, r6
  408c00:	f8c8 3000 	str.w	r3, [r8]
  408c04:	b003      	add	sp, #12
  408c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408c0a:	462e      	mov	r6, r5
  408c0c:	1be3      	subs	r3, r4, r7
  408c0e:	2b0f      	cmp	r3, #15
  408c10:	d81e      	bhi.n	408c50 <_realloc_r+0x104>
  408c12:	f8d9 3004 	ldr.w	r3, [r9, #4]
  408c16:	f003 0301 	and.w	r3, r3, #1
  408c1a:	4323      	orrs	r3, r4
  408c1c:	444c      	add	r4, r9
  408c1e:	f8c9 3004 	str.w	r3, [r9, #4]
  408c22:	6863      	ldr	r3, [r4, #4]
  408c24:	f043 0301 	orr.w	r3, r3, #1
  408c28:	6063      	str	r3, [r4, #4]
  408c2a:	4640      	mov	r0, r8
  408c2c:	f7fb fb76 	bl	40431c <__malloc_unlock>
  408c30:	4630      	mov	r0, r6
  408c32:	b003      	add	sp, #12
  408c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  408c38:	f023 0303 	bic.w	r3, r3, #3
  408c3c:	18e1      	adds	r1, r4, r3
  408c3e:	4291      	cmp	r1, r2
  408c40:	db1f      	blt.n	408c82 <_realloc_r+0x136>
  408c42:	68c3      	ldr	r3, [r0, #12]
  408c44:	6882      	ldr	r2, [r0, #8]
  408c46:	462e      	mov	r6, r5
  408c48:	60d3      	str	r3, [r2, #12]
  408c4a:	460c      	mov	r4, r1
  408c4c:	609a      	str	r2, [r3, #8]
  408c4e:	e7dd      	b.n	408c0c <_realloc_r+0xc0>
  408c50:	f8d9 2004 	ldr.w	r2, [r9, #4]
  408c54:	eb09 0107 	add.w	r1, r9, r7
  408c58:	f002 0201 	and.w	r2, r2, #1
  408c5c:	444c      	add	r4, r9
  408c5e:	f043 0301 	orr.w	r3, r3, #1
  408c62:	4317      	orrs	r7, r2
  408c64:	f8c9 7004 	str.w	r7, [r9, #4]
  408c68:	604b      	str	r3, [r1, #4]
  408c6a:	6863      	ldr	r3, [r4, #4]
  408c6c:	f043 0301 	orr.w	r3, r3, #1
  408c70:	3108      	adds	r1, #8
  408c72:	6063      	str	r3, [r4, #4]
  408c74:	4640      	mov	r0, r8
  408c76:	f7ff f87b 	bl	407d70 <_free_r>
  408c7a:	e7d6      	b.n	408c2a <_realloc_r+0xde>
  408c7c:	4611      	mov	r1, r2
  408c7e:	f7fa bfaf 	b.w	403be0 <_malloc_r>
  408c82:	f01e 0f01 	tst.w	lr, #1
  408c86:	d18e      	bne.n	408ba6 <_realloc_r+0x5a>
  408c88:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408c8c:	eba9 0a01 	sub.w	sl, r9, r1
  408c90:	f8da 1004 	ldr.w	r1, [sl, #4]
  408c94:	f021 0103 	bic.w	r1, r1, #3
  408c98:	440b      	add	r3, r1
  408c9a:	4423      	add	r3, r4
  408c9c:	4293      	cmp	r3, r2
  408c9e:	db25      	blt.n	408cec <_realloc_r+0x1a0>
  408ca0:	68c2      	ldr	r2, [r0, #12]
  408ca2:	6881      	ldr	r1, [r0, #8]
  408ca4:	4656      	mov	r6, sl
  408ca6:	60ca      	str	r2, [r1, #12]
  408ca8:	6091      	str	r1, [r2, #8]
  408caa:	f8da 100c 	ldr.w	r1, [sl, #12]
  408cae:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408cb2:	1f22      	subs	r2, r4, #4
  408cb4:	2a24      	cmp	r2, #36	; 0x24
  408cb6:	60c1      	str	r1, [r0, #12]
  408cb8:	6088      	str	r0, [r1, #8]
  408cba:	f200 8094 	bhi.w	408de6 <_realloc_r+0x29a>
  408cbe:	2a13      	cmp	r2, #19
  408cc0:	d96f      	bls.n	408da2 <_realloc_r+0x256>
  408cc2:	6829      	ldr	r1, [r5, #0]
  408cc4:	f8ca 1008 	str.w	r1, [sl, #8]
  408cc8:	6869      	ldr	r1, [r5, #4]
  408cca:	f8ca 100c 	str.w	r1, [sl, #12]
  408cce:	2a1b      	cmp	r2, #27
  408cd0:	f200 80a2 	bhi.w	408e18 <_realloc_r+0x2cc>
  408cd4:	3508      	adds	r5, #8
  408cd6:	f10a 0210 	add.w	r2, sl, #16
  408cda:	e063      	b.n	408da4 <_realloc_r+0x258>
  408cdc:	f855 3c08 	ldr.w	r3, [r5, #-8]
  408ce0:	eba9 0a03 	sub.w	sl, r9, r3
  408ce4:	f8da 1004 	ldr.w	r1, [sl, #4]
  408ce8:	f021 0103 	bic.w	r1, r1, #3
  408cec:	1863      	adds	r3, r4, r1
  408cee:	4293      	cmp	r3, r2
  408cf0:	f6ff af59 	blt.w	408ba6 <_realloc_r+0x5a>
  408cf4:	4656      	mov	r6, sl
  408cf6:	e7d8      	b.n	408caa <_realloc_r+0x15e>
  408cf8:	6841      	ldr	r1, [r0, #4]
  408cfa:	f021 0b03 	bic.w	fp, r1, #3
  408cfe:	44a3      	add	fp, r4
  408d00:	f107 0010 	add.w	r0, r7, #16
  408d04:	4583      	cmp	fp, r0
  408d06:	da56      	bge.n	408db6 <_realloc_r+0x26a>
  408d08:	f01e 0f01 	tst.w	lr, #1
  408d0c:	f47f af4b 	bne.w	408ba6 <_realloc_r+0x5a>
  408d10:	f855 1c08 	ldr.w	r1, [r5, #-8]
  408d14:	eba9 0a01 	sub.w	sl, r9, r1
  408d18:	f8da 1004 	ldr.w	r1, [sl, #4]
  408d1c:	f021 0103 	bic.w	r1, r1, #3
  408d20:	448b      	add	fp, r1
  408d22:	4558      	cmp	r0, fp
  408d24:	dce2      	bgt.n	408cec <_realloc_r+0x1a0>
  408d26:	4656      	mov	r6, sl
  408d28:	f8da 100c 	ldr.w	r1, [sl, #12]
  408d2c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  408d30:	1f22      	subs	r2, r4, #4
  408d32:	2a24      	cmp	r2, #36	; 0x24
  408d34:	60c1      	str	r1, [r0, #12]
  408d36:	6088      	str	r0, [r1, #8]
  408d38:	f200 808f 	bhi.w	408e5a <_realloc_r+0x30e>
  408d3c:	2a13      	cmp	r2, #19
  408d3e:	f240 808a 	bls.w	408e56 <_realloc_r+0x30a>
  408d42:	6829      	ldr	r1, [r5, #0]
  408d44:	f8ca 1008 	str.w	r1, [sl, #8]
  408d48:	6869      	ldr	r1, [r5, #4]
  408d4a:	f8ca 100c 	str.w	r1, [sl, #12]
  408d4e:	2a1b      	cmp	r2, #27
  408d50:	f200 808a 	bhi.w	408e68 <_realloc_r+0x31c>
  408d54:	3508      	adds	r5, #8
  408d56:	f10a 0210 	add.w	r2, sl, #16
  408d5a:	6829      	ldr	r1, [r5, #0]
  408d5c:	6011      	str	r1, [r2, #0]
  408d5e:	6869      	ldr	r1, [r5, #4]
  408d60:	6051      	str	r1, [r2, #4]
  408d62:	68a9      	ldr	r1, [r5, #8]
  408d64:	6091      	str	r1, [r2, #8]
  408d66:	eb0a 0107 	add.w	r1, sl, r7
  408d6a:	ebab 0207 	sub.w	r2, fp, r7
  408d6e:	f042 0201 	orr.w	r2, r2, #1
  408d72:	6099      	str	r1, [r3, #8]
  408d74:	604a      	str	r2, [r1, #4]
  408d76:	f8da 3004 	ldr.w	r3, [sl, #4]
  408d7a:	f003 0301 	and.w	r3, r3, #1
  408d7e:	431f      	orrs	r7, r3
  408d80:	4640      	mov	r0, r8
  408d82:	f8ca 7004 	str.w	r7, [sl, #4]
  408d86:	f7fb fac9 	bl	40431c <__malloc_unlock>
  408d8a:	e751      	b.n	408c30 <_realloc_r+0xe4>
  408d8c:	682b      	ldr	r3, [r5, #0]
  408d8e:	6003      	str	r3, [r0, #0]
  408d90:	686b      	ldr	r3, [r5, #4]
  408d92:	6043      	str	r3, [r0, #4]
  408d94:	2a1b      	cmp	r2, #27
  408d96:	d82d      	bhi.n	408df4 <_realloc_r+0x2a8>
  408d98:	f100 0308 	add.w	r3, r0, #8
  408d9c:	f105 0208 	add.w	r2, r5, #8
  408da0:	e71b      	b.n	408bda <_realloc_r+0x8e>
  408da2:	4632      	mov	r2, r6
  408da4:	6829      	ldr	r1, [r5, #0]
  408da6:	6011      	str	r1, [r2, #0]
  408da8:	6869      	ldr	r1, [r5, #4]
  408daa:	6051      	str	r1, [r2, #4]
  408dac:	68a9      	ldr	r1, [r5, #8]
  408dae:	6091      	str	r1, [r2, #8]
  408db0:	461c      	mov	r4, r3
  408db2:	46d1      	mov	r9, sl
  408db4:	e72a      	b.n	408c0c <_realloc_r+0xc0>
  408db6:	eb09 0107 	add.w	r1, r9, r7
  408dba:	ebab 0b07 	sub.w	fp, fp, r7
  408dbe:	f04b 0201 	orr.w	r2, fp, #1
  408dc2:	6099      	str	r1, [r3, #8]
  408dc4:	604a      	str	r2, [r1, #4]
  408dc6:	f855 3c04 	ldr.w	r3, [r5, #-4]
  408dca:	f003 0301 	and.w	r3, r3, #1
  408dce:	431f      	orrs	r7, r3
  408dd0:	4640      	mov	r0, r8
  408dd2:	f845 7c04 	str.w	r7, [r5, #-4]
  408dd6:	f7fb faa1 	bl	40431c <__malloc_unlock>
  408dda:	462e      	mov	r6, r5
  408ddc:	e728      	b.n	408c30 <_realloc_r+0xe4>
  408dde:	4629      	mov	r1, r5
  408de0:	f7ff fb56 	bl	408490 <memmove>
  408de4:	e6ff      	b.n	408be6 <_realloc_r+0x9a>
  408de6:	4629      	mov	r1, r5
  408de8:	4630      	mov	r0, r6
  408dea:	461c      	mov	r4, r3
  408dec:	46d1      	mov	r9, sl
  408dee:	f7ff fb4f 	bl	408490 <memmove>
  408df2:	e70b      	b.n	408c0c <_realloc_r+0xc0>
  408df4:	68ab      	ldr	r3, [r5, #8]
  408df6:	6083      	str	r3, [r0, #8]
  408df8:	68eb      	ldr	r3, [r5, #12]
  408dfa:	60c3      	str	r3, [r0, #12]
  408dfc:	2a24      	cmp	r2, #36	; 0x24
  408dfe:	d017      	beq.n	408e30 <_realloc_r+0x2e4>
  408e00:	f100 0310 	add.w	r3, r0, #16
  408e04:	f105 0210 	add.w	r2, r5, #16
  408e08:	e6e7      	b.n	408bda <_realloc_r+0x8e>
  408e0a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  408e0e:	f023 0303 	bic.w	r3, r3, #3
  408e12:	441c      	add	r4, r3
  408e14:	462e      	mov	r6, r5
  408e16:	e6f9      	b.n	408c0c <_realloc_r+0xc0>
  408e18:	68a9      	ldr	r1, [r5, #8]
  408e1a:	f8ca 1010 	str.w	r1, [sl, #16]
  408e1e:	68e9      	ldr	r1, [r5, #12]
  408e20:	f8ca 1014 	str.w	r1, [sl, #20]
  408e24:	2a24      	cmp	r2, #36	; 0x24
  408e26:	d00c      	beq.n	408e42 <_realloc_r+0x2f6>
  408e28:	3510      	adds	r5, #16
  408e2a:	f10a 0218 	add.w	r2, sl, #24
  408e2e:	e7b9      	b.n	408da4 <_realloc_r+0x258>
  408e30:	692b      	ldr	r3, [r5, #16]
  408e32:	6103      	str	r3, [r0, #16]
  408e34:	696b      	ldr	r3, [r5, #20]
  408e36:	6143      	str	r3, [r0, #20]
  408e38:	f105 0218 	add.w	r2, r5, #24
  408e3c:	f100 0318 	add.w	r3, r0, #24
  408e40:	e6cb      	b.n	408bda <_realloc_r+0x8e>
  408e42:	692a      	ldr	r2, [r5, #16]
  408e44:	f8ca 2018 	str.w	r2, [sl, #24]
  408e48:	696a      	ldr	r2, [r5, #20]
  408e4a:	f8ca 201c 	str.w	r2, [sl, #28]
  408e4e:	3518      	adds	r5, #24
  408e50:	f10a 0220 	add.w	r2, sl, #32
  408e54:	e7a6      	b.n	408da4 <_realloc_r+0x258>
  408e56:	4632      	mov	r2, r6
  408e58:	e77f      	b.n	408d5a <_realloc_r+0x20e>
  408e5a:	4629      	mov	r1, r5
  408e5c:	4630      	mov	r0, r6
  408e5e:	9301      	str	r3, [sp, #4]
  408e60:	f7ff fb16 	bl	408490 <memmove>
  408e64:	9b01      	ldr	r3, [sp, #4]
  408e66:	e77e      	b.n	408d66 <_realloc_r+0x21a>
  408e68:	68a9      	ldr	r1, [r5, #8]
  408e6a:	f8ca 1010 	str.w	r1, [sl, #16]
  408e6e:	68e9      	ldr	r1, [r5, #12]
  408e70:	f8ca 1014 	str.w	r1, [sl, #20]
  408e74:	2a24      	cmp	r2, #36	; 0x24
  408e76:	d003      	beq.n	408e80 <_realloc_r+0x334>
  408e78:	3510      	adds	r5, #16
  408e7a:	f10a 0218 	add.w	r2, sl, #24
  408e7e:	e76c      	b.n	408d5a <_realloc_r+0x20e>
  408e80:	692a      	ldr	r2, [r5, #16]
  408e82:	f8ca 2018 	str.w	r2, [sl, #24]
  408e86:	696a      	ldr	r2, [r5, #20]
  408e88:	f8ca 201c 	str.w	r2, [sl, #28]
  408e8c:	3518      	adds	r5, #24
  408e8e:	f10a 0220 	add.w	r2, sl, #32
  408e92:	e762      	b.n	408d5a <_realloc_r+0x20e>
  408e94:	20400438 	.word	0x20400438

00408e98 <__sread>:
  408e98:	b510      	push	{r4, lr}
  408e9a:	460c      	mov	r4, r1
  408e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408ea0:	f000 faa4 	bl	4093ec <_read_r>
  408ea4:	2800      	cmp	r0, #0
  408ea6:	db03      	blt.n	408eb0 <__sread+0x18>
  408ea8:	6d23      	ldr	r3, [r4, #80]	; 0x50
  408eaa:	4403      	add	r3, r0
  408eac:	6523      	str	r3, [r4, #80]	; 0x50
  408eae:	bd10      	pop	{r4, pc}
  408eb0:	89a3      	ldrh	r3, [r4, #12]
  408eb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  408eb6:	81a3      	strh	r3, [r4, #12]
  408eb8:	bd10      	pop	{r4, pc}
  408eba:	bf00      	nop

00408ebc <__swrite>:
  408ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  408ec0:	4616      	mov	r6, r2
  408ec2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  408ec6:	461f      	mov	r7, r3
  408ec8:	05d3      	lsls	r3, r2, #23
  408eca:	460c      	mov	r4, r1
  408ecc:	4605      	mov	r5, r0
  408ece:	d507      	bpl.n	408ee0 <__swrite+0x24>
  408ed0:	2200      	movs	r2, #0
  408ed2:	2302      	movs	r3, #2
  408ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408ed8:	f000 fa72 	bl	4093c0 <_lseek_r>
  408edc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  408ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  408ee4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  408ee8:	81a2      	strh	r2, [r4, #12]
  408eea:	463b      	mov	r3, r7
  408eec:	4632      	mov	r2, r6
  408eee:	4628      	mov	r0, r5
  408ef0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  408ef4:	f000 b922 	b.w	40913c <_write_r>

00408ef8 <__sseek>:
  408ef8:	b510      	push	{r4, lr}
  408efa:	460c      	mov	r4, r1
  408efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408f00:	f000 fa5e 	bl	4093c0 <_lseek_r>
  408f04:	89a3      	ldrh	r3, [r4, #12]
  408f06:	1c42      	adds	r2, r0, #1
  408f08:	bf0e      	itee	eq
  408f0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  408f0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  408f12:	6520      	strne	r0, [r4, #80]	; 0x50
  408f14:	81a3      	strh	r3, [r4, #12]
  408f16:	bd10      	pop	{r4, pc}

00408f18 <__sclose>:
  408f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  408f1c:	f000 b9b6 	b.w	40928c <_close_r>

00408f20 <__ssprint_r>:
  408f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  408f24:	6893      	ldr	r3, [r2, #8]
  408f26:	b083      	sub	sp, #12
  408f28:	4690      	mov	r8, r2
  408f2a:	2b00      	cmp	r3, #0
  408f2c:	d070      	beq.n	409010 <__ssprint_r+0xf0>
  408f2e:	4682      	mov	sl, r0
  408f30:	460c      	mov	r4, r1
  408f32:	6817      	ldr	r7, [r2, #0]
  408f34:	688d      	ldr	r5, [r1, #8]
  408f36:	6808      	ldr	r0, [r1, #0]
  408f38:	e042      	b.n	408fc0 <__ssprint_r+0xa0>
  408f3a:	89a3      	ldrh	r3, [r4, #12]
  408f3c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  408f40:	d02e      	beq.n	408fa0 <__ssprint_r+0x80>
  408f42:	6965      	ldr	r5, [r4, #20]
  408f44:	6921      	ldr	r1, [r4, #16]
  408f46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  408f4a:	eba0 0b01 	sub.w	fp, r0, r1
  408f4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  408f52:	f10b 0001 	add.w	r0, fp, #1
  408f56:	106d      	asrs	r5, r5, #1
  408f58:	4430      	add	r0, r6
  408f5a:	42a8      	cmp	r0, r5
  408f5c:	462a      	mov	r2, r5
  408f5e:	bf84      	itt	hi
  408f60:	4605      	movhi	r5, r0
  408f62:	462a      	movhi	r2, r5
  408f64:	055b      	lsls	r3, r3, #21
  408f66:	d538      	bpl.n	408fda <__ssprint_r+0xba>
  408f68:	4611      	mov	r1, r2
  408f6a:	4650      	mov	r0, sl
  408f6c:	f7fa fe38 	bl	403be0 <_malloc_r>
  408f70:	2800      	cmp	r0, #0
  408f72:	d03c      	beq.n	408fee <__ssprint_r+0xce>
  408f74:	465a      	mov	r2, fp
  408f76:	6921      	ldr	r1, [r4, #16]
  408f78:	9001      	str	r0, [sp, #4]
  408f7a:	f7fb f8e1 	bl	404140 <memcpy>
  408f7e:	89a2      	ldrh	r2, [r4, #12]
  408f80:	9b01      	ldr	r3, [sp, #4]
  408f82:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  408f86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  408f8a:	81a2      	strh	r2, [r4, #12]
  408f8c:	eba5 020b 	sub.w	r2, r5, fp
  408f90:	eb03 000b 	add.w	r0, r3, fp
  408f94:	6165      	str	r5, [r4, #20]
  408f96:	6123      	str	r3, [r4, #16]
  408f98:	6020      	str	r0, [r4, #0]
  408f9a:	60a2      	str	r2, [r4, #8]
  408f9c:	4635      	mov	r5, r6
  408f9e:	46b3      	mov	fp, r6
  408fa0:	465a      	mov	r2, fp
  408fa2:	4649      	mov	r1, r9
  408fa4:	f7ff fa74 	bl	408490 <memmove>
  408fa8:	f8d8 3008 	ldr.w	r3, [r8, #8]
  408fac:	68a2      	ldr	r2, [r4, #8]
  408fae:	6820      	ldr	r0, [r4, #0]
  408fb0:	1b55      	subs	r5, r2, r5
  408fb2:	4458      	add	r0, fp
  408fb4:	1b9e      	subs	r6, r3, r6
  408fb6:	60a5      	str	r5, [r4, #8]
  408fb8:	6020      	str	r0, [r4, #0]
  408fba:	f8c8 6008 	str.w	r6, [r8, #8]
  408fbe:	b33e      	cbz	r6, 409010 <__ssprint_r+0xf0>
  408fc0:	687e      	ldr	r6, [r7, #4]
  408fc2:	463b      	mov	r3, r7
  408fc4:	3708      	adds	r7, #8
  408fc6:	2e00      	cmp	r6, #0
  408fc8:	d0fa      	beq.n	408fc0 <__ssprint_r+0xa0>
  408fca:	42ae      	cmp	r6, r5
  408fcc:	f8d3 9000 	ldr.w	r9, [r3]
  408fd0:	46ab      	mov	fp, r5
  408fd2:	d2b2      	bcs.n	408f3a <__ssprint_r+0x1a>
  408fd4:	4635      	mov	r5, r6
  408fd6:	46b3      	mov	fp, r6
  408fd8:	e7e2      	b.n	408fa0 <__ssprint_r+0x80>
  408fda:	4650      	mov	r0, sl
  408fdc:	f7ff fdb6 	bl	408b4c <_realloc_r>
  408fe0:	4603      	mov	r3, r0
  408fe2:	2800      	cmp	r0, #0
  408fe4:	d1d2      	bne.n	408f8c <__ssprint_r+0x6c>
  408fe6:	6921      	ldr	r1, [r4, #16]
  408fe8:	4650      	mov	r0, sl
  408fea:	f7fe fec1 	bl	407d70 <_free_r>
  408fee:	230c      	movs	r3, #12
  408ff0:	f8ca 3000 	str.w	r3, [sl]
  408ff4:	89a3      	ldrh	r3, [r4, #12]
  408ff6:	2200      	movs	r2, #0
  408ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  408ffc:	f04f 30ff 	mov.w	r0, #4294967295
  409000:	81a3      	strh	r3, [r4, #12]
  409002:	f8c8 2008 	str.w	r2, [r8, #8]
  409006:	f8c8 2004 	str.w	r2, [r8, #4]
  40900a:	b003      	add	sp, #12
  40900c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  409010:	2000      	movs	r0, #0
  409012:	f8c8 0004 	str.w	r0, [r8, #4]
  409016:	b003      	add	sp, #12
  409018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0040901c <__swbuf_r>:
  40901c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40901e:	460d      	mov	r5, r1
  409020:	4614      	mov	r4, r2
  409022:	4606      	mov	r6, r0
  409024:	b110      	cbz	r0, 40902c <__swbuf_r+0x10>
  409026:	6b83      	ldr	r3, [r0, #56]	; 0x38
  409028:	2b00      	cmp	r3, #0
  40902a:	d04b      	beq.n	4090c4 <__swbuf_r+0xa8>
  40902c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  409030:	69a3      	ldr	r3, [r4, #24]
  409032:	60a3      	str	r3, [r4, #8]
  409034:	b291      	uxth	r1, r2
  409036:	0708      	lsls	r0, r1, #28
  409038:	d539      	bpl.n	4090ae <__swbuf_r+0x92>
  40903a:	6923      	ldr	r3, [r4, #16]
  40903c:	2b00      	cmp	r3, #0
  40903e:	d036      	beq.n	4090ae <__swbuf_r+0x92>
  409040:	b2ed      	uxtb	r5, r5
  409042:	0489      	lsls	r1, r1, #18
  409044:	462f      	mov	r7, r5
  409046:	d515      	bpl.n	409074 <__swbuf_r+0x58>
  409048:	6822      	ldr	r2, [r4, #0]
  40904a:	6961      	ldr	r1, [r4, #20]
  40904c:	1ad3      	subs	r3, r2, r3
  40904e:	428b      	cmp	r3, r1
  409050:	da1c      	bge.n	40908c <__swbuf_r+0x70>
  409052:	3301      	adds	r3, #1
  409054:	68a1      	ldr	r1, [r4, #8]
  409056:	1c50      	adds	r0, r2, #1
  409058:	3901      	subs	r1, #1
  40905a:	60a1      	str	r1, [r4, #8]
  40905c:	6020      	str	r0, [r4, #0]
  40905e:	7015      	strb	r5, [r2, #0]
  409060:	6962      	ldr	r2, [r4, #20]
  409062:	429a      	cmp	r2, r3
  409064:	d01a      	beq.n	40909c <__swbuf_r+0x80>
  409066:	89a3      	ldrh	r3, [r4, #12]
  409068:	07db      	lsls	r3, r3, #31
  40906a:	d501      	bpl.n	409070 <__swbuf_r+0x54>
  40906c:	2d0a      	cmp	r5, #10
  40906e:	d015      	beq.n	40909c <__swbuf_r+0x80>
  409070:	4638      	mov	r0, r7
  409072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  409074:	6e61      	ldr	r1, [r4, #100]	; 0x64
  409076:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  40907a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  40907e:	81a2      	strh	r2, [r4, #12]
  409080:	6822      	ldr	r2, [r4, #0]
  409082:	6661      	str	r1, [r4, #100]	; 0x64
  409084:	6961      	ldr	r1, [r4, #20]
  409086:	1ad3      	subs	r3, r2, r3
  409088:	428b      	cmp	r3, r1
  40908a:	dbe2      	blt.n	409052 <__swbuf_r+0x36>
  40908c:	4621      	mov	r1, r4
  40908e:	4630      	mov	r0, r6
  409090:	f7fe fcf0 	bl	407a74 <_fflush_r>
  409094:	b940      	cbnz	r0, 4090a8 <__swbuf_r+0x8c>
  409096:	6822      	ldr	r2, [r4, #0]
  409098:	2301      	movs	r3, #1
  40909a:	e7db      	b.n	409054 <__swbuf_r+0x38>
  40909c:	4621      	mov	r1, r4
  40909e:	4630      	mov	r0, r6
  4090a0:	f7fe fce8 	bl	407a74 <_fflush_r>
  4090a4:	2800      	cmp	r0, #0
  4090a6:	d0e3      	beq.n	409070 <__swbuf_r+0x54>
  4090a8:	f04f 37ff 	mov.w	r7, #4294967295
  4090ac:	e7e0      	b.n	409070 <__swbuf_r+0x54>
  4090ae:	4621      	mov	r1, r4
  4090b0:	4630      	mov	r0, r6
  4090b2:	f7fd fc0b 	bl	4068cc <__swsetup_r>
  4090b6:	2800      	cmp	r0, #0
  4090b8:	d1f6      	bne.n	4090a8 <__swbuf_r+0x8c>
  4090ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4090be:	6923      	ldr	r3, [r4, #16]
  4090c0:	b291      	uxth	r1, r2
  4090c2:	e7bd      	b.n	409040 <__swbuf_r+0x24>
  4090c4:	f7fe fd2e 	bl	407b24 <__sinit>
  4090c8:	e7b0      	b.n	40902c <__swbuf_r+0x10>
  4090ca:	bf00      	nop

004090cc <_wcrtomb_r>:
  4090cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4090ce:	4606      	mov	r6, r0
  4090d0:	b085      	sub	sp, #20
  4090d2:	461f      	mov	r7, r3
  4090d4:	b189      	cbz	r1, 4090fa <_wcrtomb_r+0x2e>
  4090d6:	4c10      	ldr	r4, [pc, #64]	; (409118 <_wcrtomb_r+0x4c>)
  4090d8:	4d10      	ldr	r5, [pc, #64]	; (40911c <_wcrtomb_r+0x50>)
  4090da:	6824      	ldr	r4, [r4, #0]
  4090dc:	6b64      	ldr	r4, [r4, #52]	; 0x34
  4090de:	2c00      	cmp	r4, #0
  4090e0:	bf08      	it	eq
  4090e2:	462c      	moveq	r4, r5
  4090e4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  4090e8:	47a0      	blx	r4
  4090ea:	1c43      	adds	r3, r0, #1
  4090ec:	d103      	bne.n	4090f6 <_wcrtomb_r+0x2a>
  4090ee:	2200      	movs	r2, #0
  4090f0:	238a      	movs	r3, #138	; 0x8a
  4090f2:	603a      	str	r2, [r7, #0]
  4090f4:	6033      	str	r3, [r6, #0]
  4090f6:	b005      	add	sp, #20
  4090f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4090fa:	460c      	mov	r4, r1
  4090fc:	4906      	ldr	r1, [pc, #24]	; (409118 <_wcrtomb_r+0x4c>)
  4090fe:	4a07      	ldr	r2, [pc, #28]	; (40911c <_wcrtomb_r+0x50>)
  409100:	6809      	ldr	r1, [r1, #0]
  409102:	6b49      	ldr	r1, [r1, #52]	; 0x34
  409104:	2900      	cmp	r1, #0
  409106:	bf08      	it	eq
  409108:	4611      	moveq	r1, r2
  40910a:	4622      	mov	r2, r4
  40910c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  409110:	a901      	add	r1, sp, #4
  409112:	47a0      	blx	r4
  409114:	e7e9      	b.n	4090ea <_wcrtomb_r+0x1e>
  409116:	bf00      	nop
  409118:	2040000c 	.word	0x2040000c
  40911c:	2040084c 	.word	0x2040084c

00409120 <__ascii_wctomb>:
  409120:	b121      	cbz	r1, 40912c <__ascii_wctomb+0xc>
  409122:	2aff      	cmp	r2, #255	; 0xff
  409124:	d804      	bhi.n	409130 <__ascii_wctomb+0x10>
  409126:	700a      	strb	r2, [r1, #0]
  409128:	2001      	movs	r0, #1
  40912a:	4770      	bx	lr
  40912c:	4608      	mov	r0, r1
  40912e:	4770      	bx	lr
  409130:	238a      	movs	r3, #138	; 0x8a
  409132:	6003      	str	r3, [r0, #0]
  409134:	f04f 30ff 	mov.w	r0, #4294967295
  409138:	4770      	bx	lr
  40913a:	bf00      	nop

0040913c <_write_r>:
  40913c:	b570      	push	{r4, r5, r6, lr}
  40913e:	460d      	mov	r5, r1
  409140:	4c08      	ldr	r4, [pc, #32]	; (409164 <_write_r+0x28>)
  409142:	4611      	mov	r1, r2
  409144:	4606      	mov	r6, r0
  409146:	461a      	mov	r2, r3
  409148:	4628      	mov	r0, r5
  40914a:	2300      	movs	r3, #0
  40914c:	6023      	str	r3, [r4, #0]
  40914e:	f7f7 f897 	bl	400280 <_write>
  409152:	1c43      	adds	r3, r0, #1
  409154:	d000      	beq.n	409158 <_write_r+0x1c>
  409156:	bd70      	pop	{r4, r5, r6, pc}
  409158:	6823      	ldr	r3, [r4, #0]
  40915a:	2b00      	cmp	r3, #0
  40915c:	d0fb      	beq.n	409156 <_write_r+0x1a>
  40915e:	6033      	str	r3, [r6, #0]
  409160:	bd70      	pop	{r4, r5, r6, pc}
  409162:	bf00      	nop
  409164:	20400d58 	.word	0x20400d58

00409168 <__register_exitproc>:
  409168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40916c:	4d2c      	ldr	r5, [pc, #176]	; (409220 <__register_exitproc+0xb8>)
  40916e:	4606      	mov	r6, r0
  409170:	6828      	ldr	r0, [r5, #0]
  409172:	4698      	mov	r8, r3
  409174:	460f      	mov	r7, r1
  409176:	4691      	mov	r9, r2
  409178:	f7ff f8a2 	bl	4082c0 <__retarget_lock_acquire_recursive>
  40917c:	4b29      	ldr	r3, [pc, #164]	; (409224 <__register_exitproc+0xbc>)
  40917e:	681c      	ldr	r4, [r3, #0]
  409180:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  409184:	2b00      	cmp	r3, #0
  409186:	d03e      	beq.n	409206 <__register_exitproc+0x9e>
  409188:	685a      	ldr	r2, [r3, #4]
  40918a:	2a1f      	cmp	r2, #31
  40918c:	dc1c      	bgt.n	4091c8 <__register_exitproc+0x60>
  40918e:	f102 0e01 	add.w	lr, r2, #1
  409192:	b176      	cbz	r6, 4091b2 <__register_exitproc+0x4a>
  409194:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  409198:	2401      	movs	r4, #1
  40919a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40919e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4091a2:	4094      	lsls	r4, r2
  4091a4:	4320      	orrs	r0, r4
  4091a6:	2e02      	cmp	r6, #2
  4091a8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4091ac:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4091b0:	d023      	beq.n	4091fa <__register_exitproc+0x92>
  4091b2:	3202      	adds	r2, #2
  4091b4:	f8c3 e004 	str.w	lr, [r3, #4]
  4091b8:	6828      	ldr	r0, [r5, #0]
  4091ba:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4091be:	f7ff f881 	bl	4082c4 <__retarget_lock_release_recursive>
  4091c2:	2000      	movs	r0, #0
  4091c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4091c8:	4b17      	ldr	r3, [pc, #92]	; (409228 <__register_exitproc+0xc0>)
  4091ca:	b30b      	cbz	r3, 409210 <__register_exitproc+0xa8>
  4091cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  4091d0:	f7fa fcf6 	bl	403bc0 <malloc>
  4091d4:	4603      	mov	r3, r0
  4091d6:	b1d8      	cbz	r0, 409210 <__register_exitproc+0xa8>
  4091d8:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  4091dc:	6002      	str	r2, [r0, #0]
  4091de:	2100      	movs	r1, #0
  4091e0:	6041      	str	r1, [r0, #4]
  4091e2:	460a      	mov	r2, r1
  4091e4:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  4091e8:	f04f 0e01 	mov.w	lr, #1
  4091ec:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4091f0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4091f4:	2e00      	cmp	r6, #0
  4091f6:	d0dc      	beq.n	4091b2 <__register_exitproc+0x4a>
  4091f8:	e7cc      	b.n	409194 <__register_exitproc+0x2c>
  4091fa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4091fe:	430c      	orrs	r4, r1
  409200:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  409204:	e7d5      	b.n	4091b2 <__register_exitproc+0x4a>
  409206:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40920a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40920e:	e7bb      	b.n	409188 <__register_exitproc+0x20>
  409210:	6828      	ldr	r0, [r5, #0]
  409212:	f7ff f857 	bl	4082c4 <__retarget_lock_release_recursive>
  409216:	f04f 30ff 	mov.w	r0, #4294967295
  40921a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40921e:	bf00      	nop
  409220:	20400848 	.word	0x20400848
  409224:	0040a1a4 	.word	0x0040a1a4
  409228:	00403bc1 	.word	0x00403bc1

0040922c <_calloc_r>:
  40922c:	b510      	push	{r4, lr}
  40922e:	fb02 f101 	mul.w	r1, r2, r1
  409232:	f7fa fcd5 	bl	403be0 <_malloc_r>
  409236:	4604      	mov	r4, r0
  409238:	b1d8      	cbz	r0, 409272 <_calloc_r+0x46>
  40923a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40923e:	f022 0203 	bic.w	r2, r2, #3
  409242:	3a04      	subs	r2, #4
  409244:	2a24      	cmp	r2, #36	; 0x24
  409246:	d818      	bhi.n	40927a <_calloc_r+0x4e>
  409248:	2a13      	cmp	r2, #19
  40924a:	d914      	bls.n	409276 <_calloc_r+0x4a>
  40924c:	2300      	movs	r3, #0
  40924e:	2a1b      	cmp	r2, #27
  409250:	6003      	str	r3, [r0, #0]
  409252:	6043      	str	r3, [r0, #4]
  409254:	d916      	bls.n	409284 <_calloc_r+0x58>
  409256:	2a24      	cmp	r2, #36	; 0x24
  409258:	6083      	str	r3, [r0, #8]
  40925a:	60c3      	str	r3, [r0, #12]
  40925c:	bf11      	iteee	ne
  40925e:	f100 0210 	addne.w	r2, r0, #16
  409262:	6103      	streq	r3, [r0, #16]
  409264:	6143      	streq	r3, [r0, #20]
  409266:	f100 0218 	addeq.w	r2, r0, #24
  40926a:	2300      	movs	r3, #0
  40926c:	6013      	str	r3, [r2, #0]
  40926e:	6053      	str	r3, [r2, #4]
  409270:	6093      	str	r3, [r2, #8]
  409272:	4620      	mov	r0, r4
  409274:	bd10      	pop	{r4, pc}
  409276:	4602      	mov	r2, r0
  409278:	e7f7      	b.n	40926a <_calloc_r+0x3e>
  40927a:	2100      	movs	r1, #0
  40927c:	f7fa fffa 	bl	404274 <memset>
  409280:	4620      	mov	r0, r4
  409282:	bd10      	pop	{r4, pc}
  409284:	f100 0208 	add.w	r2, r0, #8
  409288:	e7ef      	b.n	40926a <_calloc_r+0x3e>
  40928a:	bf00      	nop

0040928c <_close_r>:
  40928c:	b538      	push	{r3, r4, r5, lr}
  40928e:	4c07      	ldr	r4, [pc, #28]	; (4092ac <_close_r+0x20>)
  409290:	2300      	movs	r3, #0
  409292:	4605      	mov	r5, r0
  409294:	4608      	mov	r0, r1
  409296:	6023      	str	r3, [r4, #0]
  409298:	f7f7 fe48 	bl	400f2c <_close>
  40929c:	1c43      	adds	r3, r0, #1
  40929e:	d000      	beq.n	4092a2 <_close_r+0x16>
  4092a0:	bd38      	pop	{r3, r4, r5, pc}
  4092a2:	6823      	ldr	r3, [r4, #0]
  4092a4:	2b00      	cmp	r3, #0
  4092a6:	d0fb      	beq.n	4092a0 <_close_r+0x14>
  4092a8:	602b      	str	r3, [r5, #0]
  4092aa:	bd38      	pop	{r3, r4, r5, pc}
  4092ac:	20400d58 	.word	0x20400d58

004092b0 <_fclose_r>:
  4092b0:	b570      	push	{r4, r5, r6, lr}
  4092b2:	b159      	cbz	r1, 4092cc <_fclose_r+0x1c>
  4092b4:	4605      	mov	r5, r0
  4092b6:	460c      	mov	r4, r1
  4092b8:	b110      	cbz	r0, 4092c0 <_fclose_r+0x10>
  4092ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4092bc:	2b00      	cmp	r3, #0
  4092be:	d03c      	beq.n	40933a <_fclose_r+0x8a>
  4092c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4092c2:	07d8      	lsls	r0, r3, #31
  4092c4:	d505      	bpl.n	4092d2 <_fclose_r+0x22>
  4092c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4092ca:	b92b      	cbnz	r3, 4092d8 <_fclose_r+0x28>
  4092cc:	2600      	movs	r6, #0
  4092ce:	4630      	mov	r0, r6
  4092d0:	bd70      	pop	{r4, r5, r6, pc}
  4092d2:	89a3      	ldrh	r3, [r4, #12]
  4092d4:	0599      	lsls	r1, r3, #22
  4092d6:	d53c      	bpl.n	409352 <_fclose_r+0xa2>
  4092d8:	4621      	mov	r1, r4
  4092da:	4628      	mov	r0, r5
  4092dc:	f7fe fb2a 	bl	407934 <__sflush_r>
  4092e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4092e2:	4606      	mov	r6, r0
  4092e4:	b133      	cbz	r3, 4092f4 <_fclose_r+0x44>
  4092e6:	69e1      	ldr	r1, [r4, #28]
  4092e8:	4628      	mov	r0, r5
  4092ea:	4798      	blx	r3
  4092ec:	2800      	cmp	r0, #0
  4092ee:	bfb8      	it	lt
  4092f0:	f04f 36ff 	movlt.w	r6, #4294967295
  4092f4:	89a3      	ldrh	r3, [r4, #12]
  4092f6:	061a      	lsls	r2, r3, #24
  4092f8:	d422      	bmi.n	409340 <_fclose_r+0x90>
  4092fa:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4092fc:	b141      	cbz	r1, 409310 <_fclose_r+0x60>
  4092fe:	f104 0340 	add.w	r3, r4, #64	; 0x40
  409302:	4299      	cmp	r1, r3
  409304:	d002      	beq.n	40930c <_fclose_r+0x5c>
  409306:	4628      	mov	r0, r5
  409308:	f7fe fd32 	bl	407d70 <_free_r>
  40930c:	2300      	movs	r3, #0
  40930e:	6323      	str	r3, [r4, #48]	; 0x30
  409310:	6c61      	ldr	r1, [r4, #68]	; 0x44
  409312:	b121      	cbz	r1, 40931e <_fclose_r+0x6e>
  409314:	4628      	mov	r0, r5
  409316:	f7fe fd2b 	bl	407d70 <_free_r>
  40931a:	2300      	movs	r3, #0
  40931c:	6463      	str	r3, [r4, #68]	; 0x44
  40931e:	f7fe fc2d 	bl	407b7c <__sfp_lock_acquire>
  409322:	6e63      	ldr	r3, [r4, #100]	; 0x64
  409324:	2200      	movs	r2, #0
  409326:	07db      	lsls	r3, r3, #31
  409328:	81a2      	strh	r2, [r4, #12]
  40932a:	d50e      	bpl.n	40934a <_fclose_r+0x9a>
  40932c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40932e:	f7fe ffc5 	bl	4082bc <__retarget_lock_close_recursive>
  409332:	f7fe fc29 	bl	407b88 <__sfp_lock_release>
  409336:	4630      	mov	r0, r6
  409338:	bd70      	pop	{r4, r5, r6, pc}
  40933a:	f7fe fbf3 	bl	407b24 <__sinit>
  40933e:	e7bf      	b.n	4092c0 <_fclose_r+0x10>
  409340:	6921      	ldr	r1, [r4, #16]
  409342:	4628      	mov	r0, r5
  409344:	f7fe fd14 	bl	407d70 <_free_r>
  409348:	e7d7      	b.n	4092fa <_fclose_r+0x4a>
  40934a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40934c:	f7fe ffba 	bl	4082c4 <__retarget_lock_release_recursive>
  409350:	e7ec      	b.n	40932c <_fclose_r+0x7c>
  409352:	6da0      	ldr	r0, [r4, #88]	; 0x58
  409354:	f7fe ffb4 	bl	4082c0 <__retarget_lock_acquire_recursive>
  409358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40935c:	2b00      	cmp	r3, #0
  40935e:	d1bb      	bne.n	4092d8 <_fclose_r+0x28>
  409360:	6e66      	ldr	r6, [r4, #100]	; 0x64
  409362:	f016 0601 	ands.w	r6, r6, #1
  409366:	d1b1      	bne.n	4092cc <_fclose_r+0x1c>
  409368:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40936a:	f7fe ffab 	bl	4082c4 <__retarget_lock_release_recursive>
  40936e:	4630      	mov	r0, r6
  409370:	bd70      	pop	{r4, r5, r6, pc}
  409372:	bf00      	nop

00409374 <_fstat_r>:
  409374:	b538      	push	{r3, r4, r5, lr}
  409376:	460b      	mov	r3, r1
  409378:	4c07      	ldr	r4, [pc, #28]	; (409398 <_fstat_r+0x24>)
  40937a:	4605      	mov	r5, r0
  40937c:	4611      	mov	r1, r2
  40937e:	4618      	mov	r0, r3
  409380:	2300      	movs	r3, #0
  409382:	6023      	str	r3, [r4, #0]
  409384:	f7f7 fdd5 	bl	400f32 <_fstat>
  409388:	1c43      	adds	r3, r0, #1
  40938a:	d000      	beq.n	40938e <_fstat_r+0x1a>
  40938c:	bd38      	pop	{r3, r4, r5, pc}
  40938e:	6823      	ldr	r3, [r4, #0]
  409390:	2b00      	cmp	r3, #0
  409392:	d0fb      	beq.n	40938c <_fstat_r+0x18>
  409394:	602b      	str	r3, [r5, #0]
  409396:	bd38      	pop	{r3, r4, r5, pc}
  409398:	20400d58 	.word	0x20400d58

0040939c <_isatty_r>:
  40939c:	b538      	push	{r3, r4, r5, lr}
  40939e:	4c07      	ldr	r4, [pc, #28]	; (4093bc <_isatty_r+0x20>)
  4093a0:	2300      	movs	r3, #0
  4093a2:	4605      	mov	r5, r0
  4093a4:	4608      	mov	r0, r1
  4093a6:	6023      	str	r3, [r4, #0]
  4093a8:	f7f7 fdc8 	bl	400f3c <_isatty>
  4093ac:	1c43      	adds	r3, r0, #1
  4093ae:	d000      	beq.n	4093b2 <_isatty_r+0x16>
  4093b0:	bd38      	pop	{r3, r4, r5, pc}
  4093b2:	6823      	ldr	r3, [r4, #0]
  4093b4:	2b00      	cmp	r3, #0
  4093b6:	d0fb      	beq.n	4093b0 <_isatty_r+0x14>
  4093b8:	602b      	str	r3, [r5, #0]
  4093ba:	bd38      	pop	{r3, r4, r5, pc}
  4093bc:	20400d58 	.word	0x20400d58

004093c0 <_lseek_r>:
  4093c0:	b570      	push	{r4, r5, r6, lr}
  4093c2:	460d      	mov	r5, r1
  4093c4:	4c08      	ldr	r4, [pc, #32]	; (4093e8 <_lseek_r+0x28>)
  4093c6:	4611      	mov	r1, r2
  4093c8:	4606      	mov	r6, r0
  4093ca:	461a      	mov	r2, r3
  4093cc:	4628      	mov	r0, r5
  4093ce:	2300      	movs	r3, #0
  4093d0:	6023      	str	r3, [r4, #0]
  4093d2:	f7f7 fdb5 	bl	400f40 <_lseek>
  4093d6:	1c43      	adds	r3, r0, #1
  4093d8:	d000      	beq.n	4093dc <_lseek_r+0x1c>
  4093da:	bd70      	pop	{r4, r5, r6, pc}
  4093dc:	6823      	ldr	r3, [r4, #0]
  4093de:	2b00      	cmp	r3, #0
  4093e0:	d0fb      	beq.n	4093da <_lseek_r+0x1a>
  4093e2:	6033      	str	r3, [r6, #0]
  4093e4:	bd70      	pop	{r4, r5, r6, pc}
  4093e6:	bf00      	nop
  4093e8:	20400d58 	.word	0x20400d58

004093ec <_read_r>:
  4093ec:	b570      	push	{r4, r5, r6, lr}
  4093ee:	460d      	mov	r5, r1
  4093f0:	4c08      	ldr	r4, [pc, #32]	; (409414 <_read_r+0x28>)
  4093f2:	4611      	mov	r1, r2
  4093f4:	4606      	mov	r6, r0
  4093f6:	461a      	mov	r2, r3
  4093f8:	4628      	mov	r0, r5
  4093fa:	2300      	movs	r3, #0
  4093fc:	6023      	str	r3, [r4, #0]
  4093fe:	f7f6 ff21 	bl	400244 <_read>
  409402:	1c43      	adds	r3, r0, #1
  409404:	d000      	beq.n	409408 <_read_r+0x1c>
  409406:	bd70      	pop	{r4, r5, r6, pc}
  409408:	6823      	ldr	r3, [r4, #0]
  40940a:	2b00      	cmp	r3, #0
  40940c:	d0fb      	beq.n	409406 <_read_r+0x1a>
  40940e:	6033      	str	r3, [r6, #0]
  409410:	bd70      	pop	{r4, r5, r6, pc}
  409412:	bf00      	nop
  409414:	20400d58 	.word	0x20400d58

00409418 <__aeabi_drsub>:
  409418:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  40941c:	e002      	b.n	409424 <__adddf3>
  40941e:	bf00      	nop

00409420 <__aeabi_dsub>:
  409420:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00409424 <__adddf3>:
  409424:	b530      	push	{r4, r5, lr}
  409426:	ea4f 0441 	mov.w	r4, r1, lsl #1
  40942a:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40942e:	ea94 0f05 	teq	r4, r5
  409432:	bf08      	it	eq
  409434:	ea90 0f02 	teqeq	r0, r2
  409438:	bf1f      	itttt	ne
  40943a:	ea54 0c00 	orrsne.w	ip, r4, r0
  40943e:	ea55 0c02 	orrsne.w	ip, r5, r2
  409442:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  409446:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40944a:	f000 80e2 	beq.w	409612 <__adddf3+0x1ee>
  40944e:	ea4f 5454 	mov.w	r4, r4, lsr #21
  409452:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  409456:	bfb8      	it	lt
  409458:	426d      	neglt	r5, r5
  40945a:	dd0c      	ble.n	409476 <__adddf3+0x52>
  40945c:	442c      	add	r4, r5
  40945e:	ea80 0202 	eor.w	r2, r0, r2
  409462:	ea81 0303 	eor.w	r3, r1, r3
  409466:	ea82 0000 	eor.w	r0, r2, r0
  40946a:	ea83 0101 	eor.w	r1, r3, r1
  40946e:	ea80 0202 	eor.w	r2, r0, r2
  409472:	ea81 0303 	eor.w	r3, r1, r3
  409476:	2d36      	cmp	r5, #54	; 0x36
  409478:	bf88      	it	hi
  40947a:	bd30      	pophi	{r4, r5, pc}
  40947c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409480:	ea4f 3101 	mov.w	r1, r1, lsl #12
  409484:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  409488:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40948c:	d002      	beq.n	409494 <__adddf3+0x70>
  40948e:	4240      	negs	r0, r0
  409490:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409494:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  409498:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40949c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  4094a0:	d002      	beq.n	4094a8 <__adddf3+0x84>
  4094a2:	4252      	negs	r2, r2
  4094a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  4094a8:	ea94 0f05 	teq	r4, r5
  4094ac:	f000 80a7 	beq.w	4095fe <__adddf3+0x1da>
  4094b0:	f1a4 0401 	sub.w	r4, r4, #1
  4094b4:	f1d5 0e20 	rsbs	lr, r5, #32
  4094b8:	db0d      	blt.n	4094d6 <__adddf3+0xb2>
  4094ba:	fa02 fc0e 	lsl.w	ip, r2, lr
  4094be:	fa22 f205 	lsr.w	r2, r2, r5
  4094c2:	1880      	adds	r0, r0, r2
  4094c4:	f141 0100 	adc.w	r1, r1, #0
  4094c8:	fa03 f20e 	lsl.w	r2, r3, lr
  4094cc:	1880      	adds	r0, r0, r2
  4094ce:	fa43 f305 	asr.w	r3, r3, r5
  4094d2:	4159      	adcs	r1, r3
  4094d4:	e00e      	b.n	4094f4 <__adddf3+0xd0>
  4094d6:	f1a5 0520 	sub.w	r5, r5, #32
  4094da:	f10e 0e20 	add.w	lr, lr, #32
  4094de:	2a01      	cmp	r2, #1
  4094e0:	fa03 fc0e 	lsl.w	ip, r3, lr
  4094e4:	bf28      	it	cs
  4094e6:	f04c 0c02 	orrcs.w	ip, ip, #2
  4094ea:	fa43 f305 	asr.w	r3, r3, r5
  4094ee:	18c0      	adds	r0, r0, r3
  4094f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4094f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4094f8:	d507      	bpl.n	40950a <__adddf3+0xe6>
  4094fa:	f04f 0e00 	mov.w	lr, #0
  4094fe:	f1dc 0c00 	rsbs	ip, ip, #0
  409502:	eb7e 0000 	sbcs.w	r0, lr, r0
  409506:	eb6e 0101 	sbc.w	r1, lr, r1
  40950a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40950e:	d31b      	bcc.n	409548 <__adddf3+0x124>
  409510:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  409514:	d30c      	bcc.n	409530 <__adddf3+0x10c>
  409516:	0849      	lsrs	r1, r1, #1
  409518:	ea5f 0030 	movs.w	r0, r0, rrx
  40951c:	ea4f 0c3c 	mov.w	ip, ip, rrx
  409520:	f104 0401 	add.w	r4, r4, #1
  409524:	ea4f 5244 	mov.w	r2, r4, lsl #21
  409528:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  40952c:	f080 809a 	bcs.w	409664 <__adddf3+0x240>
  409530:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  409534:	bf08      	it	eq
  409536:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  40953a:	f150 0000 	adcs.w	r0, r0, #0
  40953e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409542:	ea41 0105 	orr.w	r1, r1, r5
  409546:	bd30      	pop	{r4, r5, pc}
  409548:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  40954c:	4140      	adcs	r0, r0
  40954e:	eb41 0101 	adc.w	r1, r1, r1
  409552:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409556:	f1a4 0401 	sub.w	r4, r4, #1
  40955a:	d1e9      	bne.n	409530 <__adddf3+0x10c>
  40955c:	f091 0f00 	teq	r1, #0
  409560:	bf04      	itt	eq
  409562:	4601      	moveq	r1, r0
  409564:	2000      	moveq	r0, #0
  409566:	fab1 f381 	clz	r3, r1
  40956a:	bf08      	it	eq
  40956c:	3320      	addeq	r3, #32
  40956e:	f1a3 030b 	sub.w	r3, r3, #11
  409572:	f1b3 0220 	subs.w	r2, r3, #32
  409576:	da0c      	bge.n	409592 <__adddf3+0x16e>
  409578:	320c      	adds	r2, #12
  40957a:	dd08      	ble.n	40958e <__adddf3+0x16a>
  40957c:	f102 0c14 	add.w	ip, r2, #20
  409580:	f1c2 020c 	rsb	r2, r2, #12
  409584:	fa01 f00c 	lsl.w	r0, r1, ip
  409588:	fa21 f102 	lsr.w	r1, r1, r2
  40958c:	e00c      	b.n	4095a8 <__adddf3+0x184>
  40958e:	f102 0214 	add.w	r2, r2, #20
  409592:	bfd8      	it	le
  409594:	f1c2 0c20 	rsble	ip, r2, #32
  409598:	fa01 f102 	lsl.w	r1, r1, r2
  40959c:	fa20 fc0c 	lsr.w	ip, r0, ip
  4095a0:	bfdc      	itt	le
  4095a2:	ea41 010c 	orrle.w	r1, r1, ip
  4095a6:	4090      	lslle	r0, r2
  4095a8:	1ae4      	subs	r4, r4, r3
  4095aa:	bfa2      	ittt	ge
  4095ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  4095b0:	4329      	orrge	r1, r5
  4095b2:	bd30      	popge	{r4, r5, pc}
  4095b4:	ea6f 0404 	mvn.w	r4, r4
  4095b8:	3c1f      	subs	r4, #31
  4095ba:	da1c      	bge.n	4095f6 <__adddf3+0x1d2>
  4095bc:	340c      	adds	r4, #12
  4095be:	dc0e      	bgt.n	4095de <__adddf3+0x1ba>
  4095c0:	f104 0414 	add.w	r4, r4, #20
  4095c4:	f1c4 0220 	rsb	r2, r4, #32
  4095c8:	fa20 f004 	lsr.w	r0, r0, r4
  4095cc:	fa01 f302 	lsl.w	r3, r1, r2
  4095d0:	ea40 0003 	orr.w	r0, r0, r3
  4095d4:	fa21 f304 	lsr.w	r3, r1, r4
  4095d8:	ea45 0103 	orr.w	r1, r5, r3
  4095dc:	bd30      	pop	{r4, r5, pc}
  4095de:	f1c4 040c 	rsb	r4, r4, #12
  4095e2:	f1c4 0220 	rsb	r2, r4, #32
  4095e6:	fa20 f002 	lsr.w	r0, r0, r2
  4095ea:	fa01 f304 	lsl.w	r3, r1, r4
  4095ee:	ea40 0003 	orr.w	r0, r0, r3
  4095f2:	4629      	mov	r1, r5
  4095f4:	bd30      	pop	{r4, r5, pc}
  4095f6:	fa21 f004 	lsr.w	r0, r1, r4
  4095fa:	4629      	mov	r1, r5
  4095fc:	bd30      	pop	{r4, r5, pc}
  4095fe:	f094 0f00 	teq	r4, #0
  409602:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  409606:	bf06      	itte	eq
  409608:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40960c:	3401      	addeq	r4, #1
  40960e:	3d01      	subne	r5, #1
  409610:	e74e      	b.n	4094b0 <__adddf3+0x8c>
  409612:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  409616:	bf18      	it	ne
  409618:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  40961c:	d029      	beq.n	409672 <__adddf3+0x24e>
  40961e:	ea94 0f05 	teq	r4, r5
  409622:	bf08      	it	eq
  409624:	ea90 0f02 	teqeq	r0, r2
  409628:	d005      	beq.n	409636 <__adddf3+0x212>
  40962a:	ea54 0c00 	orrs.w	ip, r4, r0
  40962e:	bf04      	itt	eq
  409630:	4619      	moveq	r1, r3
  409632:	4610      	moveq	r0, r2
  409634:	bd30      	pop	{r4, r5, pc}
  409636:	ea91 0f03 	teq	r1, r3
  40963a:	bf1e      	ittt	ne
  40963c:	2100      	movne	r1, #0
  40963e:	2000      	movne	r0, #0
  409640:	bd30      	popne	{r4, r5, pc}
  409642:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  409646:	d105      	bne.n	409654 <__adddf3+0x230>
  409648:	0040      	lsls	r0, r0, #1
  40964a:	4149      	adcs	r1, r1
  40964c:	bf28      	it	cs
  40964e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  409652:	bd30      	pop	{r4, r5, pc}
  409654:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  409658:	bf3c      	itt	cc
  40965a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40965e:	bd30      	popcc	{r4, r5, pc}
  409660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409664:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  409668:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40966c:	f04f 0000 	mov.w	r0, #0
  409670:	bd30      	pop	{r4, r5, pc}
  409672:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  409676:	bf1a      	itte	ne
  409678:	4619      	movne	r1, r3
  40967a:	4610      	movne	r0, r2
  40967c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  409680:	bf1c      	itt	ne
  409682:	460b      	movne	r3, r1
  409684:	4602      	movne	r2, r0
  409686:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40968a:	bf06      	itte	eq
  40968c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  409690:	ea91 0f03 	teqeq	r1, r3
  409694:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  409698:	bd30      	pop	{r4, r5, pc}
  40969a:	bf00      	nop

0040969c <__aeabi_ui2d>:
  40969c:	f090 0f00 	teq	r0, #0
  4096a0:	bf04      	itt	eq
  4096a2:	2100      	moveq	r1, #0
  4096a4:	4770      	bxeq	lr
  4096a6:	b530      	push	{r4, r5, lr}
  4096a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4096ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4096b0:	f04f 0500 	mov.w	r5, #0
  4096b4:	f04f 0100 	mov.w	r1, #0
  4096b8:	e750      	b.n	40955c <__adddf3+0x138>
  4096ba:	bf00      	nop

004096bc <__aeabi_i2d>:
  4096bc:	f090 0f00 	teq	r0, #0
  4096c0:	bf04      	itt	eq
  4096c2:	2100      	moveq	r1, #0
  4096c4:	4770      	bxeq	lr
  4096c6:	b530      	push	{r4, r5, lr}
  4096c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4096cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4096d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4096d4:	bf48      	it	mi
  4096d6:	4240      	negmi	r0, r0
  4096d8:	f04f 0100 	mov.w	r1, #0
  4096dc:	e73e      	b.n	40955c <__adddf3+0x138>
  4096de:	bf00      	nop

004096e0 <__aeabi_f2d>:
  4096e0:	0042      	lsls	r2, r0, #1
  4096e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4096e6:	ea4f 0131 	mov.w	r1, r1, rrx
  4096ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4096ee:	bf1f      	itttt	ne
  4096f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4096f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4096f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4096fc:	4770      	bxne	lr
  4096fe:	f092 0f00 	teq	r2, #0
  409702:	bf14      	ite	ne
  409704:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  409708:	4770      	bxeq	lr
  40970a:	b530      	push	{r4, r5, lr}
  40970c:	f44f 7460 	mov.w	r4, #896	; 0x380
  409710:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  409714:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  409718:	e720      	b.n	40955c <__adddf3+0x138>
  40971a:	bf00      	nop

0040971c <__aeabi_ul2d>:
  40971c:	ea50 0201 	orrs.w	r2, r0, r1
  409720:	bf08      	it	eq
  409722:	4770      	bxeq	lr
  409724:	b530      	push	{r4, r5, lr}
  409726:	f04f 0500 	mov.w	r5, #0
  40972a:	e00a      	b.n	409742 <__aeabi_l2d+0x16>

0040972c <__aeabi_l2d>:
  40972c:	ea50 0201 	orrs.w	r2, r0, r1
  409730:	bf08      	it	eq
  409732:	4770      	bxeq	lr
  409734:	b530      	push	{r4, r5, lr}
  409736:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  40973a:	d502      	bpl.n	409742 <__aeabi_l2d+0x16>
  40973c:	4240      	negs	r0, r0
  40973e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  409742:	f44f 6480 	mov.w	r4, #1024	; 0x400
  409746:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40974a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40974e:	f43f aedc 	beq.w	40950a <__adddf3+0xe6>
  409752:	f04f 0203 	mov.w	r2, #3
  409756:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40975a:	bf18      	it	ne
  40975c:	3203      	addne	r2, #3
  40975e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  409762:	bf18      	it	ne
  409764:	3203      	addne	r2, #3
  409766:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  40976a:	f1c2 0320 	rsb	r3, r2, #32
  40976e:	fa00 fc03 	lsl.w	ip, r0, r3
  409772:	fa20 f002 	lsr.w	r0, r0, r2
  409776:	fa01 fe03 	lsl.w	lr, r1, r3
  40977a:	ea40 000e 	orr.w	r0, r0, lr
  40977e:	fa21 f102 	lsr.w	r1, r1, r2
  409782:	4414      	add	r4, r2
  409784:	e6c1      	b.n	40950a <__adddf3+0xe6>
  409786:	bf00      	nop

00409788 <__aeabi_dmul>:
  409788:	b570      	push	{r4, r5, r6, lr}
  40978a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40978e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  409792:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  409796:	bf1d      	ittte	ne
  409798:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40979c:	ea94 0f0c 	teqne	r4, ip
  4097a0:	ea95 0f0c 	teqne	r5, ip
  4097a4:	f000 f8de 	bleq	409964 <__aeabi_dmul+0x1dc>
  4097a8:	442c      	add	r4, r5
  4097aa:	ea81 0603 	eor.w	r6, r1, r3
  4097ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  4097b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4097b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4097ba:	bf18      	it	ne
  4097bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4097c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4097c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4097c8:	d038      	beq.n	40983c <__aeabi_dmul+0xb4>
  4097ca:	fba0 ce02 	umull	ip, lr, r0, r2
  4097ce:	f04f 0500 	mov.w	r5, #0
  4097d2:	fbe1 e502 	umlal	lr, r5, r1, r2
  4097d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4097da:	fbe0 e503 	umlal	lr, r5, r0, r3
  4097de:	f04f 0600 	mov.w	r6, #0
  4097e2:	fbe1 5603 	umlal	r5, r6, r1, r3
  4097e6:	f09c 0f00 	teq	ip, #0
  4097ea:	bf18      	it	ne
  4097ec:	f04e 0e01 	orrne.w	lr, lr, #1
  4097f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4097f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4097f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4097fc:	d204      	bcs.n	409808 <__aeabi_dmul+0x80>
  4097fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  409802:	416d      	adcs	r5, r5
  409804:	eb46 0606 	adc.w	r6, r6, r6
  409808:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40980c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  409810:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  409814:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  409818:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  40981c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  409820:	bf88      	it	hi
  409822:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  409826:	d81e      	bhi.n	409866 <__aeabi_dmul+0xde>
  409828:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  40982c:	bf08      	it	eq
  40982e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  409832:	f150 0000 	adcs.w	r0, r0, #0
  409836:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40983a:	bd70      	pop	{r4, r5, r6, pc}
  40983c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  409840:	ea46 0101 	orr.w	r1, r6, r1
  409844:	ea40 0002 	orr.w	r0, r0, r2
  409848:	ea81 0103 	eor.w	r1, r1, r3
  40984c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  409850:	bfc2      	ittt	gt
  409852:	ebd4 050c 	rsbsgt	r5, r4, ip
  409856:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  40985a:	bd70      	popgt	{r4, r5, r6, pc}
  40985c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409860:	f04f 0e00 	mov.w	lr, #0
  409864:	3c01      	subs	r4, #1
  409866:	f300 80ab 	bgt.w	4099c0 <__aeabi_dmul+0x238>
  40986a:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40986e:	bfde      	ittt	le
  409870:	2000      	movle	r0, #0
  409872:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  409876:	bd70      	pople	{r4, r5, r6, pc}
  409878:	f1c4 0400 	rsb	r4, r4, #0
  40987c:	3c20      	subs	r4, #32
  40987e:	da35      	bge.n	4098ec <__aeabi_dmul+0x164>
  409880:	340c      	adds	r4, #12
  409882:	dc1b      	bgt.n	4098bc <__aeabi_dmul+0x134>
  409884:	f104 0414 	add.w	r4, r4, #20
  409888:	f1c4 0520 	rsb	r5, r4, #32
  40988c:	fa00 f305 	lsl.w	r3, r0, r5
  409890:	fa20 f004 	lsr.w	r0, r0, r4
  409894:	fa01 f205 	lsl.w	r2, r1, r5
  409898:	ea40 0002 	orr.w	r0, r0, r2
  40989c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  4098a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4098a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4098a8:	fa21 f604 	lsr.w	r6, r1, r4
  4098ac:	eb42 0106 	adc.w	r1, r2, r6
  4098b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4098b4:	bf08      	it	eq
  4098b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4098ba:	bd70      	pop	{r4, r5, r6, pc}
  4098bc:	f1c4 040c 	rsb	r4, r4, #12
  4098c0:	f1c4 0520 	rsb	r5, r4, #32
  4098c4:	fa00 f304 	lsl.w	r3, r0, r4
  4098c8:	fa20 f005 	lsr.w	r0, r0, r5
  4098cc:	fa01 f204 	lsl.w	r2, r1, r4
  4098d0:	ea40 0002 	orr.w	r0, r0, r2
  4098d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4098d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4098dc:	f141 0100 	adc.w	r1, r1, #0
  4098e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4098e4:	bf08      	it	eq
  4098e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4098ea:	bd70      	pop	{r4, r5, r6, pc}
  4098ec:	f1c4 0520 	rsb	r5, r4, #32
  4098f0:	fa00 f205 	lsl.w	r2, r0, r5
  4098f4:	ea4e 0e02 	orr.w	lr, lr, r2
  4098f8:	fa20 f304 	lsr.w	r3, r0, r4
  4098fc:	fa01 f205 	lsl.w	r2, r1, r5
  409900:	ea43 0302 	orr.w	r3, r3, r2
  409904:	fa21 f004 	lsr.w	r0, r1, r4
  409908:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40990c:	fa21 f204 	lsr.w	r2, r1, r4
  409910:	ea20 0002 	bic.w	r0, r0, r2
  409914:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  409918:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  40991c:	bf08      	it	eq
  40991e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  409922:	bd70      	pop	{r4, r5, r6, pc}
  409924:	f094 0f00 	teq	r4, #0
  409928:	d10f      	bne.n	40994a <__aeabi_dmul+0x1c2>
  40992a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40992e:	0040      	lsls	r0, r0, #1
  409930:	eb41 0101 	adc.w	r1, r1, r1
  409934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409938:	bf08      	it	eq
  40993a:	3c01      	subeq	r4, #1
  40993c:	d0f7      	beq.n	40992e <__aeabi_dmul+0x1a6>
  40993e:	ea41 0106 	orr.w	r1, r1, r6
  409942:	f095 0f00 	teq	r5, #0
  409946:	bf18      	it	ne
  409948:	4770      	bxne	lr
  40994a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40994e:	0052      	lsls	r2, r2, #1
  409950:	eb43 0303 	adc.w	r3, r3, r3
  409954:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  409958:	bf08      	it	eq
  40995a:	3d01      	subeq	r5, #1
  40995c:	d0f7      	beq.n	40994e <__aeabi_dmul+0x1c6>
  40995e:	ea43 0306 	orr.w	r3, r3, r6
  409962:	4770      	bx	lr
  409964:	ea94 0f0c 	teq	r4, ip
  409968:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40996c:	bf18      	it	ne
  40996e:	ea95 0f0c 	teqne	r5, ip
  409972:	d00c      	beq.n	40998e <__aeabi_dmul+0x206>
  409974:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409978:	bf18      	it	ne
  40997a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40997e:	d1d1      	bne.n	409924 <__aeabi_dmul+0x19c>
  409980:	ea81 0103 	eor.w	r1, r1, r3
  409984:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  409988:	f04f 0000 	mov.w	r0, #0
  40998c:	bd70      	pop	{r4, r5, r6, pc}
  40998e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409992:	bf06      	itte	eq
  409994:	4610      	moveq	r0, r2
  409996:	4619      	moveq	r1, r3
  409998:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40999c:	d019      	beq.n	4099d2 <__aeabi_dmul+0x24a>
  40999e:	ea94 0f0c 	teq	r4, ip
  4099a2:	d102      	bne.n	4099aa <__aeabi_dmul+0x222>
  4099a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  4099a8:	d113      	bne.n	4099d2 <__aeabi_dmul+0x24a>
  4099aa:	ea95 0f0c 	teq	r5, ip
  4099ae:	d105      	bne.n	4099bc <__aeabi_dmul+0x234>
  4099b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4099b4:	bf1c      	itt	ne
  4099b6:	4610      	movne	r0, r2
  4099b8:	4619      	movne	r1, r3
  4099ba:	d10a      	bne.n	4099d2 <__aeabi_dmul+0x24a>
  4099bc:	ea81 0103 	eor.w	r1, r1, r3
  4099c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4099c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4099c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4099cc:	f04f 0000 	mov.w	r0, #0
  4099d0:	bd70      	pop	{r4, r5, r6, pc}
  4099d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4099d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4099da:	bd70      	pop	{r4, r5, r6, pc}

004099dc <__aeabi_ddiv>:
  4099dc:	b570      	push	{r4, r5, r6, lr}
  4099de:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4099e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4099e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4099ea:	bf1d      	ittte	ne
  4099ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4099f0:	ea94 0f0c 	teqne	r4, ip
  4099f4:	ea95 0f0c 	teqne	r5, ip
  4099f8:	f000 f8a7 	bleq	409b4a <__aeabi_ddiv+0x16e>
  4099fc:	eba4 0405 	sub.w	r4, r4, r5
  409a00:	ea81 0e03 	eor.w	lr, r1, r3
  409a04:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  409a08:	ea4f 3101 	mov.w	r1, r1, lsl #12
  409a0c:	f000 8088 	beq.w	409b20 <__aeabi_ddiv+0x144>
  409a10:	ea4f 3303 	mov.w	r3, r3, lsl #12
  409a14:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  409a18:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  409a1c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  409a20:	ea4f 2202 	mov.w	r2, r2, lsl #8
  409a24:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  409a28:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  409a2c:	ea4f 2600 	mov.w	r6, r0, lsl #8
  409a30:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  409a34:	429d      	cmp	r5, r3
  409a36:	bf08      	it	eq
  409a38:	4296      	cmpeq	r6, r2
  409a3a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  409a3e:	f504 7440 	add.w	r4, r4, #768	; 0x300
  409a42:	d202      	bcs.n	409a4a <__aeabi_ddiv+0x6e>
  409a44:	085b      	lsrs	r3, r3, #1
  409a46:	ea4f 0232 	mov.w	r2, r2, rrx
  409a4a:	1ab6      	subs	r6, r6, r2
  409a4c:	eb65 0503 	sbc.w	r5, r5, r3
  409a50:	085b      	lsrs	r3, r3, #1
  409a52:	ea4f 0232 	mov.w	r2, r2, rrx
  409a56:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  409a5a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  409a5e:	ebb6 0e02 	subs.w	lr, r6, r2
  409a62:	eb75 0e03 	sbcs.w	lr, r5, r3
  409a66:	bf22      	ittt	cs
  409a68:	1ab6      	subcs	r6, r6, r2
  409a6a:	4675      	movcs	r5, lr
  409a6c:	ea40 000c 	orrcs.w	r0, r0, ip
  409a70:	085b      	lsrs	r3, r3, #1
  409a72:	ea4f 0232 	mov.w	r2, r2, rrx
  409a76:	ebb6 0e02 	subs.w	lr, r6, r2
  409a7a:	eb75 0e03 	sbcs.w	lr, r5, r3
  409a7e:	bf22      	ittt	cs
  409a80:	1ab6      	subcs	r6, r6, r2
  409a82:	4675      	movcs	r5, lr
  409a84:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  409a88:	085b      	lsrs	r3, r3, #1
  409a8a:	ea4f 0232 	mov.w	r2, r2, rrx
  409a8e:	ebb6 0e02 	subs.w	lr, r6, r2
  409a92:	eb75 0e03 	sbcs.w	lr, r5, r3
  409a96:	bf22      	ittt	cs
  409a98:	1ab6      	subcs	r6, r6, r2
  409a9a:	4675      	movcs	r5, lr
  409a9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  409aa0:	085b      	lsrs	r3, r3, #1
  409aa2:	ea4f 0232 	mov.w	r2, r2, rrx
  409aa6:	ebb6 0e02 	subs.w	lr, r6, r2
  409aaa:	eb75 0e03 	sbcs.w	lr, r5, r3
  409aae:	bf22      	ittt	cs
  409ab0:	1ab6      	subcs	r6, r6, r2
  409ab2:	4675      	movcs	r5, lr
  409ab4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  409ab8:	ea55 0e06 	orrs.w	lr, r5, r6
  409abc:	d018      	beq.n	409af0 <__aeabi_ddiv+0x114>
  409abe:	ea4f 1505 	mov.w	r5, r5, lsl #4
  409ac2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  409ac6:	ea4f 1606 	mov.w	r6, r6, lsl #4
  409aca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  409ace:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  409ad2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  409ad6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  409ada:	d1c0      	bne.n	409a5e <__aeabi_ddiv+0x82>
  409adc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409ae0:	d10b      	bne.n	409afa <__aeabi_ddiv+0x11e>
  409ae2:	ea41 0100 	orr.w	r1, r1, r0
  409ae6:	f04f 0000 	mov.w	r0, #0
  409aea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  409aee:	e7b6      	b.n	409a5e <__aeabi_ddiv+0x82>
  409af0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  409af4:	bf04      	itt	eq
  409af6:	4301      	orreq	r1, r0
  409af8:	2000      	moveq	r0, #0
  409afa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  409afe:	bf88      	it	hi
  409b00:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  409b04:	f63f aeaf 	bhi.w	409866 <__aeabi_dmul+0xde>
  409b08:	ebb5 0c03 	subs.w	ip, r5, r3
  409b0c:	bf04      	itt	eq
  409b0e:	ebb6 0c02 	subseq.w	ip, r6, r2
  409b12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  409b16:	f150 0000 	adcs.w	r0, r0, #0
  409b1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  409b1e:	bd70      	pop	{r4, r5, r6, pc}
  409b20:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  409b24:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  409b28:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  409b2c:	bfc2      	ittt	gt
  409b2e:	ebd4 050c 	rsbsgt	r5, r4, ip
  409b32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  409b36:	bd70      	popgt	{r4, r5, r6, pc}
  409b38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  409b3c:	f04f 0e00 	mov.w	lr, #0
  409b40:	3c01      	subs	r4, #1
  409b42:	e690      	b.n	409866 <__aeabi_dmul+0xde>
  409b44:	ea45 0e06 	orr.w	lr, r5, r6
  409b48:	e68d      	b.n	409866 <__aeabi_dmul+0xde>
  409b4a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  409b4e:	ea94 0f0c 	teq	r4, ip
  409b52:	bf08      	it	eq
  409b54:	ea95 0f0c 	teqeq	r5, ip
  409b58:	f43f af3b 	beq.w	4099d2 <__aeabi_dmul+0x24a>
  409b5c:	ea94 0f0c 	teq	r4, ip
  409b60:	d10a      	bne.n	409b78 <__aeabi_ddiv+0x19c>
  409b62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  409b66:	f47f af34 	bne.w	4099d2 <__aeabi_dmul+0x24a>
  409b6a:	ea95 0f0c 	teq	r5, ip
  409b6e:	f47f af25 	bne.w	4099bc <__aeabi_dmul+0x234>
  409b72:	4610      	mov	r0, r2
  409b74:	4619      	mov	r1, r3
  409b76:	e72c      	b.n	4099d2 <__aeabi_dmul+0x24a>
  409b78:	ea95 0f0c 	teq	r5, ip
  409b7c:	d106      	bne.n	409b8c <__aeabi_ddiv+0x1b0>
  409b7e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  409b82:	f43f aefd 	beq.w	409980 <__aeabi_dmul+0x1f8>
  409b86:	4610      	mov	r0, r2
  409b88:	4619      	mov	r1, r3
  409b8a:	e722      	b.n	4099d2 <__aeabi_dmul+0x24a>
  409b8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  409b90:	bf18      	it	ne
  409b92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  409b96:	f47f aec5 	bne.w	409924 <__aeabi_dmul+0x19c>
  409b9a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  409b9e:	f47f af0d 	bne.w	4099bc <__aeabi_dmul+0x234>
  409ba2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  409ba6:	f47f aeeb 	bne.w	409980 <__aeabi_dmul+0x1f8>
  409baa:	e712      	b.n	4099d2 <__aeabi_dmul+0x24a>

00409bac <__gedf2>:
  409bac:	f04f 3cff 	mov.w	ip, #4294967295
  409bb0:	e006      	b.n	409bc0 <__cmpdf2+0x4>
  409bb2:	bf00      	nop

00409bb4 <__ledf2>:
  409bb4:	f04f 0c01 	mov.w	ip, #1
  409bb8:	e002      	b.n	409bc0 <__cmpdf2+0x4>
  409bba:	bf00      	nop

00409bbc <__cmpdf2>:
  409bbc:	f04f 0c01 	mov.w	ip, #1
  409bc0:	f84d cd04 	str.w	ip, [sp, #-4]!
  409bc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409bc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409bcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409bd0:	bf18      	it	ne
  409bd2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  409bd6:	d01b      	beq.n	409c10 <__cmpdf2+0x54>
  409bd8:	b001      	add	sp, #4
  409bda:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  409bde:	bf0c      	ite	eq
  409be0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  409be4:	ea91 0f03 	teqne	r1, r3
  409be8:	bf02      	ittt	eq
  409bea:	ea90 0f02 	teqeq	r0, r2
  409bee:	2000      	moveq	r0, #0
  409bf0:	4770      	bxeq	lr
  409bf2:	f110 0f00 	cmn.w	r0, #0
  409bf6:	ea91 0f03 	teq	r1, r3
  409bfa:	bf58      	it	pl
  409bfc:	4299      	cmppl	r1, r3
  409bfe:	bf08      	it	eq
  409c00:	4290      	cmpeq	r0, r2
  409c02:	bf2c      	ite	cs
  409c04:	17d8      	asrcs	r0, r3, #31
  409c06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  409c0a:	f040 0001 	orr.w	r0, r0, #1
  409c0e:	4770      	bx	lr
  409c10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409c14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409c18:	d102      	bne.n	409c20 <__cmpdf2+0x64>
  409c1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409c1e:	d107      	bne.n	409c30 <__cmpdf2+0x74>
  409c20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409c24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409c28:	d1d6      	bne.n	409bd8 <__cmpdf2+0x1c>
  409c2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  409c2e:	d0d3      	beq.n	409bd8 <__cmpdf2+0x1c>
  409c30:	f85d 0b04 	ldr.w	r0, [sp], #4
  409c34:	4770      	bx	lr
  409c36:	bf00      	nop

00409c38 <__aeabi_cdrcmple>:
  409c38:	4684      	mov	ip, r0
  409c3a:	4610      	mov	r0, r2
  409c3c:	4662      	mov	r2, ip
  409c3e:	468c      	mov	ip, r1
  409c40:	4619      	mov	r1, r3
  409c42:	4663      	mov	r3, ip
  409c44:	e000      	b.n	409c48 <__aeabi_cdcmpeq>
  409c46:	bf00      	nop

00409c48 <__aeabi_cdcmpeq>:
  409c48:	b501      	push	{r0, lr}
  409c4a:	f7ff ffb7 	bl	409bbc <__cmpdf2>
  409c4e:	2800      	cmp	r0, #0
  409c50:	bf48      	it	mi
  409c52:	f110 0f00 	cmnmi.w	r0, #0
  409c56:	bd01      	pop	{r0, pc}

00409c58 <__aeabi_dcmpeq>:
  409c58:	f84d ed08 	str.w	lr, [sp, #-8]!
  409c5c:	f7ff fff4 	bl	409c48 <__aeabi_cdcmpeq>
  409c60:	bf0c      	ite	eq
  409c62:	2001      	moveq	r0, #1
  409c64:	2000      	movne	r0, #0
  409c66:	f85d fb08 	ldr.w	pc, [sp], #8
  409c6a:	bf00      	nop

00409c6c <__aeabi_dcmplt>:
  409c6c:	f84d ed08 	str.w	lr, [sp, #-8]!
  409c70:	f7ff ffea 	bl	409c48 <__aeabi_cdcmpeq>
  409c74:	bf34      	ite	cc
  409c76:	2001      	movcc	r0, #1
  409c78:	2000      	movcs	r0, #0
  409c7a:	f85d fb08 	ldr.w	pc, [sp], #8
  409c7e:	bf00      	nop

00409c80 <__aeabi_dcmple>:
  409c80:	f84d ed08 	str.w	lr, [sp, #-8]!
  409c84:	f7ff ffe0 	bl	409c48 <__aeabi_cdcmpeq>
  409c88:	bf94      	ite	ls
  409c8a:	2001      	movls	r0, #1
  409c8c:	2000      	movhi	r0, #0
  409c8e:	f85d fb08 	ldr.w	pc, [sp], #8
  409c92:	bf00      	nop

00409c94 <__aeabi_dcmpge>:
  409c94:	f84d ed08 	str.w	lr, [sp, #-8]!
  409c98:	f7ff ffce 	bl	409c38 <__aeabi_cdrcmple>
  409c9c:	bf94      	ite	ls
  409c9e:	2001      	movls	r0, #1
  409ca0:	2000      	movhi	r0, #0
  409ca2:	f85d fb08 	ldr.w	pc, [sp], #8
  409ca6:	bf00      	nop

00409ca8 <__aeabi_dcmpgt>:
  409ca8:	f84d ed08 	str.w	lr, [sp, #-8]!
  409cac:	f7ff ffc4 	bl	409c38 <__aeabi_cdrcmple>
  409cb0:	bf34      	ite	cc
  409cb2:	2001      	movcc	r0, #1
  409cb4:	2000      	movcs	r0, #0
  409cb6:	f85d fb08 	ldr.w	pc, [sp], #8
  409cba:	bf00      	nop

00409cbc <__aeabi_dcmpun>:
  409cbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  409cc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409cc4:	d102      	bne.n	409ccc <__aeabi_dcmpun+0x10>
  409cc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  409cca:	d10a      	bne.n	409ce2 <__aeabi_dcmpun+0x26>
  409ccc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  409cd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  409cd4:	d102      	bne.n	409cdc <__aeabi_dcmpun+0x20>
  409cd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  409cda:	d102      	bne.n	409ce2 <__aeabi_dcmpun+0x26>
  409cdc:	f04f 0000 	mov.w	r0, #0
  409ce0:	4770      	bx	lr
  409ce2:	f04f 0001 	mov.w	r0, #1
  409ce6:	4770      	bx	lr

00409ce8 <__aeabi_d2iz>:
  409ce8:	ea4f 0241 	mov.w	r2, r1, lsl #1
  409cec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  409cf0:	d215      	bcs.n	409d1e <__aeabi_d2iz+0x36>
  409cf2:	d511      	bpl.n	409d18 <__aeabi_d2iz+0x30>
  409cf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  409cf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  409cfc:	d912      	bls.n	409d24 <__aeabi_d2iz+0x3c>
  409cfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  409d02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  409d06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  409d0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  409d0e:	fa23 f002 	lsr.w	r0, r3, r2
  409d12:	bf18      	it	ne
  409d14:	4240      	negne	r0, r0
  409d16:	4770      	bx	lr
  409d18:	f04f 0000 	mov.w	r0, #0
  409d1c:	4770      	bx	lr
  409d1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  409d22:	d105      	bne.n	409d30 <__aeabi_d2iz+0x48>
  409d24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  409d28:	bf08      	it	eq
  409d2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  409d2e:	4770      	bx	lr
  409d30:	f04f 0000 	mov.w	r0, #0
  409d34:	4770      	bx	lr
  409d36:	bf00      	nop

00409d38 <__aeabi_uldivmod>:
  409d38:	b953      	cbnz	r3, 409d50 <__aeabi_uldivmod+0x18>
  409d3a:	b94a      	cbnz	r2, 409d50 <__aeabi_uldivmod+0x18>
  409d3c:	2900      	cmp	r1, #0
  409d3e:	bf08      	it	eq
  409d40:	2800      	cmpeq	r0, #0
  409d42:	bf1c      	itt	ne
  409d44:	f04f 31ff 	movne.w	r1, #4294967295
  409d48:	f04f 30ff 	movne.w	r0, #4294967295
  409d4c:	f000 b97a 	b.w	40a044 <__aeabi_idiv0>
  409d50:	f1ad 0c08 	sub.w	ip, sp, #8
  409d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  409d58:	f000 f806 	bl	409d68 <__udivmoddi4>
  409d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
  409d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  409d64:	b004      	add	sp, #16
  409d66:	4770      	bx	lr

00409d68 <__udivmoddi4>:
  409d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  409d6c:	468c      	mov	ip, r1
  409d6e:	460d      	mov	r5, r1
  409d70:	4604      	mov	r4, r0
  409d72:	9e08      	ldr	r6, [sp, #32]
  409d74:	2b00      	cmp	r3, #0
  409d76:	d151      	bne.n	409e1c <__udivmoddi4+0xb4>
  409d78:	428a      	cmp	r2, r1
  409d7a:	4617      	mov	r7, r2
  409d7c:	d96d      	bls.n	409e5a <__udivmoddi4+0xf2>
  409d7e:	fab2 fe82 	clz	lr, r2
  409d82:	f1be 0f00 	cmp.w	lr, #0
  409d86:	d00b      	beq.n	409da0 <__udivmoddi4+0x38>
  409d88:	f1ce 0c20 	rsb	ip, lr, #32
  409d8c:	fa01 f50e 	lsl.w	r5, r1, lr
  409d90:	fa20 fc0c 	lsr.w	ip, r0, ip
  409d94:	fa02 f70e 	lsl.w	r7, r2, lr
  409d98:	ea4c 0c05 	orr.w	ip, ip, r5
  409d9c:	fa00 f40e 	lsl.w	r4, r0, lr
  409da0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  409da4:	0c25      	lsrs	r5, r4, #16
  409da6:	fbbc f8fa 	udiv	r8, ip, sl
  409daa:	fa1f f987 	uxth.w	r9, r7
  409dae:	fb0a cc18 	mls	ip, sl, r8, ip
  409db2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  409db6:	fb08 f309 	mul.w	r3, r8, r9
  409dba:	42ab      	cmp	r3, r5
  409dbc:	d90a      	bls.n	409dd4 <__udivmoddi4+0x6c>
  409dbe:	19ed      	adds	r5, r5, r7
  409dc0:	f108 32ff 	add.w	r2, r8, #4294967295
  409dc4:	f080 8123 	bcs.w	40a00e <__udivmoddi4+0x2a6>
  409dc8:	42ab      	cmp	r3, r5
  409dca:	f240 8120 	bls.w	40a00e <__udivmoddi4+0x2a6>
  409dce:	f1a8 0802 	sub.w	r8, r8, #2
  409dd2:	443d      	add	r5, r7
  409dd4:	1aed      	subs	r5, r5, r3
  409dd6:	b2a4      	uxth	r4, r4
  409dd8:	fbb5 f0fa 	udiv	r0, r5, sl
  409ddc:	fb0a 5510 	mls	r5, sl, r0, r5
  409de0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  409de4:	fb00 f909 	mul.w	r9, r0, r9
  409de8:	45a1      	cmp	r9, r4
  409dea:	d909      	bls.n	409e00 <__udivmoddi4+0x98>
  409dec:	19e4      	adds	r4, r4, r7
  409dee:	f100 33ff 	add.w	r3, r0, #4294967295
  409df2:	f080 810a 	bcs.w	40a00a <__udivmoddi4+0x2a2>
  409df6:	45a1      	cmp	r9, r4
  409df8:	f240 8107 	bls.w	40a00a <__udivmoddi4+0x2a2>
  409dfc:	3802      	subs	r0, #2
  409dfe:	443c      	add	r4, r7
  409e00:	eba4 0409 	sub.w	r4, r4, r9
  409e04:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409e08:	2100      	movs	r1, #0
  409e0a:	2e00      	cmp	r6, #0
  409e0c:	d061      	beq.n	409ed2 <__udivmoddi4+0x16a>
  409e0e:	fa24 f40e 	lsr.w	r4, r4, lr
  409e12:	2300      	movs	r3, #0
  409e14:	6034      	str	r4, [r6, #0]
  409e16:	6073      	str	r3, [r6, #4]
  409e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409e1c:	428b      	cmp	r3, r1
  409e1e:	d907      	bls.n	409e30 <__udivmoddi4+0xc8>
  409e20:	2e00      	cmp	r6, #0
  409e22:	d054      	beq.n	409ece <__udivmoddi4+0x166>
  409e24:	2100      	movs	r1, #0
  409e26:	e886 0021 	stmia.w	r6, {r0, r5}
  409e2a:	4608      	mov	r0, r1
  409e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409e30:	fab3 f183 	clz	r1, r3
  409e34:	2900      	cmp	r1, #0
  409e36:	f040 808e 	bne.w	409f56 <__udivmoddi4+0x1ee>
  409e3a:	42ab      	cmp	r3, r5
  409e3c:	d302      	bcc.n	409e44 <__udivmoddi4+0xdc>
  409e3e:	4282      	cmp	r2, r0
  409e40:	f200 80fa 	bhi.w	40a038 <__udivmoddi4+0x2d0>
  409e44:	1a84      	subs	r4, r0, r2
  409e46:	eb65 0503 	sbc.w	r5, r5, r3
  409e4a:	2001      	movs	r0, #1
  409e4c:	46ac      	mov	ip, r5
  409e4e:	2e00      	cmp	r6, #0
  409e50:	d03f      	beq.n	409ed2 <__udivmoddi4+0x16a>
  409e52:	e886 1010 	stmia.w	r6, {r4, ip}
  409e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409e5a:	b912      	cbnz	r2, 409e62 <__udivmoddi4+0xfa>
  409e5c:	2701      	movs	r7, #1
  409e5e:	fbb7 f7f2 	udiv	r7, r7, r2
  409e62:	fab7 fe87 	clz	lr, r7
  409e66:	f1be 0f00 	cmp.w	lr, #0
  409e6a:	d134      	bne.n	409ed6 <__udivmoddi4+0x16e>
  409e6c:	1beb      	subs	r3, r5, r7
  409e6e:	0c3a      	lsrs	r2, r7, #16
  409e70:	fa1f fc87 	uxth.w	ip, r7
  409e74:	2101      	movs	r1, #1
  409e76:	fbb3 f8f2 	udiv	r8, r3, r2
  409e7a:	0c25      	lsrs	r5, r4, #16
  409e7c:	fb02 3318 	mls	r3, r2, r8, r3
  409e80:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409e84:	fb0c f308 	mul.w	r3, ip, r8
  409e88:	42ab      	cmp	r3, r5
  409e8a:	d907      	bls.n	409e9c <__udivmoddi4+0x134>
  409e8c:	19ed      	adds	r5, r5, r7
  409e8e:	f108 30ff 	add.w	r0, r8, #4294967295
  409e92:	d202      	bcs.n	409e9a <__udivmoddi4+0x132>
  409e94:	42ab      	cmp	r3, r5
  409e96:	f200 80d1 	bhi.w	40a03c <__udivmoddi4+0x2d4>
  409e9a:	4680      	mov	r8, r0
  409e9c:	1aed      	subs	r5, r5, r3
  409e9e:	b2a3      	uxth	r3, r4
  409ea0:	fbb5 f0f2 	udiv	r0, r5, r2
  409ea4:	fb02 5510 	mls	r5, r2, r0, r5
  409ea8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  409eac:	fb0c fc00 	mul.w	ip, ip, r0
  409eb0:	45a4      	cmp	ip, r4
  409eb2:	d907      	bls.n	409ec4 <__udivmoddi4+0x15c>
  409eb4:	19e4      	adds	r4, r4, r7
  409eb6:	f100 33ff 	add.w	r3, r0, #4294967295
  409eba:	d202      	bcs.n	409ec2 <__udivmoddi4+0x15a>
  409ebc:	45a4      	cmp	ip, r4
  409ebe:	f200 80b8 	bhi.w	40a032 <__udivmoddi4+0x2ca>
  409ec2:	4618      	mov	r0, r3
  409ec4:	eba4 040c 	sub.w	r4, r4, ip
  409ec8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  409ecc:	e79d      	b.n	409e0a <__udivmoddi4+0xa2>
  409ece:	4631      	mov	r1, r6
  409ed0:	4630      	mov	r0, r6
  409ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  409ed6:	f1ce 0420 	rsb	r4, lr, #32
  409eda:	fa05 f30e 	lsl.w	r3, r5, lr
  409ede:	fa07 f70e 	lsl.w	r7, r7, lr
  409ee2:	fa20 f804 	lsr.w	r8, r0, r4
  409ee6:	0c3a      	lsrs	r2, r7, #16
  409ee8:	fa25 f404 	lsr.w	r4, r5, r4
  409eec:	ea48 0803 	orr.w	r8, r8, r3
  409ef0:	fbb4 f1f2 	udiv	r1, r4, r2
  409ef4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  409ef8:	fb02 4411 	mls	r4, r2, r1, r4
  409efc:	fa1f fc87 	uxth.w	ip, r7
  409f00:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  409f04:	fb01 f30c 	mul.w	r3, r1, ip
  409f08:	42ab      	cmp	r3, r5
  409f0a:	fa00 f40e 	lsl.w	r4, r0, lr
  409f0e:	d909      	bls.n	409f24 <__udivmoddi4+0x1bc>
  409f10:	19ed      	adds	r5, r5, r7
  409f12:	f101 30ff 	add.w	r0, r1, #4294967295
  409f16:	f080 808a 	bcs.w	40a02e <__udivmoddi4+0x2c6>
  409f1a:	42ab      	cmp	r3, r5
  409f1c:	f240 8087 	bls.w	40a02e <__udivmoddi4+0x2c6>
  409f20:	3902      	subs	r1, #2
  409f22:	443d      	add	r5, r7
  409f24:	1aeb      	subs	r3, r5, r3
  409f26:	fa1f f588 	uxth.w	r5, r8
  409f2a:	fbb3 f0f2 	udiv	r0, r3, r2
  409f2e:	fb02 3310 	mls	r3, r2, r0, r3
  409f32:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  409f36:	fb00 f30c 	mul.w	r3, r0, ip
  409f3a:	42ab      	cmp	r3, r5
  409f3c:	d907      	bls.n	409f4e <__udivmoddi4+0x1e6>
  409f3e:	19ed      	adds	r5, r5, r7
  409f40:	f100 38ff 	add.w	r8, r0, #4294967295
  409f44:	d26f      	bcs.n	40a026 <__udivmoddi4+0x2be>
  409f46:	42ab      	cmp	r3, r5
  409f48:	d96d      	bls.n	40a026 <__udivmoddi4+0x2be>
  409f4a:	3802      	subs	r0, #2
  409f4c:	443d      	add	r5, r7
  409f4e:	1aeb      	subs	r3, r5, r3
  409f50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  409f54:	e78f      	b.n	409e76 <__udivmoddi4+0x10e>
  409f56:	f1c1 0720 	rsb	r7, r1, #32
  409f5a:	fa22 f807 	lsr.w	r8, r2, r7
  409f5e:	408b      	lsls	r3, r1
  409f60:	fa05 f401 	lsl.w	r4, r5, r1
  409f64:	ea48 0303 	orr.w	r3, r8, r3
  409f68:	fa20 fe07 	lsr.w	lr, r0, r7
  409f6c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  409f70:	40fd      	lsrs	r5, r7
  409f72:	ea4e 0e04 	orr.w	lr, lr, r4
  409f76:	fbb5 f9fc 	udiv	r9, r5, ip
  409f7a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  409f7e:	fb0c 5519 	mls	r5, ip, r9, r5
  409f82:	fa1f f883 	uxth.w	r8, r3
  409f86:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  409f8a:	fb09 f408 	mul.w	r4, r9, r8
  409f8e:	42ac      	cmp	r4, r5
  409f90:	fa02 f201 	lsl.w	r2, r2, r1
  409f94:	fa00 fa01 	lsl.w	sl, r0, r1
  409f98:	d908      	bls.n	409fac <__udivmoddi4+0x244>
  409f9a:	18ed      	adds	r5, r5, r3
  409f9c:	f109 30ff 	add.w	r0, r9, #4294967295
  409fa0:	d243      	bcs.n	40a02a <__udivmoddi4+0x2c2>
  409fa2:	42ac      	cmp	r4, r5
  409fa4:	d941      	bls.n	40a02a <__udivmoddi4+0x2c2>
  409fa6:	f1a9 0902 	sub.w	r9, r9, #2
  409faa:	441d      	add	r5, r3
  409fac:	1b2d      	subs	r5, r5, r4
  409fae:	fa1f fe8e 	uxth.w	lr, lr
  409fb2:	fbb5 f0fc 	udiv	r0, r5, ip
  409fb6:	fb0c 5510 	mls	r5, ip, r0, r5
  409fba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  409fbe:	fb00 f808 	mul.w	r8, r0, r8
  409fc2:	45a0      	cmp	r8, r4
  409fc4:	d907      	bls.n	409fd6 <__udivmoddi4+0x26e>
  409fc6:	18e4      	adds	r4, r4, r3
  409fc8:	f100 35ff 	add.w	r5, r0, #4294967295
  409fcc:	d229      	bcs.n	40a022 <__udivmoddi4+0x2ba>
  409fce:	45a0      	cmp	r8, r4
  409fd0:	d927      	bls.n	40a022 <__udivmoddi4+0x2ba>
  409fd2:	3802      	subs	r0, #2
  409fd4:	441c      	add	r4, r3
  409fd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  409fda:	eba4 0408 	sub.w	r4, r4, r8
  409fde:	fba0 8902 	umull	r8, r9, r0, r2
  409fe2:	454c      	cmp	r4, r9
  409fe4:	46c6      	mov	lr, r8
  409fe6:	464d      	mov	r5, r9
  409fe8:	d315      	bcc.n	40a016 <__udivmoddi4+0x2ae>
  409fea:	d012      	beq.n	40a012 <__udivmoddi4+0x2aa>
  409fec:	b156      	cbz	r6, 40a004 <__udivmoddi4+0x29c>
  409fee:	ebba 030e 	subs.w	r3, sl, lr
  409ff2:	eb64 0405 	sbc.w	r4, r4, r5
  409ff6:	fa04 f707 	lsl.w	r7, r4, r7
  409ffa:	40cb      	lsrs	r3, r1
  409ffc:	431f      	orrs	r7, r3
  409ffe:	40cc      	lsrs	r4, r1
  40a000:	6037      	str	r7, [r6, #0]
  40a002:	6074      	str	r4, [r6, #4]
  40a004:	2100      	movs	r1, #0
  40a006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40a00a:	4618      	mov	r0, r3
  40a00c:	e6f8      	b.n	409e00 <__udivmoddi4+0x98>
  40a00e:	4690      	mov	r8, r2
  40a010:	e6e0      	b.n	409dd4 <__udivmoddi4+0x6c>
  40a012:	45c2      	cmp	sl, r8
  40a014:	d2ea      	bcs.n	409fec <__udivmoddi4+0x284>
  40a016:	ebb8 0e02 	subs.w	lr, r8, r2
  40a01a:	eb69 0503 	sbc.w	r5, r9, r3
  40a01e:	3801      	subs	r0, #1
  40a020:	e7e4      	b.n	409fec <__udivmoddi4+0x284>
  40a022:	4628      	mov	r0, r5
  40a024:	e7d7      	b.n	409fd6 <__udivmoddi4+0x26e>
  40a026:	4640      	mov	r0, r8
  40a028:	e791      	b.n	409f4e <__udivmoddi4+0x1e6>
  40a02a:	4681      	mov	r9, r0
  40a02c:	e7be      	b.n	409fac <__udivmoddi4+0x244>
  40a02e:	4601      	mov	r1, r0
  40a030:	e778      	b.n	409f24 <__udivmoddi4+0x1bc>
  40a032:	3802      	subs	r0, #2
  40a034:	443c      	add	r4, r7
  40a036:	e745      	b.n	409ec4 <__udivmoddi4+0x15c>
  40a038:	4608      	mov	r0, r1
  40a03a:	e708      	b.n	409e4e <__udivmoddi4+0xe6>
  40a03c:	f1a8 0802 	sub.w	r8, r8, #2
  40a040:	443d      	add	r5, r7
  40a042:	e72b      	b.n	409e9c <__udivmoddi4+0x134>

0040a044 <__aeabi_idiv0>:
  40a044:	4770      	bx	lr
  40a046:	bf00      	nop
  40a048:	09632509 	.word	0x09632509
  40a04c:	25097525 	.word	0x25097525
  40a050:	75250975 	.word	0x75250975
  40a054:	00000a0d 	.word	0x00000a0d
  40a058:	454c4449 	.word	0x454c4449
  40a05c:	00000000 	.word	0x00000000
  40a060:	51726d54 	.word	0x51726d54
  40a064:	00000000 	.word	0x00000000
  40a068:	20726d54 	.word	0x20726d54
  40a06c:	00637653 	.word	0x00637653
  40a070:	46202d2d 	.word	0x46202d2d
  40a074:	72656572 	.word	0x72656572
  40a078:	20736f74 	.word	0x20736f74
  40a07c:	6d617845 	.word	0x6d617845
  40a080:	20656c70 	.word	0x20656c70
  40a084:	0d0a2d2d 	.word	0x0d0a2d2d
  40a088:	00000000 	.word	0x00000000
  40a08c:	454d4153 	.word	0x454d4153
  40a090:	582d3037 	.word	0x582d3037
  40a094:	00444c50 	.word	0x00444c50
  40a098:	25202d2d 	.word	0x25202d2d
  40a09c:	000d0a73 	.word	0x000d0a73
  40a0a0:	333a3132 	.word	0x333a3132
  40a0a4:	31303a36 	.word	0x31303a36
  40a0a8:	00000000 	.word	0x00000000
  40a0ac:	20727041 	.word	0x20727041
  40a0b0:	32203932 	.word	0x32203932
  40a0b4:	00303230 	.word	0x00303230
  40a0b8:	43202d2d 	.word	0x43202d2d
  40a0bc:	69706d6f 	.word	0x69706d6f
  40a0c0:	3a64656c 	.word	0x3a64656c
  40a0c4:	20732520 	.word	0x20732520
  40a0c8:	2d207325 	.word	0x2d207325
  40a0cc:	000d0a2d 	.word	0x000d0a2d
  40a0d0:	696e6f4d 	.word	0x696e6f4d
  40a0d4:	00726f74 	.word	0x00726f74
  40a0d8:	6c696146 	.word	0x6c696146
  40a0dc:	74206465 	.word	0x74206465
  40a0e0:	7263206f 	.word	0x7263206f
  40a0e4:	65746165 	.word	0x65746165
  40a0e8:	6e6f4d20 	.word	0x6e6f4d20
  40a0ec:	726f7469 	.word	0x726f7469
  40a0f0:	73617420 	.word	0x73617420
  40a0f4:	000a0d6b 	.word	0x000a0d6b
  40a0f8:	54524155 	.word	0x54524155
  40a0fc:	00000000 	.word	0x00000000
  40a100:	63657845 	.word	0x63657845
  40a104:	00657475 	.word	0x00657475
  40a108:	3164654c 	.word	0x3164654c
  40a10c:	00000000 	.word	0x00000000
  40a110:	6c696146 	.word	0x6c696146
  40a114:	74206465 	.word	0x74206465
  40a118:	7263206f 	.word	0x7263206f
  40a11c:	65746165 	.word	0x65746165
  40a120:	73657420 	.word	0x73657420
  40a124:	656c2074 	.word	0x656c2074
  40a128:	61742064 	.word	0x61742064
  40a12c:	0a0d6b73 	.word	0x0a0d6b73
  40a130:	00000000 	.word	0x00000000
  40a134:	3264654c 	.word	0x3264654c
  40a138:	00000000 	.word	0x00000000
  40a13c:	3364654c 	.word	0x3364654c
  40a140:	00000000 	.word	0x00000000
  40a144:	66667542 	.word	0x66667542
  40a148:	203a7265 	.word	0x203a7265
  40a14c:	00000027 	.word	0x00000027
  40a150:	002c6325 	.word	0x002c6325
  40a154:	00000a27 	.word	0x00000a27
  40a158:	686c6166 	.word	0x686c6166
  40a15c:	6d652061 	.word	0x6d652061
  40a160:	69726320 	.word	0x69726320
  40a164:	6f207261 	.word	0x6f207261
  40a168:	6d657320 	.word	0x6d657320
  40a16c:	726f6661 	.word	0x726f6661
  40a170:	000a206f 	.word	0x000a206f
  40a174:	202d2d2d 	.word	0x202d2d2d
  40a178:	6b736174 	.word	0x6b736174
  40a17c:	20232320 	.word	0x20232320
  40a180:	00007525 	.word	0x00007525
  40a184:	25203a43 	.word	0x25203a43
  40a188:	00000a63 	.word	0x00000a63
  40a18c:	63617473 	.word	0x63617473
  40a190:	766f206b 	.word	0x766f206b
  40a194:	6c667265 	.word	0x6c667265
  40a198:	2520776f 	.word	0x2520776f
  40a19c:	73252078 	.word	0x73252078
  40a1a0:	00000a0d 	.word	0x00000a0d

0040a1a4 <_global_impure_ptr>:
  40a1a4:	20400010 00464e49 00666e69 004e414e     ..@ INF.inf.NAN.
  40a1b4:	006e616e 33323130 37363534 42413938     nan.0123456789AB
  40a1c4:	46454443 00000000 33323130 37363534     CDEF....01234567
  40a1d4:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  40a1e4:	0000296c 00000030                       l)..0...

0040a1ec <blanks.7223>:
  40a1ec:	20202020 20202020 20202020 20202020                     

0040a1fc <zeroes.7224>:
  40a1fc:	30303030 30303030 30303030 30303030     0000000000000000

0040a20c <blanks.7217>:
  40a20c:	20202020 20202020 20202020 20202020                     

0040a21c <zeroes.7218>:
  40a21c:	30303030 30303030 30303030 30303030     0000000000000000
  40a22c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
  40a23c:	00000043 49534f50 00000058 0000002e     C...POSIX.......
  40a24c:	00000000                                ....

0040a250 <__mprec_bigtens>:
  40a250:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
  40a260:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
  40a270:	7f73bf3c 75154fdd                       <.s..O.u

0040a278 <__mprec_tens>:
  40a278:	00000000 3ff00000 00000000 40240000     .......?......$@
  40a288:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
  40a298:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
  40a2a8:	00000000 412e8480 00000000 416312d0     .......A......cA
  40a2b8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
  40a2c8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
  40a2d8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
  40a2e8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
  40a2f8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
  40a308:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
  40a318:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
  40a328:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
  40a338:	79d99db4 44ea7843                       ...yCx.D

0040a340 <p05.6055>:
  40a340:	00000005 00000019 0000007d              ........}...

0040a34c <_ctype_>:
  40a34c:	20202000 20202020 28282020 20282828     .         ((((( 
  40a35c:	20202020 20202020 20202020 20202020                     
  40a36c:	10108820 10101010 10101010 10101010      ...............
  40a37c:	04040410 04040404 10040404 10101010     ................
  40a38c:	41411010 41414141 01010101 01010101     ..AAAAAA........
  40a39c:	01010101 01010101 01010101 10101010     ................
  40a3ac:	42421010 42424242 02020202 02020202     ..BBBBBB........
  40a3bc:	02020202 02020202 02020202 10101010     ................
  40a3cc:	00000020 00000000 00000000 00000000      ...............
	...

0040a450 <_init>:
  40a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a452:	bf00      	nop
  40a454:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a456:	bc08      	pop	{r3}
  40a458:	469e      	mov	lr, r3
  40a45a:	4770      	bx	lr

0040a45c <__init_array_start>:
  40a45c:	00406995 	.word	0x00406995

0040a460 <__frame_dummy_init_array_entry>:
  40a460:	0040018d                                ..@.

0040a464 <_fini>:
  40a464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40a466:	bf00      	nop
  40a468:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40a46a:	bc08      	pop	{r3}
  40a46c:	469e      	mov	lr, r3
  40a46e:	4770      	bx	lr

0040a470 <__fini_array_start>:
  40a470:	00400169 	.word	0x00400169
